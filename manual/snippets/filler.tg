[0, "#!/usr/bin/python3\ndesc = \"\"\"\nThe filler program prompts the user to fill out a snipet of code. The filled out snipet is then sent to standard output.\"\"\"", [["^#", 23], ["", 12], ["!pycfg", 27]]]
[4, "read_char s\nchar = s.args.infile.read(1)", [["char == \"\"; s", 11], ["char == \"$\"; s", 28], ["True; s char", 34]]]
[11, "print_end s\nprint(\"----------------------------------\\n\\n\", file=s.args.outfile)\nprint(s.output, file=s.args.outfile)", []]
[12, "#imports\nimport sys\nimport argparse\nfrom types import SimpleNamespace", []]
[23, "License: GPL >= 3\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.", []]
[26, "parse_args s\nparser = argparse.ArgumentParser(description=desc)\nparser.add_argument('infile', nargs='?', type=argparse.FileType('r'), default=sys.stdin)\nparser.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout)                   \ns.args = parser.parse_args()", [["True; s", 4]]]
[27, "initialize_state\ns = SimpleNamespace(feilds={},output=\"\",args=None,fd=None)", [["True; s", 26]]]
[28, "parse_feild s\nchar = s.args.infile.read(1)", [["char == \"{\"; s \"\"", 30], ["char == \"$\"; s \"$\"", 34], ["char == \"\";", 31], ["True; char", 37]]]
[30, "read_feild_name s feild_name\nchar = s.args.infile.read(1)", [["char == \"}\"; s feild_name", 32], ["char == \"\";", 31], ["True; s feild_name char", 33]]]
[31, "die_unexpected_end_of_file\nsys.exit(\"Unexpected end of file while reading feild.\")", []]
[32, "end_feild s feild_name", [["feild_name in s.feilds; s feild_name", 35], ["True; s feild_name", 36]]]
[33, "eat_char s feild_name char\nfeild_name += char", [["True; s feild_name", 30]]]
[34, "add_char_to_output s char\ns.output += char", [["True; s", 4]]]
[35, "append_feild_contents_to_output s feild_name\ns.output += s.feilds[feild_name]", [["True; s", 4]]]
[36, "prompt_for_feild_contents s feild_name\ns.feilds[feild_name] = input(feild_name + \": \")", [["True; s feild_name", 35]]]
[37, "die_expected_feild_or_escape char\nsys.exit(\"Expected feild start, '{' or escape sequence following '$'. Instead received '%s'.\" % char)", []]
