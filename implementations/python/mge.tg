[0, "# Authors: Timothy Hobbs\n# Copyright years: 2016\n# Description:\n# mge is a simple TUI Vim style modal editor for text graphs.", [["", 154], ["", 1], ["", 139], ["", 2], ["", 137]]]
[1, "# imports\nimport sys\nimport optparse\nimport copy\ntry:\n  import urwid\nexcept ImportError:\n  sys.exit(\"The urwid TUI toolkit is required to run this program. On debian based systems you need to install python3-urwid. On other systems you'll have to search the web.\")\nfrom textgraph import *", []]
[10, "@currentTab.setter\ndef currentTab(self,currentTab):", [["\\t", 11]]]
[100, "def recordChanges(self):", [["\\t", 101]]]
[101, "if self.view.mode == 'insert':\n  square = copy.deepcopy(self.view.selectedSquare)\n  changed = False\n  for street,streetEdit in zip(square.streets,self.streetNameEdits):\n    if not street.name == streetEdit.edit_text:\n      street.name = streetEdit.edit_text\n      changed = True\n  if changed:\n    self.view.graph.stageSquare(square)\n    self.view.graph.applyChanges()", []]
[102, "#properties", [["", 103]]]
[103, "#selectedSquareId\n@property\ndef selectedSquareId(self):", [["\\t", 104]]]
[104, "\"\"\"\nThe square that the selected street points to, in the direction going away from the current square.\n\"\"\"\nreturn self.streets[self.focus_position].destination", []]
[105, "def newStreetToNewSquare(self,useDefaultStreetName=True,index=None):", [["\\t", 106]]]
[106, "self.view.recordChanges()\nif useDefaultStreetName:\n  streetName = self.view.defaultStreetName\nelse:\n  streetName = \"\"\nreturn self.view.graph.newLinkedSquare(self.view.selection,streetName,index)\n", []]
[107, "def keypress(self,size,key):", [["\\t", 108]]]
[108, "if self.view.mode == \"insert\":\n  return super(StreetsList,self).keypress(size,key)\nif key in keybindings['move-square-up']:\n  sel = copy.deepcopy(self.view.selectedSquare)\n  fcp = self.focus_position\n  if fcp >= 1:\n    street = sel.streets[fcp]\n    prevStreet = sel.streets[fcp - 1]\n    sel.streets[fcp] = prevStreet\n    sel.streets[fcp - 1] = street\n    self.view.graph.stageSquare(sel)\n    self.view.graph.applyChanges()\n    self.focus_position = fcp - 1\nelif key in keybindings['move-square-down']:\n  sel = copy.deepcopy(self.view.selectedSquare)\n  fcp = self.focus_position\n  if fcp < len(sel.streets):\n    street = sel.streets[fcp]\n    nextStreet = sel.streets[fcp + 1]\n    sel.streets[fcp] = nextStreet\n    sel.streets[fcp + 1] = street\n    self.view.graph.stageSquare(sel)\n    self.view.graph.applyChanges()\n    self.focus_position = fcp + 1\nelif key in ['left']:\n  self.view.focus_item = self.view.incommingStreets\nelif key in keybindings['street-or-back-street-last-stack-item']:\n  if self.view.tabbedEditor.clipboard.squares:\n    if self.streets:\n      fcp = self.focus_position\n    else:\n      fcp = -1\n    filenameOfOriginGraph,square = self.view.tabbedEditor.clipboard.squares.pop() #TODO look at file name of origin!!\n    self.view.tabbedEditor.clipboard.update()\n    sel = copy.deepcopy(self.view.selectedSquare)\n    sel.streets.insert(fcp + 1,Street(self.view.defaultStreetName,square.squareId,self.view.selection))\n    self.view.graph.stageSquare(sel)\n    self.view.graph.applyChanges()\n    self.focus_position = fcp + 1\nelif key in keybindings['copy-square-from-stack']:\n  if self.view.tabbedEditor.clipboard.squares:\n    if self.streets:\n      fcp = self.focus_position\n    else:\n      fcp = -1\n    filenameOfOriginGraph,square = self.view.tabbedEditor.clipboard.squares.pop() #TODO look at file name of origin!!\n    self.view.tabbedEditor.clipboard.update()\n    sel = copy.deepcopy(self.view.selectedSquare)\n    newSquare = Square(self.view.graph.allocSquare(),square.text,copy.deepcopy(square.streets))\n    sel.streets.insert(fcp + 1,Street(self.view.defaultStreetName,newSquare.squareId,self.view.selection))\n    self.view.graph.stageSquare(sel)\n    self.view.graph.stageSquare(newSquare)\n    self.view.graph.applyChanges()\n    self.focus_position = fcp + 1\nelif key in keybindings['remove-street-or-incomming-street']:\n  try:\n    fcp = self.focus_position\n    street = self.streets[fcp]\n    selectedSquare = copy.deepcopy(self.view.selectedSquare)\n    selectedSquare.streets.remove(street)\n    self.view.graph.stageSquare(selectedSquare)\n    self.view.graph.applyChanges()\n  except IndexError:\n    pass\nelse:\n  return super(StreetsList,self).keypress(size,key)", []]
[109, "class Help(urwid.ListBox):", [["\\t", 110]]]
[11, "self._currentTab = currentTab\nself.body = self.graphViews[currentTab]\nself.tabTitle.set_text(\"[\"+str(currentTab+1)+\"/\"+str(len(self.graphViews))+\"] \"+self.view.graph.filename)\nself.view.updateStatusBar()", []]
[110, "#methods", [["", 111], ["", 113], ["", 115]]]
[111, "def __init__(self,view):", [["\\t", 112]]]
[112, "self.view = view\nself.keybindingEdits = {}\nsuper(Help,self).__init__(urwid.SimpleFocusListWalker([]))\nitems = []\nfor command,binding in keybindings.items():\n  edit = urwid.Edit(edit_text=json.dumps(binding))\n  self.keybindingEdits[command] = edit\n  items.append(urwid.Columns([edit, urwid.Text(command)]))\nself.body.extend(items)\nself.focus_position = 0\n", []]
[113, "def keypress(self,size,key):", [["\\t", 114]]]
[114, "return super(Help,self).keypress(size,key)", []]
[115, "def recordChanges(self):", [["\\t", 116]]]
[116, "for command,edit in self.keybindingEdits.items():\n  try:\n    keybindings[command] = json.loads(edit.edit_text)\n  except ValueError:\n    pass", []]
[117, "class SearchBox(urwid.ListBox):", [["\\t", 118], ["\\t", 123]]]
[118, "#methods", [["", 119], ["", 121], ["", 126]]]
[119, "def __init__(self,view):", [["\\t", 120]]]
[12, "def keypress(self,size,key):", [["\\t", 13]]]
[120, "self.view = view\nself.squares = self.view.graph.values()\nsuper(SearchBox,self).__init__(urwid.SimpleFocusListWalker([]))\nself.searchEdit = urwid.Edit()\nself.body.append(self.searchEdit)\nself.update()", []]
[121, "def update(self):", [["\\t", 122]]]
[122, "self.squares = []\nitems = []\nfor square in self.view.graph.values():\n  if square.text is not None:\n    if self.searchEdit.edit_text in square.text:\n      self.squares.append(square)\n      items.append(urwid.Padding(urwid.SelectableIcon(square.title,0),align='left',width=\"pack\"))\ndel self.body[1:]\nself.body.extend(items)\nself.focus_position = 0\n", []]
[123, "#properties", [["", 124]]]
[124, "#focused_square\n@property\ndef focused_square(self):", [["\\t", 125]]]
[125, "if self.focus_position > 0:\n  return self.squares[self.focus_position-1].squareId\nelse:\n  raise IndexError(\"No focused square.\")", []]
[126, "def keypress(self,size,key):", [["\\t", 127]]]
[127, "if self.focus_position == 0:\n  if key == 'enter':\n    try:\n      self.focus_position = 1\n      return super(SearchBox,self).keypress(size,key)\n    except IndexError:\n      pass\n  else:\n    value = super(SearchBox,self).keypress(size,key)\n    self.update()\n    return value\nif key in keybindings['command-mode.up']:\n  return super(SearchBox,self).keypress(size,'up')\nelif key in keybindings['command-mode.down']:\n  return super(SearchBox,self).keypress(size,'down')\nelif key in keybindings['jump-to-command-bar']:\n  self.view.focus_position = 'footer'\nelif key in keybindings['jump-to-stack-area']:\n  self.view.focus_position = 'header'\nelif key == 'enter':\n  self.view.selection = self.focused_square\n  self.view.mode = 'command'\nelif key in keybindings['insert-mode']:\n  self.view.selection = self.focused_square\n  self.view.mode = 'insert'\nelif key in keybindings['add-to-stack']:\n  self.view.tabbedEditor.clipboard.squares.append((self.view.graph.filename,self.view.graph[self.focused_square]))\n  self.view.tabbedEditor.clipboard.update()\nelse:\n  return super(SearchBox,self).keypress(size,key)", []]
[128, "class CommandBar(urwid.Edit):", [["\\t", 129], ["\\t", 133]]]
[129, "#methods", [["", 130], ["", 132]]]
[13, "command = self.getCommand(key)", [["", 144], ["", 147], ["", 149], ["", 151], ["", 146]]]
[130, "def __init__(self,editor):", [["\\t", 131]]]
[131, "self.editor = editor\nself.edit = self\nsuper(CommandBar,self).__init__(\":\")\n", []]
[132, "def keypress(self,size,key):", [["\\t", 136]]]
[133, "#properties", [["", 134]]]
[134, "#view\n@property\ndef view(self):", [["\\t", 135]]]
[135, "return self.editor.view", []]
[136, "if key != 'enter':\n  return super(CommandBar,self).keypress(size,key)\nsuccess = False\ncom = self.edit.edit_text\nif com == \"savedot\":\n  success = True\n  try:\n    self.view.graph.saveDot()\n  except OSError as e:\n    self.view.statusMessage = str(e)\nelif com.startswith(\"o \"):\n  success = True\n  try:\n    _,filename = com.split()\n  except ValueError:\n    self.view.statusMessage = \"Need a path/URL to a file to open!\"\n  try:\n    self.editor.graphViews.append(GraphView(TextGraph(filename),self.editor))\n    self.editor.currentTab = len(self.editor.graphViews) - 1\n  except (OSError,ValueError) as e:\n    self.view.statusMessage = str(e)\nelse:\n  if \"w\" in com:\n    success = True\n    try:\n      self.view.recordChanges()\n      self.view.graph.save()\n      self.view.graph.edited = False\n    except (FileNotFoundError,OSError) as e:\n      self.edit.set_caption(\"Unable to save:\"+str(e)+\"\\n:\")\n  if \"q\" in com:\n    success = True\n    if self.view.graph.edited and \"!\" not in com:\n      self.edit.set_caption(\"Not quiting. Save your work first, or use 'q!'\\n:\")\n    else:\n      raise urwid.ExitMainLoop()\n  try:\n    newSelection = int(com)\n    if newSelection in self.view.graph and self.view.graph[newSelection].text is not None:\n      self.view.selection = newSelection\n      self.view.focus_item = self.view.currentSquareWidget\n      self.view.mode = 'command'\n      success = True\n    else:\n      self.edit.set_caption(\"Cannot jump to \"+com+\". Square does not exist.\\n:\")\n  except ValueError:\n    pass\nself.edit.edit_text = \"\"\nif success:\n  self.editor.focus_position = 'body'\nelse:\n  self.edit.set_caption(com + \" is not a valid mge command.\\n:\")", []]
[137, "# Main function", [["", 138]]]
[138, "if __name__ == \"__main__\":\n  parser = optparse.OptionParser(usage = \"mge FILE\",description = \"Edit simple text graph file(tg file) using a simple,fast TUI interface.\")\n  options,args = parser.parse_args(sys.argv[1:])\n\n  if not len(args) >= 1:\n    sys.exit(\"mge expects to be passed at least one file path for editing. Use --help for help.\")\n\n  try:\n    editor = MultiTabEditor(args)\n  except (OSError,ValueError) as e:\n    sys.exit(str(e))\n  urwid.MainLoop(editor,pallet,handle_mouse=False).run()", []]
[139, "# Globals", [["", 140], ["", 141]]]
[14, "class MultiTabEditor(urwid.Frame):", [["\\t", 3], ["\\t", 142]]]
[140, "keybindings = {\n # Superglobal / multitab editor\n 'next-tab': ['meta page down'],\n 'prev-tab': ['meta page up'],\n # global/command-mode\n 'back' : ['meta left','b'],\n 'street-or-back-street-last-stack-item' : ['p'],\n 'copy-square-from-stack' : ['P'],\n 'add-to-stack' : ['c'],\n 'move-square-up' : ['ctrl up'],\n 'move-square-down' : ['ctrl down'],\n 'new-square' : ['n'],\n 'new-square-global' : ['ctrl n'],\n 'new-square-with-blank-street-name' : ['meta n'],\n 'new-square-setting-street-name' : ['meta i'],\n 'new-square-streeted-to-previous-square' : ['meta enter'],\n 'remove-street-or-incomming-street' : ['d'],\n 'delete-square' : ['delete'],\n 'delete-tree' : ['ctrl delete'],\n 'jump-to-command-bar' : [':'],\n 'jump-to-stack-area' : ['s'],\n 'leave-and-go-to-mainer-part' : ['esc'],\n 'command-mode' : ['esc'],\n 'command-mode.up' : ['k'],\n 'command-mode.down' : ['j'],\n 'command-mode.left' : ['h'],\n 'command-mode.right' : ['l'],\n 'command-mode.delete' : ['x'],\n 'command-mode.undo' : ['u'],\n 'command-mode.redo' : ['ctrl r'],\n 'next-sibling' : ['meta s'],\n 'insert-mode' : ['i'],\n 'search-mode' : ['/'],\n 'help-mode'   : ['?'],\n 'show-map-of-neighborhood': ['m'],\n 'show-map': ['M'],\n 'clear-default-street-name': ['F'],\n 'go-down-default-street': ['g'],\n 'go-up-default-street': ['G'],\n # street navigator\n 'set-default-street-name': ['f'],\n 'reverse-street-direction': ['meta r'],\n # stack area\n 'remove-from-stack' : ['d'],\n 'street-to-stack-item-no-pop' : ['ctrl right'],\n 'street-to-stack-item' : ['right'],\n 'incommingStreet-to-stack-item-no-pop' : ['ctrl left'],\n 'incommingStreet-to-stack-item' : ['left'],\n }\n", []]
[141, "pallet = [('incommingStreet_selected', 'white', 'dark blue')\n         ,('street_selected', 'white', 'dark red')\n         ,('selection','black','white')\n         ,('clipboard','white','dark gray')\n         ,('tabtitle','black','white')]", []]
[142, "#properties", [["", 6], ["", 8], ["", 10]]]
[144, "if command == \"next-tab\":", [["\\t", 145]]]
[145, "if self.currentTab < len(self.graphViews) - 1:\n  self.currentTab += 1", []]
[146, "return None", []]
[147, "elif command == \"prev-tab\":", [["\\t", 148]]]
[148, "if self.currentTab > 0:\n  self.currentTab -= 1", []]
[149, "elif command == \"jump-to-body\":", [["\\t", 150]]]
[15, "class GraphView(urwid.WidgetPlaceholder):", [["\\t", 16], ["\\t", 54]]]
[150, "if self.focus_position != 'body':\n  self.focus_position = 'body'\nelse:\n  return super(MultiTabEditor,self).keypress(size,key)", []]
[151, "else:", [["\\t", 152]]]
[152, "return super(MultiTabEditor,self).keypress(size,key)", []]
[154, "# Licence: GPL >= 3\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.", []]
[155, "class Config(TextGraph):", [["\\t", 156]]]
[156, "#methods", [["", 157], ["", 160]]]
[157, "def __init__(self):", [["\\t", 158]]]
[158, "super(Config,self).__init__(\"./mge-config.tg\")", []]
[16, "#methods", [["", 17], ["", 19], ["", 21], ["", 23], ["", 166], ["", 45]]]
[160, "def getCommand(self, className, mode, key):", [["\\t", 175], ["\\t", 161]]]
[161, "for keypath in keypaths:\n  try:\n    keySquareId = self.lookupSquareViaContents(0,keypath)\n    return self[self[keySquareId].streets[0].destination].text\n  except KeyError:\n    pass\nreturn None", []]
[162, "def getCommand(self,key):", [["\\t", 167]]]
[163, "return self.tabbedEditor.conf.getCommand(\"GraphView\",self.mode,key)", []]
[164, "command = self.getCommand(key)", [["", 195], ["", 171], ["", 185], ["", 197], ["", 199], ["", 183], ["", 190], ["", 192], ["", 188], ["", 217], ["", 219], ["", 201], ["", 203], ["", 205], ["", 207], ["", 209], ["", 211], ["", 46], ["", 213], ["", 215], ["", 173]]]
[165, "def getCommand(self,key):", []]
[166, "def getCommand(self,key):", [["\\t", 163]]]
[167, "return self.conf.getCommand(\"MultiTabEditor\",\"\",key)", []]
[168, "if self.mode in ['search', 'help']:\n  return self.keypressDialogmode(size, key)\nfocusedBeforeProcessing = self.focus_item\n#try:\nvalue = self.handleKeypress(size,key)\n#except AttributeError as e:\n#  self.statusMessage = str(e)\n#  value = None\nif key in keybindings['command-mode.down'] and focusedBeforeProcessing == self.currentSquareWidget and self.focus_item == self.streets:\n  self.streets.focus_position = 0\nself.updateStatusBar()\nreturn value", []]
[17, "def __init__(self,graph,tabbedEditor):", [["\\t", 18]]]
[170, "self.updateStatusBar()", []]
[171, "if command == 'command-mode':", [["\\t", 172]]]
[172, "self.mode = 'command'\nself.original_widget = self.pile", []]
[173, "if command == 'send-key-to-child' or command == 'record-changes-and-send-key-to-child':", [["\\t", 174]]]
[174, "super(GraphView,self).keypress(size,key)", []]
[175, "keypaths = [", [["\\t", 176], ["\\t", 177], ["\\t", 178], ["\\t", 179]]]
[176, "[\"objects\",className,\"keybindings\",mode,key],", []]
[177, "[\"objects\",className,\"keybindings\",mode,\"any-key\"],", []]
[178, "[\"objects\",className,\"keybindings\",\"all-modes\",key],", []]
[179, "[\"objects\",className,\"keybindings\",\"all-modes\",\"any-key\"]]", []]
[18, "self.__mode = 'command'\nself.defaultStreetName = \"\"\nself.graph = graph\nself._selection = 0\nself.tabbedEditor = tabbedEditor\nself.history = []\nself._statusMessage = \"\"\nself.graph.applyChangesHandler = self.update\n# incommingStreets\nself.incommingStreets = IncommingStreetsList(self)\n# current square\nself.currentSquare = CurrentSquare(self)\nself.currentSquareWidget = urwid.Padding(urwid.Filler(urwid.AttrMap(self.currentSquare,None,\"selection\")),left=3)\n# streets\nself.streets = StreetsList(self)\n# search box\nself.searchBox = SearchBox(self)\n# help\nself.help = Help(self)\n# main widget\nself.pile = urwid.Pile([self.incommingStreets,self.currentSquareWidget,self.streets])\nsuper(GraphView,self).__init__(self.pile)\nself.updateStatusBar()\nself.focus_item = self.currentSquareWidget\nself.update()\nself.incommingStreets.focusLastStreet()", []]
[180, "focusedBeforeProcessing = self.focus_item\nself.original_widget.keypress(size,'down')\nif focusedBeforeProcessing == self.currentSquareWidget and self.focus_item == self.streets:\n  self.streets.focus_position = 0", []]
[182, "  self.recordChanges()\n  value = super(GraphView,self).keypress(size,key)", []]
[183, "if command == 'jump-to-center':", [["\\t", 184]]]
[184, "self.focus_item = self.currentSquareWidget", []]
[185, "if command == 'insert-mode':", [["\\t", 187]]]
[187, "self.mode = \"insert\"", []]
[188, "if command == 'back':", [["\\t", 189]]]
[189, "if self.history:\n  self._selection = self.history.pop()", []]
[19, "def update(self):", [["\\t", 20]]]
[190, "if command == 'jump-to-command-bar':", [["\\t", 191]]]
[191, "self.tabbedEditor.focus_position = 'footer'", []]
[192, "if command == 'jump-to-stack-area':", [["\\t", 193]]]
[193, "self.tabbedEditor.focus_position = 'header'", []]
[195, "if not command == 'send-key-to-child':", [["\\t", 196]]]
[196, "self.recordChanges()", []]
[197, "if command == 'search-mode':", [["\\t", 198]]]
[198, "self.mode = 'search'\nself.searchBox.searchEdit.edit_text = \"\"\nself.searchBox.update()", []]
[199, "if command == 'help-mode':", [["\\t", 200]]]
[2, "# Classes", [["", 155], ["", 14], ["", 15], ["", 52], ["", 64], ["", 72], ["", 81], ["", 96], ["", 109], ["", 117], ["", 128]]]
[20, "# Make sure the selected square still exists...\nif self.selection not in self.graph:\n  while self.history:\n    prevSelection = self.history.pop()\n    if prevSelection in self.graph and self.graph[prevSelection].text is not None:\n      self.selection = prevSelection\n      break\n  if not self.history:\n    self.selection = 0\n# incommingStreets\nincommingStreets = []\nfor incommingStreet in self.graph[self.selection].incommingStreets:\n  incommingStreets.append(copy.deepcopy(incommingStreet))\nself.incommingStreets.update(incommingStreets)\n# current square\ntry:\n  self.currentSquare.edit_text = self.selectedSquare.text\nexcept AttributeError:\n  if not self.graph[self.history[-1]].text is None:\n    self.selection = self.history[-1]\n  else:\n    self.selection = 0\n  self.currentSquare.edit_text = self.selectedSquare.text\n# streets\nself.streets.update(self.selectedSquare.streets)", []]
[200, "self.mode = 'help'", []]
[201, "if command == 'show-map':", [["\\t", 202]]]
[202, "self.graph.showDiagram(markedSquares={self.selection:{\"fontcolor\":\"white\",\"fillcolor\":\"black\",\"style\":\"filled\"}})", []]
[203, "if command == 'show-map-of-neighborhood':", [["\\t", 204]]]
[204, "self.graph.showDiagram(neighborhoodCenter = self.selection, neighborhoodLevel = 4,markedSquares={self.selection:{\"fontcolor\":\"white\",\"fillcolor\":\"black\",\"style\":\"filled\"}})", []]
[205, "if command == 'go-down-default-street':", [["\\t", 206]]]
[206, "try:\n  self.selection = self.selectedSquare.lookupStreet(self.defaultStreetName).destination\nexcept KeyError:\n  pass", []]
[207, "if command == 'go-up-default-street':", [["\\t", 208]]]
[208, "for street in self.incommingStreets.streets:\n  if street.name == self.defaultStreetName:\n    self.selection = street.origin\n    break", []]
[209, "if command == 'clear-default-street-name':", [["\\t", 210]]]
[21, "def updateStatusBar(self):", [["\\t", 22]]]
[210, "self.defaultStreetName = \"\"", []]
[211, "if command == 'up':", [["\\t", 212]]]
[212, "super(GraphView,self).keypress(size,'up')", []]
[213, "if command == 'left':", [["\\t", 214]]]
[214, "super(GraphView,self).keypress(size,'left')", []]
[215, "if command == 'right':", [["\\t", 216]]]
[216, "super(GraphView,self).keypress(size,'right')", []]
[217, "if command == 'undo':", [["\\t", 218]]]
[218, "self.graph.undo()\nif self.selection >= len(self.graph):\n  self.selection = 0\nif self.selectedSquare.text is None:\n  self.selection = 0", []]
[219, "if command == 'redo':", [["\\t", 220]]]
[22, "if self.graph.readonly:\n  edited = \"Read only!\"\nelif self.graph.edited:\n  edited = \"Edited\"\nelse:\n  edited = \"Saved\"\nif self.mode == 'search':\n  try:\n    currentSquareId = self.searchBox.focused_square\n  except IndexError:\n    currentSquareId = 0\nelif self.mode == 'help':\n    currentSquareId = 0\nelif self.focus_item == self.incommingStreets:\n  try:\n    currentSquareId = self.incommingStreets.streets[self.incommingStreets.focus_position].origin\n  except IndexError:\n    currentSquareId = self.selection\nelif self.focus_item == self.streets:\n  try:\n    currentSquareId = self.streets.streets[self.streets.focus_position].destination\n  except IndexError:\n    currentSquareId = self.selection\nelse:\n  currentSquareId = self.selection\nself.tabbedEditor.statusBar.set_text(\"\u25a1:\"+str(currentSquareId) + \" \" + edited + \" Undo: \"+str(len(self.graph.done))+\" Redo: \"+str(len(self.graph.undone))+\" Mode: \"+self.mode+\" \u2192 \"+self.defaultStreetName+\" | \"+self.statusMessage)", []]
[220, "self.graph.redo()", []]
[224, "def getCommand(self,key):", [["\\t", 225]]]
[225, "return self.view.tabbedEditor.conf.getCommand(\"Clipboard\",\"\",key)", []]
[226, "command = self.getCommand(key)", [["", 63], ["", 229], ["", 233], ["", 231]]]
[228, "try:\n  fcp = self.focus_position\nexcept IndexError:\n  pass\nelse:\n  del self.squares[fcp]\n  self.update()\n  if fcp < len(self.squares):\n    self.focus_position = fcp", []]
[229, "if command == 'street-to-stack-item' or command == 'street-to-stack-item-no-pop':", [["\\t", 230]]]
[23, "def recordChanges(self):", [["\\t", 24]]]
[230, "try:\n  fcp = self.focus_position\nexcept IndexError:\n  pass\nelse:\n  square = self.squares[fcp]\nif not command == 'street-to-stack-item-no-pop':\n  del self.squares[fcp]\n  currentSquare = copy.deepcopy(self.view.selectedSquare)\n  currentSquare.streets.append(Street(self.view.defaultStreetName,square.squareId,currentSquare.squareId))\n  self.view.graph.stageSquare(currentSquare)\n  self.view.graph.applyChanges()", []]
[231, "if command == 'send-key-to-child':", [["\\t", 232]]]
[232, "return super(Clipboard,self).keypress(size,key)", []]
[233, "if command == 'incomming-street-to-stack-item' or command == 'incomming-street-to-stack-item-no-pop':", [["\\t", 234]]]
[234, "try:\n  fcp = self.focus_position\nexcept IndexError:\n  pass\nelse:\n  square = self.squares[fcp]\n  if not command == 'incommingStreet-to-stack-item-no-pop':\n    del self.squares[fcp]\n  square.streets.append(Street(self.view.defaultStreetName,self.view.selection,square.squareId))\n  self.view.graph.stageSquare(square)\n  self.view.graph.applyChanges()", []]
[24, "if self.selectedSquare.text != self.currentSquare.edit_text:\n   currentSquare = copy.deepcopy(self.selectedSquare)\n   currentSquare.text = self.currentSquare.edit_text\n   self.graph.stageSquare(currentSquare)\n   self.graph.applyChanges()\nself.streets.recordChanges()\nself.incommingStreets.recordChanges()\nself.help.recordChanges()", []]
[25, "#selection\n@property\ndef selection(self):", [["\\t", 26]]]
[26, "return self._selection", []]
[27, "@selection.setter\ndef selection(self,value):", [["\\t", 28]]]
[28, "self.history.append(self.selection)\nself._selection = value\nself.update()", []]
[29, "#selectedSquare\n@property\ndef selectedSquare(self):", [["\\t", 30]]]
[3, "#methods", [["", 4], ["", 12], ["", 162]]]
[30, "return self.graph[self.selection]", []]
[31, "@selectedSquare.setter\ndef selectedSquare(self,value):", [["\\t", 32]]]
[32, "self.selection = value.squareId", []]
[33, "#focus_item\n@property\ndef focus_item(self):", [["\\t", 34]]]
[34, "return self.original_widget.focus_item", []]
[35, "@focus_item.setter\ndef focus_item(self,value):", [["\\t", 36]]]
[36, "self.original_widget.focus_item = value", []]
[37, "#mode\n@property\ndef mode(self):", [["\\t", 38]]]
[38, "return self.__mode", []]
[39, "@mode.setter\ndef mode(self,value):", [["\\t", 40]]]
[4, "def __init__(self,filenames):", [["\\t", 5]]]
[40, "self.__mode = value\nif value == 'command':\n  self.original_widget = self.pile\n  self.update()\nelif value == 'search':\n  self.original_widget = self.searchBox\nelif value == 'help':\n  self.original_widget = self.help\nelif value == 'insert':\n  self.update()\nelse:\n  raise ValueError(\"Invalid mode\"+value)\n", []]
[41, "#statusMessage\n@property\ndef statusMessage(self):", [["\\t", 42]]]
[42, "return self._statusMessage", []]
[43, "@statusMessage.setter\ndef statusMessage(self,value):", [["\\t", 44]]]
[44, "self._statusMessage = value\nself.updateStatusBar()", []]
[45, "def keypress(self,size,key):", [["\\t", 164], ["\\t", 170]]]
[46, "if command == 'down':", [["\\t", 180]]]
[5, "# conf\nself.conf = Config()\n# clipboard\nself.clipboard = Clipboard(self)\nself.clipboardBoxAdapter = urwid.BoxAdapter(self.clipboard,3)\n# status bar\nself.statusBar = urwid.Text(\"\")\n# tab title\nself.tabTitle = urwid.Text(\"\")\n# command bar\nself.commandBar = CommandBar(self)\n# graph views/tabs\nself.graphViews = []\nfor filename in filenames:\n  self.graphViews.append(GraphView(TextGraph(filename),self))\nself._currentTab = 0\nself.currentTab = 0\nsuper(MultiTabEditor,self).__init__(self.graphViews[0],header=self.clipboardBoxAdapter,footer=urwid.BoxAdapter(urwid.ListBox(urwid.SimpleFocusListWalker([self.statusBar,urwid.AttrMap(self.tabTitle,\"tabtitle\"),self.commandBar])),height=4))", []]
[51, "if key == 'esc':\n  self.mode = 'command'\n  self.original_widget = self.pile\n  return None\nelse:\n  value = self.original_widget.keypress(size,key)\n  return value", []]
[52, "class Clipboard(urwid.ListBox):", [["\\t", 53], ["\\t", 58]]]
[53, "#methods", [["", 55], ["", 57], ["", 224], ["", 62]]]
[54, "#properties", [["", 41], ["", 43], ["", 37], ["", 39], ["", 33], ["", 35], ["", 29], ["", 31], ["", 25], ["", 27]]]
[55, "def __init__(self,editor):", [["\\t", 56]]]
[56, "self.editor = editor\nself.selectionCollor = \"clipboard\"\nself.alignment = \"right\"\nself.squares = []\nsuper(Clipboard,self).__init__(urwid.SimpleFocusListWalker([]))", []]
[57, "def update(self,squares=None):", [["\\t", 61]]]
[58, "#properties", [["", 59]]]
[59, "# view\n@property\ndef view(self):", [["\\t", 60]]]
[6, "#view\n@property\ndef view(self):", [["\\t", 7]]]
[60, "return self.editor.view", []]
[61, "if squares is not None:\n  self.squares = squares\nitems = []\nif not self.squares:\n  items.append(urwid.AttrMap(urwid.Padding(urwid.SelectableIcon(\" \",0),align=self.alignment,width=\"pack\"),None,self.selectionCollor))\nfor square in self.squares:\n  items.append(urwid.AttrMap(urwid.Padding(urwid.SelectableIcon(square[1].title,0),align=self.alignment,width=\"pack\"),None,self.selectionCollor))\nself.body.clear()\nself.body.extend(items)", []]
[62, "def keypress(self,size,key):", [["\\t", 226]]]
[63, "if command == 'remove-from-stack':", [["\\t", 228]]]
[64, "class CurrentSquare(urwid.Edit):", [["\\t", 65]]]
[65, "#methods", [["", 66], ["", 68], ["", 70]]]
[66, "def __init__(self,view):", [["\\t", 67]]]
[67, "self.selection = (0,0)\nself.view = view\nsuper(CurrentSquare,self).__init__(edit_text=\"\",align=\"left\",multiline=True)\nself.cursorCords = (0,0)", []]
[68, "def render(self,size,focus=False):", [["\\t", 69]]]
[69, "self.move_cursor_to_coords(size,self.cursorCords[0],self.cursorCords[1])\nreturn super(CurrentSquare,self).render(size,focus=focus)", []]
[7, "return self.graphViews[self.currentTab]", []]
[70, "def keypress(self,size,key):", [["\\t", 71]]]
[71, "if key in keybindings['new-square-streeted-to-previous-square']:\n  prevSquare = self.view.history[-1]\n  self.view.recordChanges()\n  newSquareId = self.view.graph.newLinkedSquare(prevSquare,self.view.defaultStreetName)\n  self.view.selection = newSquareId\n  self.view.history.append(prevSquare)\nif key in keybindings[\"next-sibling\"]:\n  self.view.selection = self.view.graph.getNextSibling(self.view.selection)\nif key in keybindings['new-square-global']:\n  self.view.selection = self.view.streets.newStreetToNewSquare(useDefaultStreetName=True)\n  self.view.focus_item = self.view.currentSquareWidget\n  self.view.mode = 'insert'\nif self.view.mode =='command':\n  if key in keybindings['add-to-stack']:\n    self.view.tabbedEditor.clipboard.squares.append((self.view.graph.filename,self.view.selectedSquare))\n    self.view.tabbedEditor.clipboard.update()\n  elif key in keybindings['new-square']:\n    self.view.selection = self.view.streets.newStreetToNewSquare(useDefaultStreetName=True, index = 0)\n    self.view.focus_item = self.view.currentSquareWidget\n    self.view.mode = 'insert'\n  elif key in keybindings['delete-square']:\n    if self.view.selection != 0:\n      self.view.graph.deleteSquare(self.view.selection)\n    else:\n      self.view.statusMessage = \"Cannot delete square 0.\"\n  elif key in keybindings['delete-tree']:\n    self.view.graph.deleteTree(self.view.selection)\n  elif key in keybindings['command-mode.delete']:\n    return super(CurrentSquare,self).keypress(size,'delete')\n  elif not self.valid_char(key):\n    value = super(CurrentSquare,self).keypress(size,key)\n    self.cursorCords = self.get_cursor_coords(size)\n    return value\n  else:\n    return key\nelse:\n  value = super(CurrentSquare,self).keypress(size,key)\n  self.cursorCords = self.get_cursor_coords(size)\n  return value", []]
[72, "class StreetNavigator(urwid.ListBox):", [["\\t", 73]]]
[73, "#methods", [["", 74], ["", 76], ["", 78]]]
[74, "def __init__(self,view,selectionCollor,alignment):", [["\\t", 75]]]
[75, "self.view = view\nself.selectionCollor = selectionCollor\nself.alignment = alignment\nself.streets = []\nself.streetNameEdits = []\nsuper(StreetNavigator,self).__init__(urwid.SimpleFocusListWalker([]))", []]
[76, "def update(self,streets=None):", [["\\t", 77]]]
[77, "if streets is not None:\n  self.streets = streets\nitems = []\nself.streetNameEdits = []\nif not self.streets:\n  items.append(urwid.AttrMap(urwid.Padding(urwid.SelectableIcon(\" \",0),align=self.alignment,width=\"pack\"),None,self.selectionCollor))\nfor street in self.streets:\n  if self.alignment == 'left':\n    if self.view.mode == 'command':\n      items.append(urwid.Columns([urwid.AttrMap(urwid.Padding(urwid.SelectableIcon(self.view.graph[street.origin].title + \" \u2192 \",0),width=\"pack\"),None,self.selectionCollor),urwid.Text(street.name)]))\n    elif self.view.mode == 'insert':\n      edit = urwid.Edit(edit_text=street.name)\n      self.streetNameEdits.append(edit)\n      items.append(urwid.Columns([urwid.Text(self.view.graph[street.origin].title + \" \u2192 \"),edit]))\n  elif self.alignment == 'right':\n    if self.view.mode == 'command':\n      items.append(urwid.Columns([urwid.Text(street.name),urwid.AttrMap(urwid.Padding(urwid.SelectableIcon(\" \u2192 \" + self.view.graph[street.destination].title,0),width=\"pack\"),None,self.selectionCollor)]))\n    elif self.view.mode == 'insert':\n      edit = urwid.Edit(edit_text=street.name)\n      self.streetNameEdits.append(edit)\n      items.append(urwid.Columns([edit,urwid.Text(\" \u2192 \" + self.view.graph[street.destination].title)]))\ntry:\n  fp = self.focus_position\nexcept IndexError:\n  fp = 0\nself.body.clear()\nself.body.extend(items)\nif fp < len(items):\n  self.focus_position = fp", []]
[78, "def keypress(self,size,key):", [["\\t", 79]]]
[79, "if self.view.mode == \"insert\":\n  return super(StreetNavigator,self).keypress(size,key)\nif key in keybindings[\"next-sibling\"]:\n  self.view.selection = self.view.graph.getNextSibling(self.view.selection)\nif key in keybindings['new-square'] or key in keybindings['new-square-global']:\n  self.view.selection = self.newStreetToNewSquare(useDefaultStreetName=True,index = self.focus_position + 1)\n  self.view.focus_item = self.view.currentSquareWidget\n  self.view.mode = 'insert'\nif key in keybindings['new-square-with-blank-street-name']:\n  self.view.selection = self.newStreetToNewSquare(useDefaultStreetName=False,index = self.focus_position + 1)\n  self.view.focus_item = self.view.currentSquareWidget\n  self.view.mode = 'insert'\nif key in keybindings['new-square-setting-street-name']:\n  self.newStreetToNewSquare(useDefaultStreetName=False,index = self.focus_position + 1)\n  self.view.mode = 'insert'\n  try:\n    self.focus_position = self.focus_position + 1\n  except IndexError:\n    pass\n  return None\nif key in keybindings['set-default-street-name']:\n  if self.streets:\n    self.view.defaultStreetName = self.streets[self.focus_position].name\nif key in [self.alignment,'enter']:\n  if self.streets:\n    self.view.recordChanges()\n    self.view.selection = self.selectedSquareId\n    if key == 'enter':\n      self.view.focus_item = self.view.currentSquareWidget\n      self.view.mode = 'insert'\n  else:\n    pass\nif key in keybindings[\"delete-square\"]:\n  if self.streets:\n    squareId = self.selectedSquareId\n    if squareId != 0:\n      self.view.graph.deleteSquare(squareId)\n    else:\n      self.view.statusMessage = \"Cannot delete square 0.\"\nif key in keybindings[\"delete-tree\"]:\n  if self.streets:\n    squareId = self.selectedSquareId\n    if squareId != 0:\n      self.view.graph.deleteTree(squareId)\n    else:\n      self.view.statusMessage = \"Cannot delete square 0.\"\nif key in keybindings[\"add-to-stack\"]:\n  if self.streets:\n    self.view.tabbedEditor.clipboard.squares.append((self.view.graph.filename,self.view.graph[self.selectedSquareId]))\n    self.view.tabbedEditor.clipboard.update()\n    fcp = self.focus_position\n    self.focus_position = fcp\nelse:\n  return super(StreetNavigator,self).keypress(size,key)", []]
[8, "#currentTab\n@property\ndef currentTab(self):", [["\\t", 9]]]
[81, "class IncommingStreetsList(StreetNavigator):", [["\\t", 82], ["\\t", 89]]]
[82, "#methods", [["", 83], ["", 85], ["", 87], ["", 92], ["", 94]]]
[83, "def __init__(self,view):", [["\\t", 84]]]
[84, "super(IncommingStreetsList,self).__init__(view,'incommingStreet_selected','left')", []]
[85, "def focusLastStreet(self):", [["\\t", 86]]]
[86, "lastStreet = len(self.streets) - 1\nif lastStreet > 0:\n  self.focus_position = lastStreet", []]
[87, "def recordChanges(self):", [["\\t", 88]]]
[88, "if self.view.mode == \"insert\":\n  newStreetNamesBySquareOfOrigin = {}\n  for edit,street in zip(self.streetNameEdits,self.streets):\n    if street.origin not in newStreetNamesBySquareOfOrigin:\n      newStreetNamesBySquareOfOrigin[street.origin] = []\n    newStreetNamesBySquareOfOrigin[street.origin].append(edit.edit_text)\n  for squareOfOrigin,streetNames in newStreetNamesBySquareOfOrigin.items():\n    square = copy.deepcopy(self.view.graph[squareOfOrigin])\n    changed = False\n    for street in square.streets:\n      if street.destination == self.view.selection:\n        newStreetName = streetNames.pop()\n        if not street.name == newStreetName:\n          street.name = newStreetName\n          changed = True\n    if changed:\n      self.view.graph.stageSquare(square)\n  self.view.graph.applyChanges()", []]
[89, "#properties", [["", 90]]]
[9, "return self._currentTab", []]
[90, "#selectedSquareId\n@property\ndef selectedSquareId(self):", [["\\t", 91]]]
[91, "\"\"\"\nThe square that the selected street points to, in the direction going away from the current square.\n\"\"\"\nreturn self.streets[self.focus_position].origin", []]
[92, "def newStreetToNewSquare(self,useDefaultStreetName=True, index = None):", [["\\t", 93]]]
[93, "self.view.recordChanges()\nsquareId = self.view.graph.allocSquare()\nif useDefaultStreetName:\n  streetName = self.view.defaultStreetName\nelse:\n  streetName = \"\"\nsquare = Square(squareId,\"\",[Street(streetName,self.view.selection,squareId)])\nself.view.graph.stageSquare(square)\nself.view.graph.applyChanges()\nreturn square.squareId", []]
[94, "def keypress(self,size,key):", [["\\t", 95]]]
[95, "if self.view.mode == \"insert\":\n  return super(IncommingStreetsList,self).keypress(size,key)\nif key in ['right']:\n  self.view.focus_item = self.view.streets\n  try:\n    self.view.streets.focus_position = 0\n  except IndexError:\n    pass\nif key in keybindings['reverse-street-direction']:\n  try:\n    fcp = self.focus_position\n    street = self.streets[fcp]\n    square = copy.deepcopy(self.view.graph[street.origin])\n    #def imsurethereisacleanerwayofdoingthis(l):\n    def a(l):\n      if l == []: return []\n      i = l.pop()\n      if i.destination == street.destination and i.name == street.name: return l\n      else: return [i] + a(l)\n    square.streets = a(square.streets)\n    self.view.graph.stageSquare(square)\n    square = copy.deepcopy(self.view.graph[street.destination])\n    square.streets.append(Street(street.name,origin=street.destination,destination=street.origin))\n    self.view.graph.stageSquare(square)\n    self.view.graph.applyChanges()\n  except IndexError:\n    pass\nif key in keybindings['street-or-back-street-last-stack-item']:\n  if self.view.tabbedEditor.clipboard.squares:\n    filenameOfOriginGraph,square = self.view.tabbedEditor.clipboard.squares.pop()\n    self.view.tabbedEditor.clipboard.update()\n    square.streets.append(Street(self.view.defaultStreetName,self.view.selection,square.squareId))#TODO look at file name of origin!\n    self.view.graph.stageSquare(square)\n    self.view.graph.applyChanges()\n    self.focus_position = len(self.streets) - 1\nelif key in keybindings['remove-street-or-incomming-street']:\n  try:\n    fcp = self.focus_position\n    street = self.streets[fcp]\n    square = copy.deepcopy(self.view.graph[street.origin])\n    #def imsurethereisacleanerwayofdoingthis(l):\n    def a(l):\n      if l == []: return []\n      i = l.pop()\n      if i.destination == street.destination and i.name == street.name: return l\n      else: return [i] + a(l)\n    square.streets = a(square.streets)\n    self.view.graph.stageSquare(square)\n    self.view.graph.applyChanges()\n  except IndexError:\n    pass\nelse:\n  return super(IncommingStreetsList,self).keypress(size,key)", []]
[96, "class StreetsList(StreetNavigator):", [["\\t", 97], ["\\t", 102]]]
[97, "#methods", [["", 98], ["", 100], ["", 105], ["", 107]]]
[98, "def __init__(self,view):", [["\\t", 99]]]
[99, "self.view = view\nsuper(StreetsList,self).__init__(view,'street_selected','right')", []]
