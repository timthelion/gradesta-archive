[0, "#!/usr/bin/python3\n# Module explorer helps you explore the modules that you have installed,\n# and read their help.", [["^#", 1], ["", 2], ["!^pycfg", 4]]]
[1, "License: GPL >= 3\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n   \n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n   \n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.", []]
[2, "#imports\nimport sys\nimport argparse\nimport readline\nimport os", []]
[4, "parse_cli_args\nparser = argparse.ArgumentParser(description=\"\"\"Explore installed python modules and read their help.\"\"\",formatter_class=argparse.RawTextHelpFormatter)\nargs = parser.parse_args()", [["; args|", 30]]]
[7, "eval_loop pwm\ncommand = input(\".\".join(pwm)+\"$ \")", [["command == \"exit\";", 8], ["command.startswith(\"cd \"); pwm command", 9], ["command.startswith(\"ls\"); pwm", 24], ["command.startswith(\"man \") or command.startswith(\"help \"); pwm command", 19], ["command.startswith(\"?\"); pwm command", 28], ["; pwm command", 23]]]
[8, "exit\nsys.exit()", []]
[9, "cd pwm command\nargs = command.split() ", [["len(args) != 2; pwm", 11], ["args[1] == \"..\"; pwm", 12], ["args[1] == \"/\"; []", 7], ["; pwm args[1]", 15]]]
[11, "cd_error pwm\nprint(\"cd takes one argument.\")", [["; pwm", 7]]]
[12, "up_one_module pwm\ntry:\n  new_pwm = pwm[:-1]\nexcept IndexError:\n  new_pwm = []", [["new_pwm == []; []", 7], [";new_pwm pwm", 26]]]
[15, "change_module pwm arg\nnew_pwm = pwm + arg.split(\".\")", [[";new_pwm pwm", 26]]]
[18, "ls_object current_object | pwm\n\nprint(\" \".join(eval(\"dir(current_object)\")))", [[";current_object | pwm", 7]]]
[19, "man pwm command\nargs = command.split()", [["len(args) != 2; pwm", 20], ["args[1] == \".\" or args[1] == \"./\"; pwm", 21], [";pwm args[1]", 22]]]
[20, "man_error pwm\nprint(\"man takes one argument. The object to be described.\")", [[";pwm", 7]]]
[21, "man_pwm current_object | pwm\nexec(\"help(current_object)\")", [[";current_object | pwm", 7]]]
[22, "man_object current_object | pwm object\neval(\"help(current_object.\"+object+\")\")", [[";current_object | pwm", 7]]]
[23, "command_not_found pwm command\nprint(\"Command not found.\")", [["; pwm", 7]]]
[24, "ls pwm", [["pwm == [];pwm", 25], ["; pwm", 18]]]
[25, "list_all_modules pwm\nhelp('modules')", [[";pwm", 7]]]
[26, "load_module new_pwm pwm\nimported_modules = []\nfor module in new_pwm:\n imported_modules.append(module)\n try:\n  exec(\"import \"+\".\".join(imported_modules))\n except ImportError:\n  break\ncurrent_object = eval(\".\".join(new_pwm))", [["except NameError; pwm", 7], [";current_object | new_pwm", 7]]]
[28, "man_q pwm command\ncommand = \"man \"+command[1:]", [[";pwm command", 19]]]
[30, "load_readline\nhistfile = os.path.join(os.path.expanduser(\"~\"), \".pyexplorer_history\")\ntry:\n    readline.read_history_file(histfile)\n    # default history len is -1 (infinite), which may grow unruly\n    readline.set_history_length(10000)\nexcept IOError:\n    pass", [[";[]", 7]]]
