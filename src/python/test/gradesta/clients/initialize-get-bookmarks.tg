[0, "#!/usr/bin/python3\n# This is a test client which asks for a bunch of client IDs", [["^#", 1], ["", 2], ["", 49], ["", 78], ["!^pycfg", 4]]]
[1, "License: AGPL >= 3\nCopyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.", []]
[2, "#imports\nimport sys\nimport argparse\nimport os\nimport zmq\nimport gradesta_pb2\nimport uuid", []]
[32, "bind_sockets args |\nzmq_context = zmq.Context()\nsock = zmq_context.socket(zmq.REQ)\npath = \"ipc://\"+os.path.join(os.getcwd(),\"manager.gradesock\")\nprint(path)\nsock.connect(path)\nprint(\"Connected to socket.\")", [["; sock", 119]]]
[4, "parse_cli_args\nparser = argparse.ArgumentParser(description=\"\"\"ask-for-ids asks for client ids from the manager\"\"\",formatter_class=argparse.RawTextHelpFormatter)\nargs = parser.parse_args()", [["; args|", 32]]]
[78, "#classes", []]
[49, "#functions", []]
[119, "init_client sock\nm = gradesta_pb2.ClientState()\nc = gradesta_pb2.Client()\nclient_id = str(uuid.uuid4())\nc.client_id = client_id\nc.name = \"Initialize and get bookmarks test client.\"\nc.client_status = gradesta_pb2.Client.INITIALIZING\nm.clients.extend([c])\nprint(\"Sending init message.\")\nsock.send(m.SerializeToString())\nr = gradesta_pb2.ClientState()\nprint(\"Waiting for response.\")\nr.ParseFromString(sock.recv())\nfor bookmark in r.service_state.bookmarks:\n print(bookmark.name + \": \"+bookmark.cell_id)\nm = gradesta_pb2.ClientState()\nc = gradesta_pb2.Client()\nc.client_id = client_id\nc.client_status = gradesta_pb2.Client.DISCONNECTING\nm.clients.extend([c])\nprint(\"Sending disconnect message.\")\nsock.send(m.SerializeToString())\nr = gradesta_pb2.ClientState()\nprint(\"Waiting for response.\")\nr.ParseFromString(sock.recv())", []]
