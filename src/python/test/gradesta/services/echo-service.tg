[0, "#!/usr/bin/python3\n# This is service which has no file backing.", [["^#", 1], ["", 2], ["", 49], ["", 78], ["!^pycfg", 4]]]
[1, "License: AGPL >= 3\nCopyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.", []]
[2, "#imports\nimport sys\nimport argparse\nimport os\nimport zmq\nimport gradesta_pb2\nimport subprocess\nimport copy", []]
[32, "bind_sockets args |\nzmq_context = zmq.Context()\nsock = zmq_context.socket(zmq.REP)\npath = \"ipc://\"+os.path.join(os.getcwd(),\"service.gradesock\")\nprint(path)\nsock.bind(path)", [["; sock |", 125]]]
[4, "parse_cli_args\nparser = argparse.ArgumentParser(description=\"\"\"echo-service a dumb service with no file back-end\"\"\",formatter_class=argparse.RawTextHelpFormatter)\nargs = parser.parse_args()", [["; args|", 124]]]
[130, "reply_to_manager sock rfs |\nsock.send(rfs.SerializeToString())", [["; sock |", 119]]]
[131, "set_reply_status rfs|\nrfs.set_outcome.ok = True", [[";rfs |", 130]]]
[129, "set_cell cells | cell\ncells[cell.id] = copy.deepcopy(cell)", [["; cells |", 127]]]
[78, "#classes", []]
[49, "#functions", []]
[119, "recv sock |\nm = sock.recv()\nrqs = gradesta_pb2.RequestToService()\nrqs.ParseFromString(m)\nrfs = gradesta_pb2.ReplyFromService()", [["; rfs rqs sock |", 126]]]
[124, "init_states\ncells = {}\nresources = {}", [["; cells resources |", 32]]]
[125, "launch_manager\nsubprocess.Popen([\"gradesta-manager\"])", [[";", 119]]]
[126, "handle_set_cells rqs |\nsi = iter(rqs.set.cells)", [["; rqs si |", 127]]]
[127, "next_cell si |\ncell = next(si)", [["; si | cell", 129], ["end;", 131]]]
