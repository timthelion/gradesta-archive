#!/usr/bin/python3
# This is service which has no file backing.
#License: AGPL >= 3 # □:1
#Copyright (c) 2017 Timothy Hobbs # □:1
# # □:1
#This file is part of Gradesta. # □:1
# # □:1
#Gradesta is free software: you can redistribute it and/or modify # □:1
#it under the terms of the GNU Affero General Public License as # □:1
#published by the Free Software Foundation, either version 3 of the # □:1
#License, or (at your option) any later version. # □:1
# # □:1
#This program is distributed in the hope that it will be useful, # □:1
#but WITHOUT ANY WARRANTY; without even the implied warranty of # □:1
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the # □:1
#GNU Affero General Public License for more details. # □:1
# # □:1
#You should have received a copy of the GNU Affero General Public License # □:1
#along with this program. If not, see <http://www.gnu.org/licenses/>. # □:1
#imports # □:2
import sys # □:2
import argparse # □:2
import os # □:2
import zmq # □:2
import gradesta_pb2 # □:2
import subprocess # □:2
import copy # □:2
#functions # □:49
#classes # □:78
#!/usr/bin/python3
#DO NOT EDIT
#This file was automatically generated from its textgraph source by pycfg.
def bind_sockets(__pycfg_bag__,*__pycfg_args__):
	return __py_cfg_call(32,__pycfg_bag__,*__pycfg_args__)
def __py_cfg_internal_function_bind_sockets(__pycfg_bag__,*__pycfg_args__):
	try:

		args = __pycfg_bag__.args

		__pycfg_bag__.__delattr__("args")
		zmq_context = zmq.Context() # □:32
		sock = zmq_context.socket(zmq.REP) # □:32
		path = "ipc://"+os.path.join(os.getcwd(),"service.gradesock") # □:32
		print(path) # □:32
		sock.bind(path) # □:32
		pass # □:32
	except Exception as e:
		raise e
	if True:

		__pycfg_bag__.sock = sock
		return 125,__pycfg_bag__,[]
	return None,None,None
def connect_to_manager_sock(__pycfg_bag__,*__pycfg_args__):
	return __py_cfg_call(128,__pycfg_bag__,*__pycfg_args__)
def __py_cfg_internal_function_connect_to_manager_sock(__pycfg_bag__,*__pycfg_args__):
	try:
		pass # □:128
		pass # □:128
	except Exception as e:
		raise e
	if True:

		return 127,__pycfg_bag__,[]
	return None,None,None
def parse_cli_args(__pycfg_bag__,*__pycfg_args__):
	return __py_cfg_call(0,__pycfg_bag__,*__pycfg_args__)
def __py_cfg_internal_function_parse_cli_args(__pycfg_bag__,*__pycfg_args__):
	try:
		parser = argparse.ArgumentParser(description="""echo-service a dumb service with no file back-end""",formatter_class=argparse.RawTextHelpFormatter) # □:0
		args = parser.parse_args() # □:0
		pass # □:0
	except Exception as e:
		raise e
	if True:

		__pycfg_bag__.args = args
		return 124,__pycfg_bag__,[]
	return None,None,None
def first_messages(__pycfg_bag__,*__pycfg_args__):
	return __py_cfg_call(119,__pycfg_bag__,*__pycfg_args__)
def __py_cfg_internal_function_first_messages(__pycfg_bag__,*__pycfg_args__):
	try:

		sock = __pycfg_bag__.sock

		__pycfg_bag__.__delattr__("sock")

		bookmarks = __pycfg_bag__.bookmarks

		__pycfg_bag__.__delattr__("bookmarks")
		sock.recv() # □:119
		m = gradesta_pb2.ServiceState() # □:119
		m.name = "echo-service" # □:119
		for name,dest in bookmarks.items(): # □:119
		 b = m.bookmarks[name] # Note: this makes no sense and python-protobufs sucks # □:119
		                       # what is happening here, is we are getting a # □:119
		                       # "default value" Bookmark object and then # □:119
		                       # editing because putting things into maps is # □:119
		                       # impossible. # □:119
		 b.cell_id = dest # □:119
		sock.send(m.SerializeToString()) # □:119
		pass # □:119
	except Exception as e:
		raise e
	if True:

		__pycfg_bag__.sock = sock
		__pycfg_bag__.bookmarks = bookmarks
		return 128,__pycfg_bag__,[]
	return None,None,None
def init_states(__pycfg_bag__,*__pycfg_args__):
	return __py_cfg_call(124,__pycfg_bag__,*__pycfg_args__)
def __py_cfg_internal_function_init_states(__pycfg_bag__,*__pycfg_args__):
	try:
		home_cell = gradesta_pb2.Cell() # □:124
		home_cell.text = "Hello world." # □:124
		cells = {"abc":home_cell} # □:124
		bookmarks = {"home":"abc"} # □:124
		pass # □:124
	except Exception as e:
		raise e
	if True:

		__pycfg_bag__.cells = cells
		__pycfg_bag__.bookmarks = bookmarks
		return 32,__pycfg_bag__,[]
	return None,None,None
def launch_manager(__pycfg_bag__,*__pycfg_args__):
	return __py_cfg_call(125,__pycfg_bag__,*__pycfg_args__)
def __py_cfg_internal_function_launch_manager(__pycfg_bag__,*__pycfg_args__):
	try:
		manager_process = subprocess.Popen(["gradesta-manager"]) # □:125
		pass # □:125
	except Exception as e:
		raise e
	if True:

		__pycfg_bag__.manager_process = manager_process
		return 119,__pycfg_bag__,[]
	return None,None,None
def shut_down_manager(__pycfg_bag__,*__pycfg_args__):
	return __py_cfg_call(126,__pycfg_bag__,*__pycfg_args__)
def __py_cfg_internal_function_shut_down_manager(__pycfg_bag__,*__pycfg_args__):
	try:

		manager_process = __pycfg_bag__.manager_process

		__pycfg_bag__.__delattr__("manager_process")
		input("Press enter to close manager.") # □:126
		manager_process.terminate() # □:126
		pass # □:126
	except Exception as e:
		raise e
	return None,None,None
def recv_loop(__pycfg_bag__,*__pycfg_args__):
	return __py_cfg_call(127,__pycfg_bag__,*__pycfg_args__)
def __py_cfg_internal_function_recv_loop(__pycfg_bag__,*__pycfg_args__):
	try:

		sock = __pycfg_bag__.sock

		__pycfg_bag__.__delattr__("sock")

		bookmarks = __pycfg_bag__.bookmarks

		__pycfg_bag__.__delattr__("bookmarks")

		cells = __pycfg_bag__.cells

		__pycfg_bag__.__delattr__("cells")
		m = gradesta_pb2.ServiceState() # □:127
		m.ParseFromString(sock.recv()) # □:127
		r = gradesta_pb2.ServiceState() # □:127
		for name,bookmark in m.bookmarks: # □:127
		 if bookmark.status == gradesta_pb2.Bookmark.NORMAL: # □:127
		  bookmarks[name] = bookmark.cell_id # □:127
		 elif bookmark.status == gradesta_pb2.Bookmark.DELETE: # □:127
		  del bookmarks[name] # □:127
		for cell_id,cell in m.cells: # □:127
		 if cell.runtime.status == gradesta_pb2.Cell.Runtime.NORMAL: # □:127
		  cells[cell_id] = cell # □:127
		 elif cell.runtime.status == gradesta_pb2.Cell.Runtime.DELETED: # □:127
		  del cells[cell_id] # □:127
		 elif cell.runtime.status == gradesta_pb2.Cell.Runtime.IN_VIEW: # □:127
		  r.cells[cell_id] = cells[cell_id] # □:127
		sock.send(r.SerializeToString()) # □:127
		pass # □:127
	except Exception as e:
		raise e
	if True:

		__pycfg_bag__.sock = sock
		__pycfg_bag__.bookmarks = bookmarks
		__pycfg_bag__.cells = cells
		return 127,__pycfg_bag__,[]
	if True:

		return 126,__pycfg_bag__,[]
	return None,None,None
__pycfg_squares__ = {32:__py_cfg_internal_function_bind_sockets,128:__py_cfg_internal_function_connect_to_manager_sock,0:__py_cfg_internal_function_parse_cli_args,119:__py_cfg_internal_function_first_messages,124:__py_cfg_internal_function_init_states,125:__py_cfg_internal_function_launch_manager,126:__py_cfg_internal_function_shut_down_manager,127:__py_cfg_internal_function_recv_loop}
def __pycfg_call__(__pycfg_square__,__pycfg_bag__,*args):
	__pycfg_hand__ = list(args)
	while __pycfg_square__ is not None:
		__pycfg_square__,__pycfg_bag__,__pycfg_hand__ = __pycfg_squares__[__pycfg_square__](__pycfg_bag__,*__pycfg_hand__)
	return __pycfg_hand__
import types
__pycfg_call__(0,types.SimpleNamespace(),[])

