[0, "syntax         =          \"proto3\"            ;\npackage                    gradesta           ;", [["#", 1], ["#", 2], ["#", 37], ["", 3], ["", 4], ["#", 6], ["", 5], ["#", 7], ["#", 8], ["#", 9], ["#", 36], ["#", 10], ["", 11], ["", 12], ["#", 13], ["", 14], ["", 15], ["", 16], ["#", 17], ["#", 19], ["", 20], ["", 21], ["#", 22], ["#", 23], ["", 24], ["#", 25], ["#", 26], ["", 27], ["#", 28], ["", 29], ["#", 30], ["", 31], ["#", 32], ["", 33], ["#", 34], ["#", 35]]]
[1, "Copyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute\nit and/or modify it under the terms of the GNU\nAffero General Public License as published by\nthe Free Software Foundation, either version 3\nof the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it\nwill be useful, but WITHOUT ANY WARRANTY;\nwithout even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE.  See the GNU Affero General Public\nLicense for more details.\n\nYou should have received a copy of the GNU\nAffero General Public License along with this\nprogram. If not, see\n<http://www.gnu.org/licenses/>.", []]
[2, "What is a Gradesta graph? (Basic structure)\nThis protocol is designed to allow you to\neasilly create services who's user inteface is\nexpressed as an interactive directed graph.\n\nThe name Gradesta stands for graph of stacks.\n\nThe basic principle is that a Gradesta graph is\na collection of cells, each with up to four\nlinks to other cells. One of those links is the\n\"next in stack link\", the second is the \n\"previous in stack link\". The third is the \n\"east edge link\". The fourth the \"west edge\nlink\".\n\nThe stack links allow you to build a doubly  \nlinked list of cells. You can only stack link  \nto an cell which has not been stack linked  \npreviously. And the next and previous stack  \nlinks must match up to create a linear  \nstructure without loops.\n\nThe edge links can link to any cell including\nitself. West and east edge links of respective\ncells must corespond. If a cell A's east edge\nlink links to cell B, then cell B's west edge\nlink MUST link to cell A.\n\nThis is a stack:\n\n\u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\n\u2502Bar \u2502\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nFoo next-links to Bar.\nBar prev-links to Foo.\nBar next-links to Baz.\nBaz prev-links to Bar.\n\nEach cell may also have an edge link.\n\n\u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol \u2502\n\u2502Bar \u2502    \u2514\u2500\u2500\u2500\u2500\u2518\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, Foo has an east edge link to Lol.\nLol also has a west edge link to Foo.\n\nEach cell can only have one east edge link\ncomming out of it and one west edge link\ngoing into it.\n\nHowever, multiple inlinks can be emulated\nby using the stack to emulate ports.\n\n\u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol   \u2502\n\u2502Bar \u2502\u2500\u2500\u2500\u25b8\u2502Port 1\u2502 \n\u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, both Foo and Bar, have edge links to Lol.\n\nIt is possible for an cell to edge link to itself.\n\n  \u250c\u2500\u2500\u2500\u2500\u2510\n  \u2502Foo \u2502\n  \u2502Bar \u2502\n\u250c\u25b8\u2502Baz \u2502\u2500\u2510\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nHere, Baz links to itself.\n\nOther types of loops are also allowed:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2514\u25b8\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol   \u2502\u2500\u2518\n  \u2502Bar \u2502\u2500\u2500\u2500\u25b8\u2502Port 1\u2502\n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nThere is no maximum size limit for Gradesta\ngraphs, and a procedurally generated Gradesta \ngraph often is infinite in size.\n\nIt is possible to have an infinite number of \ncells, and even the stacks can be loaded lazily\nso as to allow for infinite stacks.\n\nThere are no edge labels.\nThere is also no concept of a port.\nBoth of these concepts can be emulated,\nhowever.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502edge_label   \u2502\u2500\u2500\u2500\u25b8\u2502another_vertex \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can imagine the first cell in the\nstack as being the vertex label, and the\nsecond cell as being the edge label.\n\nYou can also designate a region of the stack\nto act as a collection of incomming ports.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u2502another_vertex \u2502\n\u2502edge_label   \u2502\u2500\u2500\u2500\u25b8\u2502in_port        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can also combine both concepts.\n\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502vertex_1    \u2502    \u2502vertex_2   \u2502\n\u250c\u25b8\u2502in_port_1   \u2502  \u250c\u25b8\u2502in_port    \u2502\n\u2502 \u2502in_port_2   \u2502  \u2502 \u2502edge_label \u2502\u2500\u2510\n\u2502 \u2502edge_label  \u2502\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nIn the above example, vertex_1 has\nan edge which links to vertex_2's first in\nport. And vertex_2 has an edge which links\nto vertex_1's in_port_1.\nvertex_1's in_port_2 is unconnected.", [["", 5], ["", 3], ["", 4], ["", 6]]]
[3, "message   Cell                                {\n          string      id                 = 1;\n          string      text               = 2;\n          string      type               = 3;\n          string      tags               = 4;\n          int64       generation         = 5;\n          bool        editable           = 6;\n          Identifier  eastedge           = 7;\n          Identifier  westedge           = 8;\n          string      stack_next         = 9;\n          string      stack_prev         =10; }", [["#", 5]]]
[4, "message   Resource                            {\n          string      cell_id            = 1;\n          string      path               = 2;\n          bytes       data               = 3; }", []]
[5, "message   Identifier                          {\n          string      protocol           = 1;\n          string      path               = 2;\n          string      cell_id            = 3; }", []]
[6, "Identifiers: Linking to other graphs\n\nAs stated in the section on graph structure,\neach cell has stack links and edge links.\nStack links always point to another cell within\nthe current graph, but edge links may point\nto a location outside of the current graph.\n\nThese outside locations are described using an\nIdentifier struct.\n\nIdentifiers may point either to cells in the\ncurrent graph or cells in an external graph.\nIdentifiers have the following attributes:\n\nprotocol: The protocol specifies the program\nwhich is to be used to interpret the link. This\nis the name of an executable which exists in \n$GRADESTA_PROTOCOLS_PATH. In order to specify\nthe current protocol, `.` is used.\n\npath: Is a protocol specific path to a given\nresource. In order to specify the current\nresource, `.` is used.\n\ncell_id: The id of the cell being linked to.\n", [[" ", 5]]]
[7, "What is the architecture of the Gradesta protocol?\n\nGradesta uses a client service architecture.\nThe service provides a gradesta graph which\ncan represent a graph based user interface,\na document, a view into a file system or database,\nor an interactive graph based virtual world.\nThis graph can be interacted with using a gradesta\nclient. Clients play the role of user interfaces\nnot unlike web browsers and are used to interact with the\ngraph. Clients can also be automatic scripts which interact with\nthe graph on their own. \n\nThe protocol allows the service to accept or reject\ninteractions, and therefore, it is\neasy for the service to create new rules\nabout which graphs are acceptable and which\nones are not. For example, if you wanted to\nadd the rule that a stack could only have two in ports,\n you could do so, by rejecting all changes to the graph which\nviolated that rule. Through clever service\nconstruction, one can model almost\nany kind of graph like user interface or\ndocument.\n\nThe protocol is designed with the goal of\nmaking it as easy as possible to create new\nservices which provide interactive graphs.\nThis at the expense of making it harder to\ndevelop clients for interacting with those\ngraphs.\n\nHowever, creating clients is not complex\neither.\n\nThe protocol is intended for use on the\nlocal system via unix sockets and the\nZeroMQ message passing system.\n\nFuture, network based, aditions to this\narchitecture are envisioned, but not yet\nprecisely planned.\n\nEach graph service launches as a normal\n*nix process. It then creates a directory\n$PWD/<service-name>/internal-path/\n\nAs an example, the \"foo\" service might\ncreate a socket at\n$PWD/foo/bar/service.sock\nThis is a \u00d8MQ request/reply socket.\n\nOnce service.sock has been created, the\nservice launches a \"manager\" which does\nthe heavy lifting of interacting with\nclients and performing resource tracking.\nThe manager is launched by calling the\nexecutable 'gradesta-manager' and passing\nthe path $PWD/foo/bar/ as the only argument.\n\nThe gradesta-manager then creates its own\nsocket:\n$PWD/foo/bar/manager.sock\nThis is also a \u00d8MQ request/reply socket.\nIt also creates an update socket\n$PWD/foo/bar/manager-update.sock\nwhich is a pub/sub socket.\n\nThe manager socket acts as a go between\nbetween the clients and the service.\nThe service, rather than having to keep\ntrack of \"n\" clients, typically only has\nto keep track of one manager.\n\nWhen a client wants to connect to a service\nit first connects to manager.sock and\nrequests a unique id.\nIt then creates two sockets at.\n$PWD/foo/bar/clients/<id>/update.sock\nand\n$PWD/foo/bar/clients/<id>/cursor.sock\n\nupdate.sock is a pub/sub socket to which the\nclient is the subscriber and to which the\nmanager publishes relevant changes which\nare made to the graph. This won't be all\nchanges, but rather, only changes that are\nin view on the client side. The manager\ntracks what is in view internally through\na subscription system.\n\ncursor.sock is a pub/sub socket to which the\nclient is the publisher. It publishes the\ncurrently selected vertext in the graph.\nAny process on the system can now subscribe\nto this socket and stay in sync with the\nclient's view.", []]
[8, "How does the Gradesta protocol relate to RDF?\n\nRDF is a format for describing graphs. These\ngraphs are very simple and textual, just\nlike Gradesta graphs. However, the goals are\nquite different. RDF's goal is to collect\nfacts into a \"logic database\" and to be able\nto answer questions about data in a user\nfriendly manner. It also tries to allow the\ncomputer to create data visualizations. In\nmany ways, RDF is like prolog for people who\nlike comitees. It is standardized by the\nW3C.\n\nThe Gradesta protocol could be used to serve\nRDF graphs, and indeed that would be a good\nfit. Both ecosystems are text centric and\nintended to present their data to users as\nwell as allow users to edit and enter new\ndata.\n\nHowever, Gradesta applications are broader\nin scope than RDF. You can create a visual\nprogramming language that uses Gradesta as\nits front end, or a mind mapping program, or\na menu based email client, or a menu based\nwiki, or a menu based CAD program ect.", []]
[9, "What is the difference between Gradesta and graph databases such as neo4j?\n\nLike RDF, graph databases focus on their\nability to algorithmically answer\nquestions/queries about data. Unlike RDF,\nhowever, graph databases go beyond basic\ntextual fact like data. Any kind of data can\nbe stored in a graph database. This makes it\nless likely that the Gradesta would be\nconnected to an enterprise graph database.\nGradesta clients may not have the capability\nto display and edit the richer data-sets\nwhich are stored in graph databases.\nTherefore, it is more likely that graph\ndatabases will require their own custom\nfront ends to access and enter data to\naccess and enter data.", []]
[10, "Starting up\n\nWhen a service starts up it launches\ngradesta-manager. This does not require any\n\u00d8MQ/protobuf communication. However, when a\nclient starts up, it will request from the\nmanager a unique ID.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service        \u2502 Manager    \u2502 Client     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Starts up       \u2502            \u2502            \u2502\n\u2502launches manager\u2502            \u2502            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502starts up   \u2502            \u2502\n\u2502                \u2502creates     \u2502            \u2502\n\u2502                \u2502manager.sock\u2502            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502            \u2502\u2190 REQ via   \u2502\n\u2502                \u2502            \u2502manager.sock\u2502\n\u2502                \u2502            \u2502RequestId   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502 REPLY via \u2192\u2502            \u2502\n\u2502                \u2502manager.sock\u2502            \u2502\n\u2502                \u2502ClientId    \u2502            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502            \u2502creates     \u2502\n\u2502                \u2502            \u2502sockets:    \u2502\n\u2502                \u2502            \u2502update.sock \u2502\n\u2502                \u2502            \u2502cursor.sock \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nNote that the service doesn't actually have\nany work to do when it comes to registering\nnew clients. That is handled by the manager\nin full.", [["", 11], ["", 12]]]
[11, "message   RequestId                           {\n          string        prefix           = 1; }", []]
[12, "message   ClientId                            {\n          string        client_id        = 1; }", []]
[13, "Getting cells\n\nA client can request a Neighborhood of cells\nby contacting the manager via manager.sock.\nA neighborhood is a region of a graph which\nis bounded by a maximum number of steps from\na given cell.\n\nThe manager forwards the requested\nneighborhood to the service which then\nreturns all cells which fall within it's\nbounds.\n\nThe manager records which neighborhoods have\nbeen requested by which clients, and, upon\nreceiving updates from the service, only\nforwards those changes to the clients for\nwhom the changes are relevant. For this\nreason, the NeighborhoodSubscription request\ncontains the client's ID.\n\nResources that belong to cells are\nforwarded after the fact in order to reduce\nround trip time for delivering the actual\ncells.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.sock   \u2502\n\u2502             \u2502   NeighborhoodSubscription \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.sock\u2502               \u2502\n\u2502             \u2502Neighborhood\u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.sock \u2502            \u2502               \u2502\n\u2502RequestedNeighborhood     \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.sock\u2502               \u2502\n\u2502             \u2502RequestedNeighborhood       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REQ via    \u2192 \u2502            \u2502               \u2502\n\u2502manager.sock \u2502            \u2502               \u2502\n\u2502Set          \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 PUB   via \u2192\u2502               \u2502\n\u2502             \u2502update.sock \u2502               \u2502\n\u2502             \u2502Set         \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502\u2190 REPLY via \u2502               \u2502\n\u2502             \u2502manager.sock\u2502               \u2502\n\u2502             \u2502NULL        \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 38], ["", 14], ["", 16], ["", 15], ["", 20]]]
[14, "message   Neighborhood                        {\n          string        center_cell      = 1;\n          int64         max_distance     = 2;\n          int32         directions       = 3;\n          int64         center_stack     = 4;\n          int64         total_max_size   = 5; }", []]
[15, "message   NeighborhoodSubscription            {\n          string        client_id        = 1;\n          Neighborhood  neighborhood     = 2; }", [["#", 14]]]
[16, "message   RequestedNeighborhood               {\n          bool          ok               = 1;\n          string        error            = 2;\nrepeated  Cell          cells            = 3; }", [["#", 3]]]
[17, "Managing neighborhood subscriptions\n\nNeighborhood subscriptions are managed on a\nper cell basis. When you want to change the\nsize of the neighborhood being subscribed\nto, you simply send the subscription again\nwith a new size. If you wish to unsubscribe\nfrom a neighborhood, you subscribe with a\nsize of zero in all perameters.\n\nSo internally, unsubscribing looks like\nthis:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.sock   \u2502\n\u2502             \u2502    NeighborhoodSubscription\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.sock\u2502               \u2502\n\u2502             \u2502NULL        \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.sock\u2502               \u2502\n\u2502             \u2502Neighborhood\u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.sock \u2502            \u2502               \u2502\n\u2502RequestedNeighborhood     \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 15]]]
[19, "Setting cells client side\n\nThe client can set the text values and the\nlinks of cells and resources by contacting\nthe manager. Multiple cells and resources\ncan be set at the same time.\n\nThe manager will automatically notify\nclients to whom the changes are relevant.\n\nCreating new cells is also done through the\nset command. It is the clients\nresponsibility to make sure that new cells\nhave unique IDs. The ID should be\nconstructed in the form\n\"<client-id>-<iso-8601-timestamp:\n2017-06-12T22:19:39+00:00>-<differentiator>\"\nWhere the timestamp refers to the current\ntime and the differentiator is a number and\nis only used when creating multiple cells at\nthe same time (within the same second).\n\nSet can also be used to re-order stacks.\nWhen setting a cell's prev link, the next\nlink of the newly linked cell will be\nautomatically set by the manager and\nwhatever was linked previously will be\ndissconnected. The same applies when setting\nnext links and edge links. This ensures that\nstacks and edges remain doubly linked lists.\n\nEach cell has a generation count. This\nnumber represents the number of times\nthe cell has been modified. Each time a cell\nis set, the client must increment the generation\ncount. If the service receives a cell who's\ngeneration count is less than or equal to\nthe current generation count, the change\nis rejected. The reason for the generation\ncount is to ensure, that when two clients are\nmodifying the graph at the same time, their\nchanges are applied only if using up to date\ncell data.\n\nThe service/manager will respond to the Set\ncommand with a SetOutcome. The SetOutcome\nobject has the following properties:\n\nok: A flag which tells the client if\nthe Set was successfull.\n\nerror: A string where any errors are described.\n\nchanges: If cells or resources that are set\ndiffer from the exact contents sent by the client,\nthe service will pass these differing values back.\nFor example, the client may have an autoformater\nwhich changes the format of text sent to it.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.sock   \u2502\n\u2502             \u2502            \u2502Set            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.sock\u2502               \u2502\n\u2502             \u2502Set         \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.sock \u2502            \u2502               \u2502\n\u2502SetOutcome   \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.sock\u2502               \u2502\n\u2502             \u2502SetOutcome  \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 PUB   via \u2192\u2502               \u2502\n\u2502             \u2502update.sock \u2502               \u2502\n\u2502             \u2502Set         \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n", [["", 20], ["", 21]]]
[20, "message   Set                                 {\nrepeated  Cell          cells            = 1;\nrepeated  Resource      resources        = 2; }", [["#", 3], ["#", 4]]]
[21, "message   SetOutcome                          {\n          bool          ok               = 1;\n          string        error            = 2;\n          Set           changes          = 3; }", [["", 20]]]
[22, "Setting cells service side\n\nService side, cells and resources can\nalso be set/updated and their changes\npropogated to clients automatically,\nby the manager.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502PUB   via \u2192  \u2502            \u2502               \u2502\n\u2502manager-update.sock       \u2502               \u2502\n\u2502Set          \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 PUB   via \u2192\u2502               \u2502\n\u2502             \u2502update.sock \u2502               \u2502\n\u2502             \u2502Set         \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", []]
[23, "Interacting with cells\n\nCells can have events associated with them\nwhich are sent from the client. These events\nare defined in the definition of the cell's\ntype. For example, \"text/plain\" cells have\n\"clicked 1\", \"clicked 2\" and \"clicked 3\"\nevents. The service can either ignore an\nevent or respond to it however it likes.\n\nThere is a data feild associated with events\nwhich in most cases will be empty, but\nform-like cell types may have submition\nevents which would take advantage of this\ndata feild.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.sock   \u2502\n\u2502             \u2502            \u2502Event          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.sock\u2502               \u2502\n\u2502             \u2502Event       \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.sock \u2502            \u2502               \u2502\n\u2502SetOutcome   \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.sock\u2502               \u2502\n\u2502             \u2502SetOutcome  \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 PUB   via \u2192\u2502               \u2502\n\u2502             \u2502update.sock \u2502               \u2502\n\u2502             \u2502Set         \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nAs you can see, triggering an event is very\nmuch the same pattern as setting the value\nof a cell or resource. The event is\ntriggered and any resulting changes in the\ngraph are propagated back to the clients.", []]
[24, "message   Event                               {\n          string      cell                = 1;\n          int64       type                = 2;\n          bytes       data                = 3;}", []]
[25, "Cursors\n\nClients publish which cell is currently\nfocused. This can be usefull for keepting\ntwo clients view in sync. It is also very\nuseful to be able to have a step through\ndebugger which publishes where it is at, and\nthen have your graph editor follow the\ndebugger so that you can see where you are\nin the code.\n\nA client may follow another client.\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2193 SUB via      \u2502\n\u2502             \u2502            \u2502cursor.sock    \u2502\n\u2502             \u2502            \u2502Identifier     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nOr the service could follow a client.\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502\u2193 SUB via    \u2502            \u2502               \u2502\n\u2502cursor.sock  \u2502            \u2502               \u2502\n\u2502Identifier   \u2502            \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 5]]]
[26, "manager.sock REQ container type", []]
[27, "message   RequestToManager                    {\nrepeated  RequestId   request_id         = 1;\nrepeated  ClientId    origin             = 2;\nrepeated  NeighborhoodSubscription subscription\n                                         = 3;\n          Set         set                = 4;\n          Set         set_service_side   = 5;\nrepeated  Event       event              = 6; }", [["#", 11], ["#", 15], ["#", 20], ["#", 24]]]
[28, "manager.sock REPLY container type", []]
[29, "message   ReplyFromManager                    {\nrepeated  ClientId     assigned_id       = 1;\nrepeated  RequestedNeighborhood\n                 requested_neighborhood  = 2;\n          SetOutcome  set_outcome        = 3; }", [["#", 12], ["#", 16], ["#", 21]]]
[30, "service.sock REQ container type", []]
[31, "message   RequestToService                    {\nrepeated  Neighborhood subscribe         = 1;\n          Set          set               = 2;\nrepeated  Event        event             = 3; }", [["#", 14], ["#", 20], ["#", 24]]]
[32, "service.sock REPLY container type", []]
[33, "message   ReplyFromService                    {\nrepeated  RequestedNeighborhood\n                 requested_neighborhood  = 1;\n          SetOutcome  set_outcome        = 2; }", [["#", 16], ["#", 21]]]
[34, "Transactions and other goodies\n\nYou may have noticed that right now, the\nmanager is managing subscriptions and\nrouting changes to the clients that need\nthem. The astute reader will have wondered\nwhether this actually makes sense. Afterall,\nthe client can figure out what it needs and\nignore messages that are irrelevant to it.\nYou may even wonder whether the middle man\nmanager is making performance better or\nworse through this routing. The answer is,\nthat it is probably making it worse.\n\nThe reason for the manager is not\nperformance but rather simplicity and future\nproofing. If the protocol was developed\nwithout a manager from the get go, it would\nbe impossible to implement transactions\nlater on, and transactionality may become a\nnecessary feature in the future.\n", []]
[35, "Closing remarks\n\n  Have fun! Go VEGAN! And fuck capitalism!\n\nMany people, upon hearing the phrase, \"fuck\ncapitalism\" think of communism. Soviet\nCommunism to be precise. But in communist\nRussia they still used money, and if you're\ntrying to fuck capitalism, and you're still\nusing money, than you're not doing it right.\n\nYou fuck capitalism by buying less shit\nyou don't need. By making things yourself.\nBy growing your own food. By making/doing\nthings for others for free. By cooperating\nwith others to do things in a mutually\nbeneficial fashion without the use of money.\nBy squating abandoned buildings, by eating\nfrom the dumptser.\n\nMy vision for a new society:\n\nWithin capitalism, it is very hard to trust\npeople. You never know if someone is being\nhonest, or if they are trying to sell you\nsomething. True friendship exists only in a\nnon-comercial context and the best things\nin life are anarchy already.\n\nIf a few people fuck capitalism, then they\ncan be friends, real friends, true friends.\nAnd they can enjoy eachothers company and\nmake some free stuff that everyone can\nenjoy. That's a good thing.\n\nIf more people fuck capitalism, then that's\neven better.\n\nAnd if everyone fucks capitalism, then we\ncan all walk around in toe shoes playing\nfrisbee on abandoned superhighways, eating\nfree VEGAN pizza baked by the fully\nautomated GNU Pizamaker, and we can smile at\neachother in the sunshine, knowing that\nwe're all friends and no one's trying to\nsell shit or take over.\n\nIT ALWAYS MAKES SENSE TO FUCK CAPITALISM!", []]
[36, "What about Ted Nelson's ZigZag\u00ae \n\nGradesta shares the same goals as, and a very\nsimilar achitecture to, the gzz project and more\ngenerally, Ted Nelson's patented zzstructure.\nhttp://www.nongnu.org/gzz/index.html\n\nThe data structure behind gradesta, being a graph\nof stacks, is similar, but not the same as,\nzzstructure.\n\nThe gzz, and ZigZag projects were destroyed by\na combination of poor team culture, patents,\nand trademarks. While I beleive that the\nprogrammers who worked on the project origionally\nwere incredibly skilled and wrote quality code,\nI decided to create gradesta from scratch, in\npart to distance myself from the hard feelings\nof the past (though the patent is now expired).\n\nThe second reason for starting from scratch\nis that gzz was too ambitious. It included\nversion control as a core feature, where-as\ngradesta wishes to leave version control as\na 3rd party utility.\n\nFurthermore, I personally found the multi-\ndimensionality of zzstructures to be disorienting.\nThey reminded me of the following quote from\nEnders Game:\n\n\"He found that a great deal of what he learned at\nBattle School transferred to the simulator. He would\nroutinely reorient the simulator every few minutes,\nrotating it so that he didn't get trapped into an up-down\norientation, constantly reviewing his positoon from\nthe enemy point of view. It was exhilarating at last to\nhave such control over the battle, to be able to see \nevery point of it.\"\n\nI tried doing this with Age of Mythology after reading\nthat passage. It didn't help my tactics. It just left\nme feeling stupid and confused. I had the same feeling\nwith gzz.\n\nI'd much rather have a canonical representation in which\nat least one of the dimensions never changes. As a user,\nI need something to hold on to. Even if its totally\narbitrary. I need know that the enimies gate is down.", []]
[37, "Cells and their metadata\n\nCells are composed of following parts:\n\n1) A string called \"type\", which roughly \ncorrelates to a MIME type. Currently, the only\nallowed type is text/plain.\n\n2) A string called \"text\", which should be the \nhuman readable contents of the cell.\n\n3) A collection of resources, which can be \nidentified by their \"path\" strings. These \nresources each have an array of bytes called \n\"data\". Resources are used for storing non \ntext-data in Gradesta. For example, if the \ncell's type is \"text/markdown\" and the cell's \ntext is a markdown document containing an \nimage. Then the cell may have a resource \nassociated with it which contains the image's \npath and data.\n\n4) A string called \"tags\" which may be used\nas a criteria for filtering the graph.\n\n5) A generation count. This number reprensents\nthe number of times the cell has been modified\nin the current session (or globally if serialized\nby the service). This is updated by the client\neach time it requests a change, and is used to\nensure that there is no data loss when multiple\nclients edit the same cell at the same time.", [["", 3], ["", 4]]]
[38, "The neighborhood object describes a way of selecting\na group of cells which neighbor a given cell.\nNeighborhoods have the following properties:\n\n\ncenter_cell:     Id of the cell at the center of the\n                 neighborhood.\n\nmax_distance:    Maximum number of edges away from the\n                 center cell at which neighboring cells\n                 are considered to be within the neighborhood.\n\ndirections:      This is a binary flag store which records\n                 the initial directions in which the\n                 neighborhood expands from the center. These are:\n\n                 0b0001 NORTH   Upwards  in the stack\n                 0b0010 EAST    Outwards on the eastern edge\n                 0b0100 SOUTH   Downards in the stack\n                 0b1000 WEST    Outwards on the western edge\n\ncenter_stack:    Distance from the center cell to go up and down\n                 within the center stack. If this is less than\n                 max_distance, it has no effect, however, if it is\n                 greater than max_distance, than the center stack\n                 may be larger than the max_distance would typically\n                 allow.\n\ntotal_max_size:  Maximum number of cells allowed in the neighborhood.", [["", 14]]]
