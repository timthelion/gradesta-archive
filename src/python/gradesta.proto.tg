[0, "syntax         =          \"proto2\"            ;\npackage                    gradesta           ;", [["#", 1], ["#", 2], ["#", 7], ["#", 39], ["#", 67], ["", 42], ["#", 66], ["", 43], ["#", 37], ["", 3], ["#", 19], ["#", 13], ["#", 6], ["", 5], ["#", 51], ["#", 81], ["#", 44], ["", 45], ["#", 48], ["#", 49], ["#", 65], ["", 46], ["#", 38], ["", 47], ["#", 17], ["#", 64], ["#", 82], ["#", 83], ["#", 80], ["#", 8], ["#", 36], ["#", 9], ["#", 35]]]
[1, "Copyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute\nit and/or modify it under the terms of the GNU\nAffero General Public License as published by\nthe Free Software Foundation, either version 3\nof the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it\nwill be useful, but WITHOUT ANY WARRANTY;\nwithout even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE.  See the GNU Affero General Public\nLicense for more details.\n\nYou should have received a copy of the GNU\nAffero General Public License along with this\nprogram. If not, see\n<http://www.gnu.org/licenses/>.", []]
[2, "What is a Gradesta graph? (Basic structure)\nThis protocol is designed to allow you to\neasilly create services who's user inteface is\nexpressed as an interactive directed graph.\n\nThe name Gradesta stands for graph of stacks.\n\nThe basic principle is that a Gradesta graph is\na collection of cells, each with up to four\nlinks to other cells. One of those links is the\n\"next in stack link\", the second is the \n\"previous in stack link\". The third is the \n\"east edge link\". The fourth the \"west edge\nlink\".\n\nThe stack links allow you to build a doubly  \nlinked list of cells. You can only stack link  \nto an cell which has not been stack linked  \npreviously. And the next and previous stack  \nlinks must match up to create a linear  \nstructure without loops.\n\nThe edge links can link to any cell including\nitself. West and east edge links of respective\ncells must corespond. If a cell A's east edge\nlink links to cell B, then cell B's west edge\nlink MUST link to cell A.\n\nThis is a stack:\n\n\u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\n\u2502Bar \u2502\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nFoo next-links to Bar.\nBar prev-links to Foo.\nBar next-links to Baz.\nBaz prev-links to Bar.\n\nEach cell may also have an edge link.\n\n\u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol \u2502\n\u2502Bar \u2502    \u2514\u2500\u2500\u2500\u2500\u2518\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, Foo has an east edge link to Lol.\nLol also has a west edge link to Foo.\n\nEach cell can only have one east edge link\ncomming out of it and one west edge link\ngoing into it.\n\nHowever, multiple inlinks can be emulated\nby using the stack to emulate ports.\n\n\u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol   \u2502\n\u2502Bar \u2502\u2500\u2500\u2500\u25b8\u2502Port 1\u2502 \n\u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, both Foo and Bar, have edge links to Lol.\n\nIt is possible for an cell to edge link to itself.\n\n  \u250c\u2500\u2500\u2500\u2500\u2510\n  \u2502Foo \u2502\n  \u2502Bar \u2502\n\u250c\u25b8\u2502Baz \u2502\u2500\u2510\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nHere, Baz links to itself.\n\nOther types of loops are also allowed:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2514\u25b8\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol   \u2502\u2500\u2518\n  \u2502Bar \u2502\u2500\u2500\u2500\u25b8\u2502Port 1\u2502\n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nThere is no maximum size limit for Gradesta\ngraphs, and a procedurally generated Gradesta \ngraph often is infinite in size.\n\nIt is possible to have an infinite number of \ncells, and even the stacks can be loaded lazily\nso as to allow for infinite stacks.\n\nThere are no edge labels.\nThere is also no concept of a port.\nBoth of these concepts can be emulated,\nhowever.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502edge_label   \u2502\u2500\u2500\u2500\u25b8\u2502another_vertex \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can imagine the first cell in the\nstack as being the vertex label, and the\nsecond cell as being the edge label.\n\nYou can also designate a region of the stack\nto act as a collection of incomming ports.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u2502another_vertex \u2502\n\u2502edge_label   \u2502\u2500\u2500\u2500\u25b8\u2502in_port        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can also combine both concepts.\n\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502vertex_1    \u2502    \u2502vertex_2   \u2502\n\u250c\u25b8\u2502in_port_1   \u2502  \u250c\u25b8\u2502in_port    \u2502\n\u2502 \u2502in_port_2   \u2502  \u2502 \u2502edge_label \u2502\u2500\u2510\n\u2502 \u2502edge_label  \u2502\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nIn the above example, vertex_1 has\nan edge which links to vertex_2's first in\nport. And vertex_2 has an edge which links\nto vertex_1's in_port_1.\nvertex_1's in_port_2 is unconnected.", [["", 6]]]
[3, "message Cell {\n required string     cell_id     =  1;\n optional string     text        =  2;\n optional string     tags        =  3;\n\n optional string     up          =  4;\n optional string     down        =  5;\n optional Link       left        =  6;\n optional Link       right       =  7;\n\n message Runtime {\n  optional bool       editable    =  1; \n\n  optional int64      edit_count  =  2;\n  optional int64      click_count =  3;\n  enum CellState {\n   NORMAL       = 0;\n   DELETED      = 1;\n   IN_VIEW      = 2;\n   OUT_OF_VIEW  = 3;\n   NON_EXISTANT = 4;\n   EDIT_FAILED  = 5;\n  }\n  optional CellState  cell_state  =  4;\n  optional string     edit_error  =  5; \n }\n optional Runtime runtime = 8;\n}", [["#", 5]]]
[5, "message Link {\n required string service = 1;\n required string path    = 2;\n required string cell_id = 3;\n}", []]
[6, "Links\nAs stated in the section on graph structure,\neach cell has stack links and edge links.\nStack links always point to another cell within\nthe current graph, but east-west edge links may\npoint to a location outside of the current\ngraph.\n\nThese outside locations are described using the\nLink message struct.\n\nLinks have the following attributes:\n\nservice: The protocol specifies the type of\nservice used to resolve the link.  This is an\nIPFS path of the full form, that is '/ipfs/hash..'.\nIn order to specify, that the link is local to\nthe current service, '.' should be used.\n\nThe destination of this IPFS path is of no\nimport. It is simply used as a unique\nidentifier. However, authors of new services\nwill find it usefull to use the hash of a\nsimple README file or perhaps a collection of\nREADMEs and GPG keys.\n\nIt is the repsonsibility of distribution\nmaintainers to ensure that services are\nsuccessfully installed and registered.\nFor more information about registering\nservices, see \"Resolving service names\"\nbelow.\n\npath: Is a protocol specific path to a given\ngraph. In order to specify that the link points\nto the current graph, `.` is used. The path may\nnot include newlines or the sequences '/./' and\n'/../'.\n\ncell_id: The id of the cell being linked to.\n", [[" ", 5], ["", 51], ["", 81]]]
[7, "What is the architecture of the Gradesta protocol?\n\nGradesta uses a client service architecture.\nThe service provides a gradesta graph which\ncan represent a graph based user interface,\na document, a view into a file system or database,\nor an interactive graph based virtual world.\nThis graph can be interacted with using a gradesta\nclient. Clients play the role of user interfaces\nnot unlike web browsers do for the web. Clients\ncan also be automatic scripts which interact with\nthe graph on their own. \n\nThe protocol allows the service to accept or reject\ninteractions, and therefore, it is\neasy for the service to create new rules\nabout which graphs are acceptable and which\nones are not. For example, if you wanted to\nadd the rule that a stack could only have two in ports,\n you could do so by rejecting all changes to the graph which\nviolated that rule. Through clever service\nconstruction, one can model almost\nany kind of graph-like user interface or\ndocument.\n\nThe protocol is designed with the goal of\nmaking it as easy as possible to create new\nservices which provide interactive graphs.\nThis at the expense of making it harder to\ndevelop clients for interacting with those\ngraphs.\n\nHowever, creating clients is not complex\neither.\n\nThe protocol is intended for use on the\nlocal system via unix sockets and the\nZeroMQ message passing system.\n\nIn the future, a service will be created for\nserving gradesta graphs over the internet.\nThe protocol has been planned in such a way,\nthat this addition can happen without changing\nthe origional underlying standard.\n\nEach graph service launches as a normal\n*nix process. It then creates a directory\n~/.gradesta/services/ipfs/<service-hash>/internal-path/\n\nAs an example, the \"/ipfs/xyzhash\" service might\ncreate a directory\n~/.gradesta/services/ipfs/xyzhash/bar/\n\nIn this directory, the service will create\na socket named service.gradesock\n\nThis is a \u00d8MQ request/reply socket.\n\nOnce service.sock has been created, the\nservice launches the \"gradesta-manager\" which does\nthe heavy lifting of interacting with\nclients and performing resource tracking.\nThe manager is launched by calling the\nexecutable 'gradesta-manager' with the $CWD\nset to the path of the service's directory.\n\nThe gradesta-manager then creates its own\nsocket:\n~/.gradesta/services/ipfs/xyzhash/manager.gradesock\nThis is also a \u00d8MQ request/reply socket.\n\nThe manager socket acts as a go between\nbetween the clients and the service.\nThe service, rather than having to keep\ntrack of \"n\" clients, keeps track of only one manager.\n\nNote: The service launches the manager manually\nbecause in some cases, extra flexibility is\nrequired by the service and an alternative manager\nmay be used, or the service may act as manager\nitself.\n\nWhen a client wants to connect to a service\nit first connects to manager.gradesock sends a\nuuid.\n\nIt then creates it's own socket at.\n~/.gradesta/services/ipfs/xyzhash/bar/clients/<id>/client.gradesock\n\nclient.gradesock is a pub/sub socket to which the\nclient is the subscriber and to which the\nmanager publishes relevant changes which\nare made to the graph. This won't be all\nchanges, but rather, only changes that are\nin view on the client side. The manager\ntracks what is in view internally through\na subscription system.\n\nCommunication between the parties is encoded\nusing Google's protobuf 2 serialization\nprotocol.", [["", 52], ["", 60]]]
[8, "How does the Gradesta protocol relate to RDF?\n\nRDF is a format for describing graphs. These\ngraphs are very simple and textual, just\nlike Gradesta graphs. However, the goals are\nquite different. RDF's goal is to collect\nfacts into a \"logic database\" and to be able\nto answer questions about data in a user\nfriendly manner. It also tries to allow the\ncomputer to create data visualizations. In\nmany ways, RDF is like prolog for people who\nlike comitees. It is standardized by the\nW3C.\n\nThe Gradesta protocol could be used to serve\nRDF graphs, and indeed that would be a good\nfit. Both ecosystems are text centric and\nintended to present their data to users as\nwell as allow users to edit and enter new\ndata.\n\nHowever, Gradesta applications are broader\nin scope than RDF. You can create a visual\nprogramming language that uses Gradesta as\nits front end, or a mind mapping program, or\na menu based email client, or a menu based\nwiki, or a menu based CAD program ect.", []]
[9, "What is the difference between Gradesta and graph databases such as neo4j?\n\nLike RDF, graph databases focus on their\nability to algorithmically answer\nquestions/queries about data. Unlike RDF,\nhowever, graph databases go beyond basic\ntextual fact like data. Any kind of data can\nbe stored in a graph database. This makes it\nless likely that the Gradesta would be\nconnected to an enterprise graph database.\nGradesta clients may not have the capability\nto display and edit the richer data-sets\nwhich are stored in graph databases.\nTherefore, it is more likely that graph\ndatabases will require their own custom\nfront ends to access and enter data to\naccess and enter data.", []]
[13, "Getting cells\n\nA client can request a neighborhood of cells\nby contacting the manager via manager.gradesock.\nA neighborhood is a region of a graph which\nis bounded by a maximum number of steps from\na given cell. Requested neighborhoods are\nexpressed using the Cursor type. A Cursor\nhas a center cell, as well as what an real\ntime strategy game player would refer to as\na line of sight.\n\nThe manager records which Cursors have\nbeen placed by which clients, and, upon\nreceiving updates from the service, only\nforwards those changes to the clients for\nwhom the changes are relevant. Cusors can\nthus be thought of as a subscription to\na region of the graph.\n\nThe service has no knowlege of clients or\ncursors. In order for the manager to request\na neighborhood from the service, it first\nmarks the Cursor's center cell as 'IN_VIEW'\nby passing a Cell to the service with the\n'cell_id' and 'cell_state' set, but no other\nproperties set. The service will then respond\nwith the cell, either set to 'NORMAL' state,\nand with all properties set, or in 'NON_EXISTANT'\nstate with none of the properties set.\n\nOnce the manager has the center cell of the\nCursor, it looks at the line of sight of the\nCursor and starts to request rings going outward\naway from the center cell, using the same method\nof setting the cells as 'IN_VIEW'.\n\nWhen a cursor moves, or changes in the graph\ndisconnect a part of the neighborhood from\nbeing within sight, the manager will inform\nthe service that the cells have gone 'OUT_OF_VIEW'.\n\nIf the service ever modifies the contents of the\ngraph on its own, without the interaction of the\nclients, then the service must notify the manager\nof these changes, so that they may be passed on\nto the clients. However, the service should keep\ntrack of which cells are IN_VIEW and OUT_OF_VIEW,\nrather than spamming the manager with all changes.\nThis is not strictly necessary, as the manager is\nperfectly capable of ignoring changes to cells\nwhich are OUT_OF_VIEW. However, services which\nmake many many changes may find, for performance\nreasons, that tracking IN_VIEW and OUT_OF_VIEWness\nis necessary.\n\nThe astute reader may have realized a problem\nwith this model. What if a Cell which is currently\nout of view is connected to a Cell which is in\nview in such a way that the new Cell should become\nIN_VIEW itself. If the service tracks which Cells\nare IN_VIEW and which cells are OUT_OF_VIEW, will\nthe manager learn about the new cell which should\nbe IN_VIEW? The answer is yes, but only if the\nservice abides by the doubly linked nature of correct\ngradesta graphs. It is impossible for a service\nto connect an OUT_OF_VIEW cell to an IN_VIEW cell\nwithout simultaneously modifying the IN_VIEW cell\nto accept the incomming connection and thus\nnotifying the manager of the change.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.gradesock\n\u2502             \u2502            \u2502ClientState    |\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.gradesock           \u2502\n\u2502             \u2502ServiceState|               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via         (This back and forth repeats\n\u2502             \u2502service.gradesock   for each \"ring\" of the Cursor's\n\u2502             \u2502ServiceState|       line of sight untill the Cursor's\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500max_distance and center_cell_depth\n\u2502REPLY via \u2192  \u2502            \u2502       is reached.)\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.gradesock           \u2502\n\u2502             \u2502ServiceState|               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.gradesock           \u2502\n\u2502             \u2502ClientState \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 47], ["", 3], ["", 43], ["", 42]]]
[17, "Managing cursors\n\nCursors are set and get much like cells: by\nupdating a dictionary. If you know how to\nupdate cells, you should be able to figure\nout cursors as well.", [["", 47], ["", 46]]]
[19, "Setting cells\n\nThe client can set the text values, tags\nand the links of cells and resources by\nsending an dictionary of changed cells to\nthe manager. Obviously, with this approach,\nmultiple cells can be set symultaneously.\nFurthermore, by setting the cell_state \nof a cell, this method can be used to mark\ncells as being deleted as well.\n\nThe manager will automatically notify\nclients to whom the changes are relevant.\n\nCreating new cells is also done through the\nset command. It is the client's\nresponsibility to make sure that new cells\nhave unique IDs. The cell-id can be any unique\nstring. However, the canonical representaion\nof a uuid4 is recomended.\n\nThe re-ordering of stacks and rewiring of\nthe graph is also conducted by sending changes\nthrough the cell dictionary. When setting a\ncell's prev link, the next link of the newly\nlinked cell will be automatically set by the\nmanager and whatever was linked previously will\nbe disconnected. The same applies when setting\nnext links and edge links. This ensures that\nstacks and edges remain doubly linked lists.\n\nEach cell has a edit count. This number\nrepresents the number of times the cell has been\nmodified. Each time a cell is set, the client must\nincrement the edit count. If the service receives\na cell who's edit count is less than or equal to\nthe current edit count the change will be rejected.\n\nThe reason for the edit count is to ensure, that\nwhen two clients are modifying the graph at the\nsame time, their changes are applied only if\nusing up to date cell data.\n\nCell edits can be rejected by the service for\nany number of reasons. In all cases, cells who's\nedits are to be rejected should be returned to\nthe manager in the cell_state 'EDIT_FAILED' and\ntheir 'edit_error' property should be set.\n\nFinally, cells can be clicked by incrementing\ntheir click_count property. These clicks are\npassed on to the service using the same mechanics\nas cell editing. What clicking a cell does (if\nanything) is determined by the service.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.gradesock\n\u2502             \u2502            \u2502ClientState    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.gradesock           \u2502\n\u2502             \u2502ServiceState\u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.gradesock           \u2502\n\u2502             \u2502ClientState \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 PUB   via \u2192\u2502               \u2502\n\u2502             \u2502client.gradesock            \u2502\n\u2502             \u2502ClientState \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 3], ["", 42], ["", 43]]]
[35, "Closing remarks\n\n  Have fun! Go VEGAN! And fuck capitalism!\n\nMany people, upon hearing the phrase, \"fuck\ncapitalism\" think of communism. Soviet\nCommunism to be precise. But in communist\nRussia they still used money, and if you're\ntrying to fuck capitalism, and you're still\nusing money, than you're not doing it right.\n\nYou fuck capitalism by buying less shit\nyou don't need. By making things yourself.\nBy growing your own food. By making/doing\nthings for others for free. By cooperating\nwith others to do things in a mutually\nbeneficial fashion without the use of money.\nBy squating abandoned buildings, by eating\nfrom the dumptser.\n\nMy vision for a new society:\n\nWithin capitalism, it is very hard to trust\npeople. You never know if someone is being\nhonest, or if they are trying to sell you\nsomething. True friendship exists only in a\nnon-comercial context and the best things\nin life are anarchy already.\n\nIf a few people fuck capitalism, then they\ncan be friends, real friends, true friends.\nAnd they can enjoy eachothers company and\nmake some free stuff that everyone can\nenjoy. That's a good thing.\n\nIf more people fuck capitalism, then that's\neven better.\n\nAnd if everyone fucks capitalism, then we\ncan all walk around in toe shoes playing\nfrisbee on abandoned superhighways, eating\nfree VEGAN pizza baked by the fully\nautomated GNU Pizamaker, and we can smile at\neachother in the sunshine, knowing that\nwe're all friends and no one's trying to\nsell us shit or take over.\n\nIT ALWAYS MAKES SENSE TO FUCK CAPITALISM!", []]
[36, "What about Ted Nelson's ZigZag\u00ae \n\nGradesta shares the same goals as, and a very\nsimilar achitecture to, the gzz project and more\ngenerally, Ted Nelson's patented zzstructure.\nhttp://www.nongnu.org/gzz/index.html\n\nThe data structure behind gradesta, being a graph\nof stacks, is similar, but not the same as,\nzzstructure.\n\nThe gzz, and ZigZag projects were destroyed by\na combination of poor team culture, patents,\nand trademarks. While I beleive that the\nprogrammers who worked on the project origionally\nwere incredibly skilled and wrote quality code,\nI decided to create gradesta from scratch, in\npart to distance myself from the hard feelings\nof the past (though the patent is now expired).\n\nThe second reason for starting from scratch\nis that gzz was too ambitious. It included\nversion control as a core feature, where-as\ngradesta wishes to leave version control as\na 3rd party utility.\n\nFurthermore, I personally found the multi-\ndimensionality of zzstructures to be disorienting.\nThey reminded me of the following quote from\nEnders Game:\n\n\"He found that a great deal of what he learned at\nBattle School transferred to the simulator. He would\nroutinely reorient the simulator every few minutes,\nrotating it so that he didn't get trapped into an up-down\norientation, constantly reviewing his positoon from\nthe enemy point of view. It was exhilarating at last to\nhave such control over the battle, to be able to see \nevery point of it.\"\n\nI tried doing this with Age of Mythology after reading\nthat passage. It didn't help my tactics. It just left\nme feeling stupid and confused. I had the same feeling\nwith gzz.\n\nI'd much rather have a canonical representation in which\nat least one of the dimensions never changes. As a user,\nI need something to hold on to. Even if its totally\narbitrary. I need know that the enimies gate is down.", []]
[37, "Cells and their metadata\n\nCells are composed of following fields:\n\n'cell_id') a unique string. Typically a freshly\ngenerated uuid4 string, but can be any string\nwhich does not contain the following characters:\n'\\n', '/', '.'.\n\n'text') the human readable contents of the cell.\nThis can be any UTF-8 string but may not contain\nthe Windows style newline sequence CR-LF.\n\n'tags') which may be used as a criteria for\nfiltering the graph. This can be any UTF-8 string\nwhich does not contain a newline character. However,\nin canonical cases it will consist of a list of\nspace separated words which represent tags.\n\n'up', 'down', 'left', and 'right' links) links\nto other cells in the graph. The 'up' and 'down'\nlinks are simply cell_ids and can only point\nto other cells within the same graph. The 'left'\n'right' links, however, can point to cells both\nwithin the current graph and to cells outside of\nit.\n\nCell Runtime state:\n\nThe cell Runtime only exists during runtime, but\nis never serialized. The serialized part of the\ncell is intended to be as simple as possible, but\nthe runtime is somewhat more complex. \n\n'editable') Is the cell's text editable or\nread-only?\n\n'edit_count') This number reprensents\nthe number of times the cell has been modified\nin the current session (or globally if serialized\nby the service). This is updated by the client\neach time it requests a change, and is used to\nensure that there is no data loss when multiple\nclients edit the same cell at the same time.\n\n'click_count') The number of times the cell has been\n'clicked' or 'pressed' in the client.\n\n'cell_state') The current state of the cell. The exact\nmeaning of this field depends on the point of view.\nThis can be set to 'DELETED' by the client or service.\nIt can be set to 'OUT_OF_VIEW' by the manager. It can be\nset as 'NON_EXISTANT' by the service. If it is none of\nthese states, then it is 'NORMAL'. When setting cells,\nthe client sends the new versions of the cells to the\nmanager, which then forwards the changes to the service,\nthe service may reject the changes by returning cells\nof the cell_state 'EDIT_FAILED'. In this case, the\n'edit_error' string must be set. Cells of the state\n'EDIT_FAILED' will be sent only to the client which\nrequested the changes and these 'EDIT_FAILED' cells\nwill be otherwise ignored by the manager and not\nstored in the manager's cache.\n\n'edit_error') The last error that occured when trying\nto edit this cell.", [["", 3], ["", 19], ["", 13]]]
[38, "The Cursor object\ndescribes a way of selecting a group of cells which neighbor\na given cell.\n\nCursors have the following properties:\n\n\ncenter_cell:     Id of the cell at the center of the\n                 neighborhood.\n\nmax_distance:    Maximum number of edges away from the\n                 center cell at which neighboring cells\n                 are considered to be within the neighborhood.\n\ndirections:      This is a binary flag store which records\n                 the initial directions in which the\n                 neighborhood expands from the center. These are:\n\n                 0b0001 NORTH   Upwards  in the stack\n                 0b0010 EAST    Outwards on the eastern edge\n                 0b0100 SOUTH   Downards in the stack\n                 0b1000 WEST    Outwards on the western edge\n\ncenter_stack:    Distance from the center cell to go up and down\n                 within the center stack. If this is less than\n                 max_distance, it has no effect, however, if it is\n                 greater than max_distance, than the center stack\n                 may be larger than the max_distance would typically\n                 allow.\n\ntotal_max_size:  Maximum number of cells allowed in the neighborhood.\n\ncursor_state:    Used to specify if the cursor is to be deleted.", [["", 47], ["", 17], ["", 64]]]
[39, "Pattern of communication\n\nThe gradesta protocol functions via the passing\nof changes to a data structure which represents\nthe protocol's shared state. Basically, you should\nthink of it as a patching system. At first, you\nshare the origional document, and after that, you\njust send diffs back and forth.\n\nThere are two levels of data synchronization\nwithin the protocol, complete, and partial.\n\nBecause graphs can be arbitrarilly large,\npotentially infinite in size, it is impossible\nfor them to be synchronized completely.\n\nInstead, clients may place a cursor in the \ngraph and subscribe to cells which are near\nthat cursor.\n\nCells may be bookmarked. The number of bookmarks\nis limited, and therefore the full list of\nbookmarks is allways synchronized.\n\nClients may also wish to see the cursor's of\nother clients. Because the locations of cursors\noften change, it is not practical to constantly\ninform every client of the changes to every other\nclient's cursors. Therefore, the data structure\nwhich lists clients and cursors is also only\npartially synchronized. This partial\nsynchronization is allowed through the use of\na separate 'client_subscriptions' list which\nlists which client's cursors a given client\nis interested in.\n\nThe shared state is stored in a hierarchy with\nthe ClientState being at the root and the\nServiceState being contained within the\nClientState.\n\nAs each type of state is child to the last,\neach type of state is simpler than the last.\n\nThis goes in line with the gradesta philosophy\nthat as much work as possible should be passed\noff to the manager, which need be written only\nonce. And that clients, which are less numerous\nthan services, can be granted a little more\nresponsibility.\n\nThe ServiceState, however, is intended to be\nas simple as conceivably possible.", [["", 42], ["", 43]]]
[42, "message ClientState {\n optional Client        clients       = 1;\n optional ServiceState  service_state = 2;\n}", [["#", 46], ["#", 43]]]
[43, "message ServiceState {\n optional string        service_name  = 1;\n repeated Bookmark      bookmarks     = 2;\n repeated Cell          cells         = 3;\n optional bool          saved         = 4;\n}", [["#", 3], ["#", 45]]]
[44, "Bookmarks\nIf the service provides a graph, but does not\ngive any context as to what is in the graph\nit is impossible for a client to find\nany cells. Without knowing where to start when\nwalking a graph, it is impossible for the \nclient to display anything at all to the user.\n\nIn order to solve this problem, the concept of\nbookmarks is introduced. A bookmark maps a human\nreadable name to a cell_id, and stores that name\nand cell_id in a central list so that cells can be\nfound when needed.\n\nThe list of bookmarks is stored in the ServiceState.\nThis list must never be empty.", [["", 45], ["", 48], ["", 49]]]
[45, "message Bookmark {\n required string name    = 1;\n optional string cell_id = 2;\n}", []]
[46, "message Client {\n required string  client_id            = 1;\n optional string  client_name          = 2;\n optional int64   message_count        = 3;\n repeated Cursor  cursors              = 4;\n}", [["#", 47]]]
[47, "message Cursor {\n required string     name               = 1;\n optional string     center             = 2;\n optional int64      center_stack_depth = 3;\n optional uint32     directions         = 4;\n optional int64      max_distance       = 5;\n optional int64      max_cells          = 6;\n enum CursorState {\n  NORMAL       = 0;\n  DELETED      = 1;\n }\n optional CursorState cursor_state      = 7;\n\n}", []]
[48, "Setting bookmarks\n\nClients may set bookmarks by passing an entire\nbookmarks list to the master. Similarly, services\nmay set bookmarks by doing the same. This entire\nnew bookmarks list is forwarded to all other\nparties.", []]
[49, "Getting bookmarks\nBookmarks are automatically sent to the clients.\nIf the client receives a list of bookmarks, it\nshould consider that list to be definitive and\nup-to-date. If the list of bookmarks is empty,\nthen the empty list should be ignored, and any\npreviously received bookmarks list should be used\ninstead. Bookmarks do not need to be explicitly\nrequested.", []]
[51, "Opening Links\n\nFrom the client side:\n\nThere are two types of links. Local links and\nexternal links. Local links have '.' as their\npath. External links have any other string.\nIf the link is a local link, the client should\nopen it by simple jumping to the 'cell_id'.\nHowever, if it is an external link, the client\nshould open it using the 'gradesta-open-link'\nexecutable. The executable should be launched\nwith the same CWD as the client. It should have\nthree arguments, the service string, the path,\nand the cell_id.\n\nService side (AKA popup services):\n\nNot yet specified.", []]
[52, "Architecture of local services", [["", 53]]]
[53, "service", [[" manager.gradesock", 56]]]
[56, "manager", [[" service.gradesock", 53], [" client.gradesock", 57], [" client.gradesock", 58], [" client.gradesock", 59]]]
[57, "client", [[" manager.gradesock", 56]]]
[58, "client", [[" manager.gradesock", 56]]]
[59, "client", [[" manager.gradesock", 56]]]
[60, "Architecture for internet services", [["", 61]]]
[61, "service", [[" manager.gradesock", 63]]]
[63, "manager", [[" service.gradesock", 61], [" SSL sock", 70], [" SSL sock", 74], [" SSL sock", 75]]]
[64, "Watching other client's cursors\n\nIt is often usefull for one client to\nfollow or track the cursor of another\nclient. For example, a graphical text\nviewer may be configured to center it's\nview around the cursor of a text based\ngraph editor.\n\nA step through debugger, posing as a client\nmay make a cursor available which points\nto the currently executed cell.\n\nIt is therefore necessary that clients\nbe able to see the cursors of other clients.\nThis is why the ClientState contains not\njust the current Client but a list of all\nclients. In this list, you will ", [["", 42]]]
[65, "The Client object\nThe Client object's main purpose is to track\nthe Client's cursors. The only other important\nproperty of the client object is the message_count\nwhich must be incremented each time the client\nsends a message to the manager.", [["", 46]]]
[66, "The ServiceState object\nis the only interface between the service and\nthe manager/client. It is intentionally as simple\nas possible. It only has three fields.\n\n'service_name') is the name of the service. This\nis a human readable string which is displayed in\nthe client when showing a list of active services.\n\n'bookmarks') the bookmarks to important cells in\nthe current graph.\n\n'cells') the exact contents of this field vary\ndepending on the point of view. From the client's\npoint of view, this field contains cells that it\nhas \"subscribed to\" by placing a Cursor on or near\nthem. From the services point of view, this field\neither contains Cells which are being set, or Cells\nwhich are being subscribed to or unsubscribed from.\nThe service can tell the difference between those\npossibilities by looking at the 'cell_state' in the\nCell.Runtime. If the 'cell_state' is NORMAL then the\nCell is being set, created, or updated. If the\n'cell_state' is IN_VIEW or OUT_OF_VIEW then the Cell\nis either being subscribed to, if IN_VIEW, or\nunsubscribed from if OUT_OF_VIEW.\n\n'saved') this flag marks whether the in-memory contents\nof the graph have been saved to disk. When this flag is\nset to true by a client, the graph is saved. If the service\nauto-saves the graph, or there is nothing to save, the\nservice should always set this flag to true. Whenever the\ngraph is changed, the service should set the flag to false.", [["", 43]]]
[67, "Starting up", [["", 68], ["", 69]]]
[68, "Service startup\nWhen a service starts up and connects to the\nmanager, the service contacts the manager once,\npassing the graph's bookmarks and the service_name.\n\n1) REQ Service -> Manager\n   service_name\n   bookmarks\n\n2) REP Manager -> Service\n   no feilds set", []]
[69, "Client startup\nWhen a client is launched, the first thing that\nhappens after the sockets have been created is\nthat the client contacts the manager, passing a\nnewly clreated client_id and the human readable\nclient name.\n\nThe manager then responds with the list of\nbookmarks and the service_name.\n\nThe once the client sees the bookmarks it\ncan start placing cursors.\n\nThe client places the cursors using a REQ,\nbefore the manager responds to this REQ, it\nregisters cell subscriptions with the service,\nas necessary, and gathers whatever cell\ncontents need to be passed on to the client.\nThe manager then sends the requested cells\nto the client in the REP.\n\n1) REQ Client -> Manager\n   client_id\n   client_name\n\n2) REP Manager -> Client\n   service_name\n   bookmarks\n\n3) REQ Client -> Manager\n   cursors\n\n4) REQ Manager -> Service\n   cells\n\n5) REP Service -> Manager\n   cells (repeate 4 and 5 as necessary) \n\n6) REP Manager -> Client\n   cells", []]
[70, "manager-proxy", [[" SSL sock", 63], [" client.gradesock", 71], [" client.gradesock", 72], [" client.gradesock", 73]]]
[71, "client", [[" manager.gradesock", 70]]]
[72, "client", [[" manager.gradesock", 70]]]
[73, "client", [[" manager.gradesock", 70]]]
[74, "manager-proxy", [[" SSL sock", 63], [" client.gradesock", 76], [" client.gradesock", 77]]]
[75, "manager-proxy", [[" SSL sock", 63], [" client.gradesock", 78]]]
[76, "client", [[" manager.gradesock", 74]]]
[77, "client", [[" manager.gradesock", 74]]]
[78, "client", [[" manager.gradesock", 75]]]
[80, "Graph serialization\n\nThe simplest form of gradesta graph serialization\nis to serialize the graph using protobuf, to a\nServiceState object in wich the Cells have had their\nRuntimes removed.\n\nThis is an efficient way to serialize a graph, it is\nboth small in size and quick to parse. However, it\nis not a very usefull method if you wish to check your\ngraph in to a version control system and acheive readable\ndiffs.\n\nFor that reason, the gradesta standard also comes with\nits own, custom, textual, serialization format named\ngratexta (.gt). The goal of the format is to provide a\nsimple, human readable, human editable format in which\nthe cell text is unescaped and rendered with newlines\nin-tact so as to allow line based diffing algorithms to work.\n\nThe format is custom because none of the popular serialization\nformats that were analized at the time of specification supported\narbitrary multi-line strings. Yaml's | format does not support\nmulti-line strings beggining with whitespace. TOML's ''' multi-\nline strings do not support strings containing three single quotes.\nThe only format with usable multiline strings that was found was\nRFC 5322, which unfortunately is limited to 7 bit ASCII and supports\nneither nested dictionaries nor arbitrary single line strings nor\narbitrary dictionary keys.\n\nIn order to reduce the burden of parsing a custom format,\ngratexta2protobuf and protobuf2gratexta utilities are provided.\nIf you are creating a service which needs to edit a gratesta graph\nit may be better to stack your service ontop of a standard gratesta\nservice rather than to support the gratesta file format directly.\n\n---------START EXAMPLE gratexta file------------------------------\nBOOKMARKS\n\"<bookmark-name>\": \"<cell-id-of-destination>\"\n\nCELLS\n<cell-id>\n up   : \"<id-of-destination>\"\n down : \"<id-of-destination>\"\n left : \"<service-name>\" \"<graph-path>\" \"<id-of-destination>\"\n right: \"<service-name>\" \"<graph-path>\" \"<id-of-destination>\"\n tags : \"<tags>\"\n ---\n Cell\n text\n in\n multi-line\n block\n\n<next-cell-id>\n up   : \"<id-of-destination>\"\n down : \"<id-of-destination>\"\n left : \"<service-name>\" \"<graph-path>\" \"<id-of-destination>\"\n right: \"<service-name>\" \"<graph-path>\" \"<id-of-destination>\"\n tags : \"<tags>\"\n ---\n Cell\n text\n in\n multi-line\n block\n indented by one space and ended in a\n blank line.\n\n---------END EXAMPLE----------------------------------\n\nAs with all text in the world of gradesta, the gratesta file format\nis UTF-8 encoded and uses POSIX style line-feeds. Windows style\nline-feed carriage returns are forbiden.\n\nGratesta files are divided into two sections, \"BOOKMARKS\" \"CELLS\".\n\nIn the BOOKMARKS section, bookmarks are stored as a dictionary of\nJSON formatted strings. Each line contains a key value pair with\nkeys being separated from values by the : symbol. Whitespace which\nappears outside of the strings is ignored. Blank lines, and whitespace\nonly lines are ignored.\n\nOnce the parser gets to a line which, after stripping the whitespace\nfrom both ends reads \"CELLS\", the parser has reached the CELLS section.\n\nThe Cells section is broken into blocks, each block starting with a\nnon-indented cell-id. Each block is indented by a single space. The\nend of the block is denoted by a blank line. The first part of the\nblock is a dictionary which maps keys to values. If there is no link\nin a given direction, that direction is left out of the map. The\nsecond part of the block is the cell's text. The two parts are\nseparated by a line equal to \" ---\".", [["", 43]]]
[81, "Resolving service names\n\nThe gradesta-open-link executable resolves\nservice names by looking them up in a JSON\ndictionary which maps service names to executable\npaths. The gradesta-open-link executable will\nfirst attempt to look up service names in the\nfollowing locations.\n\n1) ~/.gradesta/services.json\n2) /etc/gradesta/services.json\n3) /etc/gradesta/services.d/*.json (searched in alphabetical order)\n3) /usr/share/gradesta/services.d/*.json (searched in alphabetical order)", []]
[82, "Telling the service to save the graph\n\nClients may direct the service to save the graph\nto disk by setting the 'saved' flag of the ServiceState\nobject to true.\n\nClients may save-as a graph by launching the\ngratesta-save-as executable with the first argument\nset to the path of the service directory of the\nservice who's graph is to be saved and the second\nargument set to the real file system path to which\nthe graph is to be saved. There are also flags for\nspecifying cursors within the graph to be save-as'ed\nso as to allow for the save-as'ing of parts of infinite\ngraphs or the save-as'ing of individual graphs of a\nmulti-graph.\n\nThe gratesta-save-as executable will imediately save\nthe graph to a file and exit. If the client then wishes \nto open a new service to serve the save-as'ed graph, it\nshould do so as it would normally open a gratesta file.", [["", 66]]]
[83, "Stacking services\n\nIt is often desireable to \"stack\" services ontop\neachother. This is done in the obvious way, a stackable\nservice acts as a client to another service. No magic,\nnothing.\n\nStacking is done, for example, when producing an IDE\nservice which adds functionality ontop the standard\ngratesta service, or when creating utility services\nsuch as interactive search and replace services or\ninteractive graph manipulation/simplification services.", [["", 84]]]
[84, "Architecture of stacked services", [["", 85]]]
[85, "bottom service", [[" manager.gradesock", 88]]]
[88, "manager of bottom service", [[" client.gradesock", 89], [" service.gradesock", 85]]]
[89, "stacked service", [[" manager.gradesock", 91], [" manager.gradesock", 88]]]
[91, "manager of stacked service", [[" client.gradesock", 92], [" client.gradesock", 93], [" client.gradesock", 94], [" service.gradesock", 89]]]
[92, "client to stacked service", [[" manager.gradesock", 91]]]
[93, "client to stacked service", [[" manager.gradesock", 91]]]
[94, "client to stacked service", [[" manager.gradesock", 91]]]
