[0, "syntax         =          \"proto2\"            ;\npackage                    gradesta           ;", [["#", 1], ["#", 2], ["#", 7], ["#", 39], ["", 41], ["", 42], ["", 43], ["#", 37], ["", 3], ["#", 19], ["#", 13], ["#", 6], ["", 5], ["#", 51], ["#", 44], ["", 45], ["#", 48], ["#", 49], ["", 46], ["#", 38], ["", 47], ["", 17], ["#", 8], ["#", 36], ["#", 9], ["#", 35]]]
[1, "Copyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute\nit and/or modify it under the terms of the GNU\nAffero General Public License as published by\nthe Free Software Foundation, either version 3\nof the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it\nwill be useful, but WITHOUT ANY WARRANTY;\nwithout even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE.  See the GNU Affero General Public\nLicense for more details.\n\nYou should have received a copy of the GNU\nAffero General Public License along with this\nprogram. If not, see\n<http://www.gnu.org/licenses/>.", []]
[2, "What is a Gradesta graph? (Basic structure)\nThis protocol is designed to allow you to\neasilly create services who's user inteface is\nexpressed as an interactive directed graph.\n\nThe name Gradesta stands for graph of stacks.\n\nThe basic principle is that a Gradesta graph is\na collection of cells, each with up to four\nlinks to other cells. One of those links is the\n\"next in stack link\", the second is the \n\"previous in stack link\". The third is the \n\"east edge link\". The fourth the \"west edge\nlink\".\n\nThe stack links allow you to build a doubly  \nlinked list of cells. You can only stack link  \nto an cell which has not been stack linked  \npreviously. And the next and previous stack  \nlinks must match up to create a linear  \nstructure without loops.\n\nThe edge links can link to any cell including\nitself. West and east edge links of respective\ncells must corespond. If a cell A's east edge\nlink links to cell B, then cell B's west edge\nlink MUST link to cell A.\n\nThis is a stack:\n\n\u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\n\u2502Bar \u2502\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nFoo next-links to Bar.\nBar prev-links to Foo.\nBar next-links to Baz.\nBaz prev-links to Bar.\n\nEach cell may also have an edge link.\n\n\u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol \u2502\n\u2502Bar \u2502    \u2514\u2500\u2500\u2500\u2500\u2518\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, Foo has an east edge link to Lol.\nLol also has a west edge link to Foo.\n\nEach cell can only have one east edge link\ncomming out of it and one west edge link\ngoing into it.\n\nHowever, multiple inlinks can be emulated\nby using the stack to emulate ports.\n\n\u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol   \u2502\n\u2502Bar \u2502\u2500\u2500\u2500\u25b8\u2502Port 1\u2502 \n\u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, both Foo and Bar, have edge links to Lol.\n\nIt is possible for an cell to edge link to itself.\n\n  \u250c\u2500\u2500\u2500\u2500\u2510\n  \u2502Foo \u2502\n  \u2502Bar \u2502\n\u250c\u25b8\u2502Baz \u2502\u2500\u2510\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nHere, Baz links to itself.\n\nOther types of loops are also allowed:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2514\u25b8\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol   \u2502\u2500\u2518\n  \u2502Bar \u2502\u2500\u2500\u2500\u25b8\u2502Port 1\u2502\n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nThere is no maximum size limit for Gradesta\ngraphs, and a procedurally generated Gradesta \ngraph often is infinite in size.\n\nIt is possible to have an infinite number of \ncells, and even the stacks can be loaded lazily\nso as to allow for infinite stacks.\n\nThere are no edge labels.\nThere is also no concept of a port.\nBoth of these concepts can be emulated,\nhowever.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502edge_label   \u2502\u2500\u2500\u2500\u25b8\u2502another_vertex \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can imagine the first cell in the\nstack as being the vertex label, and the\nsecond cell as being the edge label.\n\nYou can also designate a region of the stack\nto act as a collection of incomming ports.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u2502another_vertex \u2502\n\u2502edge_label   \u2502\u2500\u2500\u2500\u25b8\u2502in_port        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can also combine both concepts.\n\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502vertex_1    \u2502    \u2502vertex_2   \u2502\n\u250c\u25b8\u2502in_port_1   \u2502  \u250c\u25b8\u2502in_port    \u2502\n\u2502 \u2502in_port_2   \u2502  \u2502 \u2502edge_label \u2502\u2500\u2510\n\u2502 \u2502edge_label  \u2502\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nIn the above example, vertex_1 has\nan edge which links to vertex_2's first in\nport. And vertex_2 has an edge which links\nto vertex_1's in_port_1.\nvertex_1's in_port_2 is unconnected.", [[" next", 6]]]
[3, "message Cell {\n required string     cell_id     =  1;\n optional string     text        =  2;\n optional string     tags        =  3;\n\n optional bool       editable    =  4; \n\n optional string     up          =  5;\n optional string     down        =  6;\n optional Link       left        =  7;\n optional Link       right       =  8;\n\n optional int64      edit_count  =  9;\n optional int64      click_count = 10;\n enum CellState {\n  NORMAL       = 0;\n  DELETED      = 1;\n  OUT_OF_VIEW  = 3;\n  NON_EXISTANT = 4;\n }\n optional CellState  cell_state  = 11;\n\n optional string     last_error  = 12; \n}", [["", 5]]]
[5, "message Link {\n required string service = 1;\n required string path    = 2;\n required string cell_id = 3;\n}", []]
[6, "Links\nAs stated in the section on graph structure,\neach cell has stack links and edge links.\nStack links always point to another cell within\nthe current graph, but east-west edge links may\npoint to a location outside of the current\ngraph.\n\nThese outside locations are described using the\nLink message struct.\n\nLinks have the following attributes:\n\nservice: The protocol specifies the type of\nservice used to resolve the link.  This is an\nIPFS path of the full form, that isi '/ipfs/hash..'.\nIn order to specify, that the link is local to\nthe current service, '.' should be used.\n\nThe destination of this IPFS path is of no\nimport. It is simply used as a unique\nidentifier. However, authors of new services\nwill find it usefull to use the hash of a\nsimple README file or perhaps a collection of\nREADMEs and GPG keys.\n\nIt is the repsonsibility of distribution\nmaintainers to ensure that services are\nsuccessfully installed and registered.\n\npath: Is a protocol specific path to a given\ngraph. In order to specify that the link points\nto the current graph, `.` is used.\n\ncell_id: The id of the cell being linked to.\n", [[" ", 5]]]
[7, "What is the architecture of the Gradesta protocol?\n\nGradesta uses a client service architecture.\nThe service provides a gradesta graph which\ncan represent a graph based user interface,\na document, a view into a file system or database,\nor an interactive graph based virtual world.\nThis graph can be interacted with using a gradesta\nclient. Clients play the role of user interfaces\nnot unlike web browsers do for the web. Clients\ncan also be automatic scripts which interact with\nthe graph on their own. \n\nThe protocol allows the service to accept or reject\ninteractions, and therefore, it is\neasy for the service to create new rules\nabout which graphs are acceptable and which\nones are not. For example, if you wanted to\nadd the rule that a stack could only have two in ports,\n you could do so by rejecting all changes to the graph which\nviolated that rule. Through clever service\nconstruction, one can model almost\nany kind of graph-like user interface or\ndocument.\n\nThe protocol is designed with the goal of\nmaking it as easy as possible to create new\nservices which provide interactive graphs.\nThis at the expense of making it harder to\ndevelop clients for interacting with those\ngraphs.\n\nHowever, creating clients is not complex\neither.\n\nThe protocol is intended for use on the\nlocal system via unix sockets and the\nZeroMQ message passing system.\n\nIn the future, a service will be created for\nserving gradesta graphs over the internet.\nThe protocol has been planned in such a way,\nthat this addition can happen without changing\nthe origional underlying standard.\n\nEach graph service launches as a normal\n*nix process. It then creates a directory\n~/.gradesta/services/ipfs/<service-hash>/internal-path/\n\nAs an example, the \"/ipfs/xyzhash\" service might\ncreate a directory\n~/.gradesta/services/ipfs/xyzhash/bar/\n\nIn this directory, the service will create\na socket named service.gradesock\n\nThis is a \u00d8MQ request/reply socket.\n\nOnce service.sock has been created, the\nservice launches the \"gradesta-manager\" which does\nthe heavy lifting of interacting with\nclients and performing resource tracking.\nThe manager is launched by calling the\nexecutable 'gradesta-manager' with the $CWD\nset to the path of the service's directory.\n\nThe gradesta-manager then creates its own\nsocket:\n~/.gradesta/services/ipfs/xyzhash/manager.gradesock\nThis is also a \u00d8MQ request/reply socket.\n\nThe manager socket acts as a go between\nbetween the clients and the service.\nThe service, rather than having to keep\ntrack of \"n\" clients, keeps track of only one manager.\n\nWhen a client wants to connect to a service\nit first connects to manager.gradesock sends a\nuuid.\n\nIt then creates it's own socket at.\n~/.gradesta/services/ipfs/xyzhash/bar/clients/<id>/client.gradesock\n\nclient.gradesock is a pub/sub socket to which the\nclient is the subscriber and to which the\nmanager publishes relevant changes which\nare made to the graph. This won't be all\nchanges, but rather, only changes that are\nin view on the client side. The manager\ntracks what is in view internally through\na subscription system.\n\nCommunication between the parties is encoded\nusing Google's protobuf 2 serialization\nprotocol.", [["", 52], ["", 60]]]
[8, "How does the Gradesta protocol relate to RDF?\n\nRDF is a format for describing graphs. These\ngraphs are very simple and textual, just\nlike Gradesta graphs. However, the goals are\nquite different. RDF's goal is to collect\nfacts into a \"logic database\" and to be able\nto answer questions about data in a user\nfriendly manner. It also tries to allow the\ncomputer to create data visualizations. In\nmany ways, RDF is like prolog for people who\nlike comitees. It is standardized by the\nW3C.\n\nThe Gradesta protocol could be used to serve\nRDF graphs, and indeed that would be a good\nfit. Both ecosystems are text centric and\nintended to present their data to users as\nwell as allow users to edit and enter new\ndata.\n\nHowever, Gradesta applications are broader\nin scope than RDF. You can create a visual\nprogramming language that uses Gradesta as\nits front end, or a mind mapping program, or\na menu based email client, or a menu based\nwiki, or a menu based CAD program ect.", []]
[9, "What is the difference between Gradesta and graph databases such as neo4j?\n\nLike RDF, graph databases focus on their\nability to algorithmically answer\nquestions/queries about data. Unlike RDF,\nhowever, graph databases go beyond basic\ntextual fact like data. Any kind of data can\nbe stored in a graph database. This makes it\nless likely that the Gradesta would be\nconnected to an enterprise graph database.\nGradesta clients may not have the capability\nto display and edit the richer data-sets\nwhich are stored in graph databases.\nTherefore, it is more likely that graph\ndatabases will require their own custom\nfront ends to access and enter data to\naccess and enter data.", []]
[13, "Getting cells\n\nA client can request a Neighborhood of cells\nby contacting the manager via manager.sock.\nA neighborhood is a region of a graph which\nis bounded by a maximum number of steps from\na given cell.\n\nThe manager forwards the requested\nneighborhood to the service which then\nreturns all cells which fall within it's\nbounds.\n\nThe manager records which neighborhoods have\nbeen requested by which clients, and, upon\nreceiving updates from the service, only\nforwards those changes to the clients for\nwhom the changes are relevant. For this\nreason, the NeighborhoodSubscription request\ncontains the client's ID.\n\nResources that belong to cells are\nforwarded after the fact in order to reduce\nround trip time for delivering the actual\ncells.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.sock   \u2502\n\u2502             \u2502   NeighborhoodSubscription \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.sock\u2502               \u2502\n\u2502             \u2502Neighborhood\u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.sock \u2502            \u2502               \u2502\n\u2502RequestedNeighborhood     \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.sock\u2502               \u2502\n\u2502             \u2502RequestedNeighborhood       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REQ via    \u2192 \u2502            \u2502               \u2502\n\u2502manager.sock \u2502            \u2502               \u2502\n\u2502Set          \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 PUB   via \u2192\u2502               \u2502\n\u2502             \u2502update.sock \u2502               \u2502\n\u2502             \u2502Set         \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502\u2190 REPLY via \u2502               \u2502\n\u2502             \u2502manager.sock\u2502               \u2502\n\u2502             \u2502NULL        \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", []]
[17, "Managing cursors\n\nNeighborhood subscriptions are managed on a\nper cell basis. When you want to change the\nsize of the neighborhood being subscribed\nto, you simply send the subscription again\nwith a new size. If you wish to unsubscribe\nfrom a neighborhood, you subscribe with a\nsize of zero in all perameters.\n\nSo internally, unsubscribing looks like\nthis:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.sock   \u2502\n\u2502             \u2502    NeighborhoodSubscription\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.sock\u2502               \u2502\n\u2502             \u2502NULL        \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.sock\u2502               \u2502\n\u2502             \u2502Neighborhood\u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.sock \u2502            \u2502               \u2502\n\u2502RequestedNeighborhood     \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 47], ["", 46]]]
[19, "Setting cells\n\nThe client can set the text values, tags\nand the links of cells and resources by\nsending an dictionary of changed cells to\nthe manager. Obviously, with this approach,\nmultiple cells can be set symultaneously.\nFurthermore, by setting the cell_state \nof a cell, this method can be used to mark\ncells as being deleted as well.\n\nThe manager will automatically notify\nclients to whom the changes are relevant.\n\nCreating new cells is also done through the\nset command. It is the client's\nresponsibility to make sure that new cells\nhave unique IDs. The cell-id can be any unique\nstring. However, the canonical representaion\nof a uuid4 is recomended.\n\nThe re-ordering of stacks and rewiring of\nthe graph is also conducted by sending changes\nthrough the cell dictionary. When setting a\ncell's prev link, the next link of the newly\nlinked cell will be automatically set by the\nmanager and whatever was linked previously will\nbe disconnected. The same applies when setting\nnext links and edge links. This ensures that\nstacks and edges remain doubly linked lists.\n\nEach cell has a edit count. This number\nrepresents the number of times the cell has been\nmodified. Each time a cell is set, the client must\nincrement the edit count. If the service receives\na cell who's edit count is less than or equal to\nthe current generation count, all changes proposed\nby the message MUST be atomically rejected.\n\nThe reason for the edit count is to ensure, that\nwhen two clients are modifying the graph at the\nsame time, their changes are applied only if\nusing up to date cell data.\n\nFinally, cells can be clicked by incrementing\ntheir click_count property. What clicking a\ncell does is determined by the service.\n\nThe service/manager will respond to the Set\ncommand with a SetOutcome. The SetOutcome\nobject has the following properties:\n\nok: A flag which tells the client if\nthe Set was successfull.\n\nerror: A string where any errors are described.\n\nchanges: If cells or resources that are set\ndiffer from the exact contents sent by the client,\nthe service will pass these differing values back.\nFor example, the client may have an autoformater\nwhich changes the format of text sent to it.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.sock   \u2502\n\u2502             \u2502            \u2502Set            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.sock\u2502               \u2502\n\u2502             \u2502Set         \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.sock \u2502            \u2502               \u2502\n\u2502SetOutcome   \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.sock\u2502               \u2502\n\u2502             \u2502SetOutcome  \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 PUB   via \u2192\u2502               \u2502\n\u2502             \u2502update.sock \u2502               \u2502\n\u2502             \u2502Set         \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n", []]
[35, "Closing remarks\n\n  Have fun! Go VEGAN! And fuck capitalism!\n\nMany people, upon hearing the phrase, \"fuck\ncapitalism\" think of communism. Soviet\nCommunism to be precise. But in communist\nRussia they still used money, and if you're\ntrying to fuck capitalism, and you're still\nusing money, than you're not doing it right.\n\nYou fuck capitalism by buying less shit\nyou don't need. By making things yourself.\nBy growing your own food. By making/doing\nthings for others for free. By cooperating\nwith others to do things in a mutually\nbeneficial fashion without the use of money.\nBy squating abandoned buildings, by eating\nfrom the dumptser.\n\nMy vision for a new society:\n\nWithin capitalism, it is very hard to trust\npeople. You never know if someone is being\nhonest, or if they are trying to sell you\nsomething. True friendship exists only in a\nnon-comercial context and the best things\nin life are anarchy already.\n\nIf a few people fuck capitalism, then they\ncan be friends, real friends, true friends.\nAnd they can enjoy eachothers company and\nmake some free stuff that everyone can\nenjoy. That's a good thing.\n\nIf more people fuck capitalism, then that's\neven better.\n\nAnd if everyone fucks capitalism, then we\ncan all walk around in toe shoes playing\nfrisbee on abandoned superhighways, eating\nfree VEGAN pizza baked by the fully\nautomated GNU Pizamaker, and we can smile at\neachother in the sunshine, knowing that\nwe're all friends and no one's trying to\nsell us shit or take over.\n\nIT ALWAYS MAKES SENSE TO FUCK CAPITALISM!", []]
[36, "What about Ted Nelson's ZigZag\u00ae \n\nGradesta shares the same goals as, and a very\nsimilar achitecture to, the gzz project and more\ngenerally, Ted Nelson's patented zzstructure.\nhttp://www.nongnu.org/gzz/index.html\n\nThe data structure behind gradesta, being a graph\nof stacks, is similar, but not the same as,\nzzstructure.\n\nThe gzz, and ZigZag projects were destroyed by\na combination of poor team culture, patents,\nand trademarks. While I beleive that the\nprogrammers who worked on the project origionally\nwere incredibly skilled and wrote quality code,\nI decided to create gradesta from scratch, in\npart to distance myself from the hard feelings\nof the past (though the patent is now expired).\n\nThe second reason for starting from scratch\nis that gzz was too ambitious. It included\nversion control as a core feature, where-as\ngradesta wishes to leave version control as\na 3rd party utility.\n\nFurthermore, I personally found the multi-\ndimensionality of zzstructures to be disorienting.\nThey reminded me of the following quote from\nEnders Game:\n\n\"He found that a great deal of what he learned at\nBattle School transferred to the simulator. He would\nroutinely reorient the simulator every few minutes,\nrotating it so that he didn't get trapped into an up-down\norientation, constantly reviewing his positoon from\nthe enemy point of view. It was exhilarating at last to\nhave such control over the battle, to be able to see \nevery point of it.\"\n\nI tried doing this with Age of Mythology after reading\nthat passage. It didn't help my tactics. It just left\nme feeling stupid and confused. I had the same feeling\nwith gzz.\n\nI'd much rather have a canonical representation in which\nat least one of the dimensions never changes. As a user,\nI need something to hold on to. Even if its totally\narbitrary. I need know that the enimies gate is down.", []]
[37, "Cells and their metadata\n\nCells are composed of following fields:\n\n'cell-id') a unique, typically randomly generated,\narray of bytes.\n\n'text') the human readable contents of the cell.\n\n'tags') which may be used as a criteria for\nfiltering the graph.\n\n'edit-count') This number reprensents\nthe number of times the cell has been modified\nin the current session (or globally if serialized\nby the service). This is updated by the client\neach time it requests a change, and is used to\nensure that there is no data loss when multiple\nclients edit the same cell at the same time.\n\n'up', 'down', 'left', and 'right' links) links\nto other cells in the graph. The 'up' and 'down'\nlinks are simply cell_ids and can only point\nto other cells within the same graph. The 'left'\n'right' links, however, can point to cells both\nwithin the current graph and to cells outside of\nit.\n\n'click-count') The number of times the cell has been\n'clicked' or 'pressed' in the client.\n\n'cell-state') The current state of the cell. The exact\nmeaning of this field depends on the point of view.\nThis can be set to 'DELETED' by the client or service.\nIt can be set to 'OUT_OF_VIEW' by the manager. It can be\nset as 'NON_EXISTANT' by the service. If it is none of\nthese states, then it is 'NORMAL'.", [["", 3], ["", 19]]]
[38, "The Cursor object\ndescribes a way of selecting a group of cells which neighbor\na given cell.\n\nCursors have the following properties:\n\n\ncenter_cell:     Id of the cell at the center of the\n                 neighborhood.\n\nmax_distance:    Maximum number of edges away from the\n                 center cell at which neighboring cells\n                 are considered to be within the neighborhood.\n\ndirections:      This is a binary flag store which records\n                 the initial directions in which the\n                 neighborhood expands from the center. These are:\n\n                 0b0001 NORTH   Upwards  in the stack\n                 0b0010 EAST    Outwards on the eastern edge\n                 0b0100 SOUTH   Downards in the stack\n                 0b1000 WEST    Outwards on the western edge\n\ncenter_stack:    Distance from the center cell to go up and down\n                 within the center stack. If this is less than\n                 max_distance, it has no effect, however, if it is\n                 greater than max_distance, than the center stack\n                 may be larger than the max_distance would typically\n                 allow.\n\ntotal_max_size:  Maximum number of cells allowed in the neighborhood.", [["", 47]]]
[39, "Pattern of communication\n\nThe gradesta protocol functions via the passing\nof changes to a data structure which represents\nthe protocol's shared state. Basically, you should\nthink of it as a patching system. At first, you\nshare the origional document, and after that, you\njust send diffs back and forth.\n\nThere are two levels of data synchronization\nwithin the protocol, complete, and partial.\n\nBecause graphs can be arbitrarilly large,\npotentially infinite in size, it is impossible\nfor them to be synchronized completely.\n\nInstead, clients may place a cursor in the \ngraph and subscribe to cells which are near\nthat cursor.\n\nCells may be bookmarked. The number of bookmarks\nis limited, and therefore the full list of\nbookmarks is allways synchronized.\n\nClients may also wish to see the cursor's of\nother clients. Because the locations of cursors\noften change, it is not practical to constantly\ninform every client of the changes to every other\nclient's cursors. Therefore, the data structure\nwhich lists clients and cursors is also only\npartially synchronized. This partial\nsynchronization is allowed through the use of\na separate 'client_subscriptions' list which\nlists which client's cursors a given client\nis interested in.\n\nThe shared state is stored in a hierarchy with\nthe ManagerState being at the root.\n\nChild to ManagerState is ClientState and\nchild to ClientState is ServiceState.\n\nAs each type of state is child to the last,\neach type of state is simpler than the last.\n\nThis goes in line with the gradesta philosophy\nthat as much work as possible should be passed\noff to the manager, which need be written only\nonce. And that clients, which are less numerous\nthan services, can be granted a little more\nresponsibility.\n\nThe ServiceState, however, is intended to be\nas simple as conceivably possible.", [["", 41], ["", 42], ["", 43]]]
[41, "message ManagerState {\n          ClientState   client_state  = 1;\n}\n", [["", 42]]]
[42, "message ClientState {\n repeated Client        clients       = 1;\n          ServiceState  service_state = 2;\n}", [["", 46], ["", 43]]]
[43, "message ServiceState {\n repeated Bookmark      bookmarks     = 1;\n repeated Cell          cells         = 2;\n}", [["", 3], ["", 45]]]
[44, "Bookmarks\nIf the service provides a graph, but does not\ngive any context as to what is in the graph\nit is impossible for a client to find\nany cells. Without knowing where to start when\nwalking a graph, it is impossible for the \nclient to display anything at all to the user.\n\nIn order to solve this problem, the concept of\nbookmarks is introduced. A bookmark maps a human\nreadable name to a cell_id, and stores that name\nand cell_id in a central list so that cells can be\nfound when needed.", [["", 45]]]
[45, "message Bookmark {\n required string name    = 1;\n optional string cell_id = 2;\n}", []]
[46, "message Client {\n required string  client_id            = 1;\n optional string  client_name          = 2;\n optional int64   message_count        = 3;\n repeated Cursor  cursors              = 4;\n repeated string  client_subscriptions = 5;\n}\n", [["", 47]]]
[47, "message Cursor {\n required string name               = 1;\n optional string center             = 2;\n optional int64  center_stack_depth = 3;\n optional int8   directions         = 4;\n optional int64  max_distance       = 5;\n optional int64  max_cells          = 6;\n}", []]
[48, "Setting bookmarks", []]
[49, "Getting bookmarks", []]
[51, "Opening Links", []]
[52, "Architecture of local services", [["", 53]]]
[53, "service", [[" manager.gradesock", 56], [" SSL sock (In the case of interent services)", 63]]]
[56, "manager", [[" service.gradesock", 53], [" client.gradesock", 57], [" client.gradesock", 58], [" client.gradesock", 59]]]
[57, "client", [[" manager.gradesock", 56]]]
[58, "client", [[" manager.gradesock", 56]]]
[59, "client", [[" manager.gradesock", 56]]]
[60, "Architecture for internet services", [["", 61]]]
[61, "service", [[" manager.gradesock", 63]]]
[63, "server", [[" service.gradesock", 61], [" SSL sock (In the case of interent services)", 53]]]
