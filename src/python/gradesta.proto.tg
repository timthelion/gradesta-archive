[0, "syntax         =          \"proto2\"            ;\npackage                    gradesta           ;", [["#next", 1], ["#", 95], ["#", 2], ["#", 7], ["#", 39], ["#", 67], ["#", 98], ["", 42], ["#", 66], ["", 43], ["", 173], ["#", 37], ["", 3], ["#", 106], ["", 119], ["#", 19], ["#", 13], ["#", 6], ["", 5], ["#", 51], ["#", 81], ["#", 44], ["", 45], ["#", 48], ["#", 49], ["#", 178], ["", 177], ["#", 65], ["#", 175], ["", 174], ["", 46], ["#", 38], ["", 47], ["#", 17], ["#", 100], ["", 99], ["#", 105], ["", 104], ["#", 64], ["#", 148], ["", 147], ["#", 171], ["", 172], ["", 176], ["#", 118], ["#", 82], ["#", 83], ["#", 80], ["", 170], ["#", 120], ["#", 96], ["#", 8], ["#", 36], ["#", 9], ["#", 35]]]
[1, "Copyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute\nit and/or modify it under the terms of the GNU\nAffero General Public License as published by\nthe Free Software Foundation, either version 3\nof the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it\nwill be useful, but WITHOUT ANY WARRANTY;\nwithout even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE.  See the GNU Affero General Public\nLicense for more details.\n\nYou should have received a copy of the GNU\nAffero General Public License along with this\nprogram. If not, see\n<http://www.gnu.org/licenses/>.", [["#next", 95]]]
[2, "What is a Gradesta graph? (Basic structure)\nThis protocol is designed to allow you to\neasilly create services who's user inteface is\nexpressed as an interactive directed graph.\n\nThe name Gradesta stands for graph of stacks.\n\nThe basic principle is that a Gradesta graph is\na collection of cells, each with up to four\nlinks to other cells. One of those links is the\n\"next in stack link\", the second is the \n\"previous in stack link\". The third is the \n\"east edge link\". The fourth the \"west edge\nlink\".\n\nThe stack links allow you to build a doubly  \nlinked list of cells. You can only stack link  \nto an cell which has not been stack linked  \npreviously. And the next and previous stack  \nlinks must match up to create a linear  \nstructure without loops.\n\nThe edge links can link to any cell including\nitself. West and east edge links of respective\ncells must corespond. If a cell A's east edge\nlink links to cell B, then cell B's west edge\nlink MUST link to cell A.\n\nThis is a stack:\n\n\u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\n\u2502Bar \u2502\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nFoo next-links to Bar.\nBar prev-links to Foo.\nBar next-links to Baz.\nBaz prev-links to Bar.\n\nEach cell may also have an edge link.\n\n\u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol \u2502\n\u2502Bar \u2502    \u2514\u2500\u2500\u2500\u2500\u2518\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, Foo has an east edge link to Lol.\nLol also has a west edge link to Foo.\n\nEach cell can only have one east edge link\ncomming out of it and one west edge link\ngoing into it.\n\nHowever, multiple inlinks can be emulated\nby using the stack to emulate ports.\n\n\u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol   \u2502\n\u2502Bar \u2502\u2500\u2500\u2500\u25b8\u2502Port 1\u2502 \n\u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, both Foo and Bar, have edge links to Lol.\n\nIt is possible for an cell to edge link to itself.\n\n  \u250c\u2500\u2500\u2500\u2500\u2510\n  \u2502Foo \u2502\n  \u2502Bar \u2502\n\u250c\u25b8\u2502Baz \u2502\u2500\u2510\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nHere, Baz links to itself.\n\nOther types of loops are also allowed:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2514\u25b8\u2502Foo \u2502\u2500\u2500\u2500\u25b8\u2502Lol   \u2502\u2500\u2518\n  \u2502Bar \u2502\u2500\u2500\u2500\u25b8\u2502Port 1\u2502\n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nThere is no maximum size limit for Gradesta\ngraphs, and a procedurally generated Gradesta \ngraph often is infinite in size.\n\nIt is possible to have an infinite number of \ncells, and even the stacks can be loaded lazily\nso as to allow for infinite stacks.\n\nThere are no edge labels.\nThere is also no concept of a port.\nBoth of these concepts can be emulated,\nhowever.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502edge_label   \u2502\u2500\u2500\u2500\u25b8\u2502another_vertex \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can imagine the first cell in the\nstack as being the vertex label, and the\nsecond cell as being the edge label.\n\nYou can also designate a region of the stack\nto act as a collection of incomming ports.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u2502another_vertex \u2502\n\u2502edge_label   \u2502\u2500\u2500\u2500\u25b8\u2502in_port        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can also combine both concepts.\n\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502vertex_1    \u2502    \u2502vertex_2   \u2502\n\u250c\u25b8\u2502in_port_1   \u2502  \u250c\u25b8\u2502in_port    \u2502\n\u2502 \u2502in_port_2   \u2502  \u2502 \u2502edge_label \u2502\u2500\u2510\n\u2502 \u2502edge_label  \u2502\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nIn the above example, vertex_1 has\nan edge which links to vertex_2's first in\nport. And vertex_2 has an edge which links\nto vertex_1's in_port_1.\nvertex_1's in_port_2 is unconnected.", [["", 6], ["#next", 7]]]
[3, "message Cell {\n optional bytes       data        =  1;\n enum Encoding {\n  UNKNOWN = 0;\n  UTF8    = 1;\n  BINARY  = 2;\n }\n optional Encoding    encoding    =  2;\n optional string      mime        =  3;\n\n optional string      up          =  4;\n optional string      down        =  5;\n optional Link        left        =  6;\n optional Link        right       =  7;\n\n map<string, Link>    related     =  9;\n repeated string      tags        = 10;\n\n repeated double      coords      = 200;\n}", [["#", 5]]]
[5, "message Link {\n required string service  = 1;\n required string path     = 2;\n required string cell_id  = 3;\n optional bool   boundary = 4;\n}", []]
[6, "Links\nAs stated in the section on graph structure,\neach cell has stack links and edge links.\nStack links always point to another cell within\nthe current graph, but east-west edge links may\npoint to a location outside of the current\ngraph.\n\nThese outside locations are described using the\nLink message struct.\n\nLinks have the following attributes:\n\nservice: The protocol specifies the type of\nservice used to resolve the link.  This is an\nIPFS path of the full form, that is '/ipfs/hash..'.\nIn order to specify, that the link is local to\nthe current service, '.' should be used.\n\nThe destination of this IPFS path is of no\nimport. It is simply used as a unique\nidentifier. However, authors of new services\nwill find it usefull to use the hash of a\nsimple README file or perhaps a collection of\nREADMEs and GPG keys.\n\nIt is the repsonsibility of distribution\nmaintainers to ensure that services are\nsuccessfully installed and registered.\nFor more information about registering\nservices, see \"Resolving service names\"\nbelow.\n\npath: Is a protocol specific path to a given\ngraph. In order to specify that the link points\nto the current graph, `.` is used. The path may\nnot include newlines or the sequences '/./' and\n'/../'.\n\ncell_id: The id of the cell being linked to.\n\nboundary: This is somewhat of a no-op. If true,\nthis link should be considered to be pointing\nsomewhere far away or removed. The only usage of\nthis is when creating a drawing of the graph,\nyou might draw the graph only up till the boundary\nlinks. Or maybe it would use this for grouping.\nThis isn't an important attribute, but it seems\nto be usefull and can be safely ignored, does not\nweigh down the protocol in any way.", [[" ", 5], ["#next", 51], ["", 81]]]
[7, "What is the architecture of the Gradesta protocol?\n\nGradesta uses a client service architecture.\nThe service provides a gradesta graph which\ncan represent a graph based user interface,\na document, a view into a file system or database,\nor an interactive graph based virtual world.\nThis graph can be interacted with using a gradesta\nclient. Clients play the role of user interfaces\nnot unlike web browsers do for the web. Clients\ncan also be automatic scripts which interact with\nthe graph on their own. \n\nThe protocol allows the service to accept or reject\ninteractions, and therefore, it is\neasy for the service to create new rules\nabout which graphs are acceptable and which\nones are not. For example, if you wanted to\nadd the rule that a stack could only have\ntwo in ports, you could do so by rejecting\nall changes to the graph which violated that\nrule. Through clever service construction,\none can model almost any kind of graph-like\nuser interface or document.\n\nThe protocol is designed with the goal of\nmaking it as easy as possible to create new\nservices which provide interactive graphs.\nThis at the expense of making it harder to\ndevelop clients for interacting with those\ngraphs.\n\nHowever, creating clients is not complex\neither.\n\nThe protocol is intended for use on the\nlocal system via unix sockets and the\nZeroMQ message passing system.\n\nIn the future, a service will be created for\nserving gradesta graphs over the internet.\nThe protocol has been planned in such a way,\nthat this addition can happen without changing\nthe origional underlying standard.\n\nEach graph service launches as a normal\n*nix process. It then creates a directory\n~/.gradesta/services/ipfs/<service-hash>/internal-path/\n\nAs an example, the \"/ipfs/xyzhash\" service might\ncreate a directory\n~/.gradesta/services/ipfs/xyzhash/bar/\n\nIn this directory, the service will create\na socket named service.gradesock\n\nThis is a \u00d8MQ request/reply socket.\n\nOnce service.sock has been created, the\nservice launches the \"gradesta-manager\" which does\nthe heavy lifting of interacting with\nclients and performing resource tracking.\nThe manager is launched by calling the\nexecutable 'gradesta-manager' with the $CWD\nset to the path of the service's directory.\nThe 'gradesta-manager' exectuable should be\npassed one argument; the PID of the service.\n\nThe gradesta-manager then creates a socket:\n~/.gradesta/services/ipfs/xyzhash/manager.gradesock\nThis is also a \u00d8MQ PUSH/PULL socket. And\nit is used by the service to publish changes\nto the graph.\n\nNote: The service launches the manager manually\nbecause in some cases, extra flexibility is\nrequired by the service and an alternative manager\nmay be used, or the service may act as manager\nitself.\n\nWhen a client wants to connect to a service\nit first creates a client socket at.\n~/.gradesta/services/ipfs/xyzhash/bar/clients/<id>/client.gradesock\n\nclient.gradesock is a PUSH/PULL socket to which\nthe manager is the pusher and the client is\nclient is the puller. The manager uses this socket\nto push relevant changes to the client. This won't\nbe all changes, but rather, only changes that are\nin view on the client side. The manager\ntracks what is in view internally through\na subscription system. The data type for this socket\nis a ClientState.\n\nThe manager will automatically detect the\ncreation of client.gradesock and connect to\nit. The manager will also create a \n~/.gradesta/services/ipfs/xyzhash/bar/clients/<id>/manager.gradesock\nThis is the REQ/REP socket which the client\nuses to interact with the graph.\n\nCommunication between the parties is encoded\nusing Google's protobuf 2 serialization\nprotocol.", [["", 52], ["", 60], ["#next", 39]]]
[8, "How does the Gradesta protocol relate to RDF?\n\nRDF is a format for describing graphs. These\ngraphs are very simple and textual, just\nlike Gradesta graphs. However, the goals are\nquite different. RDF's goal is to collect\nfacts into a \"logic database\" and to be able\nto answer questions about data in a user\nfriendly manner. It also tries to allow the\ncomputer to create data visualizations. In\nmany ways, RDF is like prolog for people who\nlike comitees. It is standardized by the\nW3C.\n\nThe Gradesta protocol could be used to serve\nRDF graphs, and indeed that would be a good\nfit. Both ecosystems are text centric and\nintended to present their data to users as\nwell as allow users to edit and enter new\ndata.\n\nHowever, Gradesta applications are broader\nin scope than RDF. You can create a visual\nprogramming language that uses Gradesta as\nits front end, or a mind mapping program, or\na menu based email client, or a menu based\nwiki, or a menu based CAD program ect.", [["#next", 36]]]
[9, "What is the difference between Gradesta and graph databases such as neo4j?\n\nLike RDF, graph databases focus on their\nability to algorithmically answer\nquestions/queries about data. Unlike RDF,\nhowever, graph databases go beyond basic\ntextual fact like data. Any kind of data can\nbe stored in a graph database. This makes it\nless likely that the Gradesta would be\nconnected to an enterprise graph database.\nGradesta clients may not have the capability\nto display and edit the richer data-sets\nwhich are stored in graph databases.\nTherefore, it is more likely that graph\ndatabases will require their own custom\nfront ends to access and enter data to\naccess and enter data.", [["#next", 35]]]
[13, "Getting cells\n\nA client can request a neighborhood of cells\nby contacting the manager via manager.gradesock.\nA neighborhood is a region of a graph which\nis bounded by a maximum number of steps from\na given cell. Requested neighborhoods are\nexpressed using the Cursor type. A Cursor\nhas a center cell, as well as what an real\ntime strategy game player would refer to as\na line of sight.\n\nThe manager records which Cursors have\nbeen placed by which clients, and, upon\nreceiving updates from the service, only\nforwards those changes to the clients for\nwhom the changes are relevant. Cusors can\nthus be thought of as a subscription to\na region of the graph.\n\nThe service has no knowlege of clients or\ncursors. In order for the manager to request\na neighborhood from the service, it first\nmarks the Cursor's center cell as 'IN_VIEW'\nby passing a Cell to the service with the\n'cell_id' and 'cell_status' set, but no other\nproperties set. The service will then respond\nwith the cell, either set to 'NORMAL' state,\nand with all properties set, or in 'NON_EXISTANT'\nstate with none of the properties set.\n\nOnce the manager has the center cell of the\nCursor, it looks at the line of sight of the\nCursor and starts to request rings going outward\naway from the center cell, using the same method\nof setting the cells as 'IN_VIEW'.\n\nWhen a cursor moves, or changes in the graph\ndisconnect a part of the neighborhood from\nbeing within sight, the manager will inform\nthe service that the cells have gone 'OUT_OF_VIEW'.\n\nIf the service ever modifies the contents of the\ngraph on its own, without the interaction of the\nclients, then the service must notify the manager\nof these changes, so that they may be passed on\nto the clients. However, the service should keep\ntrack of which cells are IN_VIEW and OUT_OF_VIEW,\nrather than spamming the manager with all changes.\nThis is not strictly necessary, as the manager is\nperfectly capable of ignoring changes to cells\nwhich are OUT_OF_VIEW. However, services which\nmake many many changes may find, for performance\nreasons, that tracking IN_VIEW and OUT_OF_VIEWness\nis necessary.\n\nThe astute reader may have realized a problem\nwith this model. What if a Cell which is currently\nout of view is connected to a Cell which is in\nview in such a way that the new Cell should become\nIN_VIEW itself. If the service tracks which Cells\nare IN_VIEW and which cells are OUT_OF_VIEW, will\nthe manager learn about the new cell which should\nbe IN_VIEW? The answer is yes, but only if the\nservice abides by the doubly linked nature of correct\ngradesta graphs. It is impossible for a service\nto connect an OUT_OF_VIEW cell to an IN_VIEW cell\nwithout simultaneously modifying the IN_VIEW cell\nto accept the incomming connection and thus\nnotifying the manager of the change.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.gradesock\n\u2502             \u2502            \u2502ClientState    |\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.gradesock           \u2502\n\u2502             \u2502ServiceState|               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via         (This back and forth repeats\n\u2502             \u2502service.gradesock   for each \"ring\" of the Cursor's\n\u2502             \u2502ServiceState|       line of sight untill the Cursor's\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500max_distance and center_cell_depth\n\u2502REPLY via \u2192  \u2502            \u2502       is reached.)\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.gradesock           \u2502\n\u2502             \u2502ServiceState|               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.gradesock           \u2502\n\u2502             \u2502ClientState \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 47], ["", 3], ["", 43], ["", 42], ["#next", 6]]]
[17, "Managing selections\n\nSelections are set and get much like cells: by\nupdating a dictionary. If you know how to\nupdate cells, you should be able to figure\nout selections as well.", [["", 47], ["", 46], ["#next", 100]]]
[19, "Setting cells\n\nThe client can set the text values, tags\nand the links of cells and resources by\nsending an dictionary of changed cells to\nthe manager. Obviously, with this approach,\nmultiple cells can be set symultaneously.\nFurthermore, by setting the cell_status \nof a cell, this method can be used to mark\ncells as being deleted as well.\n\nThe manager will automatically notify\nclients to whom the changes are relevant.\n\nCreating new cells is also done through the\nset command. It is the client's\nresponsibility to make sure that new cells\nhave unique IDs. The cell-id can be any unique\nstring. However, the canonical representaion\nof a uuid4 is recomended.\n\nThe re-ordering of stacks and rewiring of\nthe graph is also conducted by sending changes\nthrough the cell dictionary. When setting a\ncell's prev link, the next link of the newly\nlinked cell will be automatically set by the\nmanager and whatever was linked previously will\nbe disconnected. The same applies when setting\nnext links and edge links. This ensures that\nstacks and edges remain doubly linked lists.\n\nEach cell has a edit count. This number\nrepresents the number of times the cell has been\nmodified. Each time a cell is set, the client must\nincrement the edit count. If the service receives\na cell who's edit count is less than or equal to\nthe current edit count the change will be rejected.\n\nThe reason for the edit count is to ensure, that\nwhen two clients are modifying the graph at the\nsame time, their changes are applied only if\nusing up to date cell data.\n\nCell edits can be rejected by the service for\nany number of reasons. In all cases, cells who's\nedits are to be rejected should be returned to\nthe manager in the cell_status 'EDIT_FAILED' and\ntheir 'edit_error' property should be set.\n\nFinally, cells can be clicked by incrementing\ntheir click_count property. These clicks are\npassed on to the service using the same mechanics\nas cell editing. What clicking a cell does (if\nanything) is determined by the service.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.gradesock\n\u2502             \u2502            \u2502ClientState    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.gradesock           \u2502\n\u2502             \u2502ServiceState\u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.gradesock           \u2502\n\u2502             \u2502ClientState \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 PUB   via \u2192\u2502               \u2502\n\u2502             \u2502client.gradesock            \u2502\n\u2502             \u2502ClientState \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 3], ["", 42], ["", 43], ["#next", 13]]]
[35, "Closing remarks\n\n  Have fun! Go VEGAN! And fuck capitalism!\n\nMany people, upon hearing the phrase, \"fuck\ncapitalism\" think of communism. Soviet\nCommunism to be precise. But in communist\nRussia they still used money, and if you're\ntrying to fuck capitalism, and you're still\nusing money, than you're not doing it right.\n\nYou fuck capitalism by buying less shit\nyou don't need. By making things yourself.\nBy growing your own food. By making/doing\nthings for others for free. By cooperating\nwith others to do things in a mutually\nbeneficial fashion without the use of money.\nBy squating abandoned buildings, by eating\nfrom the dumptser.\n\nMy vision for a new society:\n\nWithin capitalism, it is very hard to trust\npeople. You never know if someone is being\nhonest, or if they are trying to sell you\nsomething. True friendship exists only in a\nnon-comercial context and the best things\nin life are anarchy already.\n\nIf a few people fuck capitalism, then they\ncan be friends, real friends, true friends.\nAnd they can enjoy eachothers company and\nmake some free stuff that everyone can\nenjoy. That's a good thing.\n\nIf more people fuck capitalism, then that's\neven better.\n\nAnd if everyone fucks capitalism, then we\ncan all walk around in toe shoes playing\nfrisbee on abandoned superhighways, eating\nfree VEGAN pizza baked by the fully\nautomated GNU Pizamaker, and we can smile at\neachother in the sunshine, knowing that\nwe're all friends and no one's trying to\nsell us shit or take over.\n\nIT ALWAYS MAKES SENSE TO FUCK CAPITALISM!", []]
[36, "What about Ted Nelson's ZigZag\u00ae \n\nGradesta shares the same goals as, and a very\nsimilar achitecture to, the gzz project and more\ngenerally, Ted Nelson's patented zzstructure.\nhttp://www.nongnu.org/gzz/index.html\n\nThe data structure behind gradesta, being a graph\nof stacks, is similar, but not the same as,\nzzstructure.\n\nThe gzz, and ZigZag projects were destroyed by\na combination of poor team culture, patents,\nand trademarks. While I beleive that the\nprogrammers who worked on the project origionally\nwere incredibly skilled and wrote quality code,\nI decided to create gradesta from scratch, in\npart to distance myself from the hard feelings\nof the past (though the patent is now expired).\n\nThe second reason for starting from scratch\nis that gzz was too ambitious. It included\nversion control as a core feature, where-as\ngradesta wishes to leave version control as\na 3rd party utility.\n\nFurthermore, I personally found the multi-\ndimensionality of zzstructures to be disorienting.\nThey reminded me of the following quote from\nEnders Game:\n\n\"He found that a great deal of what he learned at\nBattle School transferred to the simulator. He would\nroutinely reorient the simulator every few minutes,\nrotating it so that he didn't get trapped into an up-down\norientation, constantly reviewing his positoon from\nthe enemy point of view. It was exhilarating at last to\nhave such control over the battle, to be able to see \nevery point of it.\"\n\nI tried doing this with Age of Mythology after reading\nthat passage. It didn't help my tactics. It just left\nme feeling stupid and confused. I had the same feeling\nwith gzz.\n\nI'd much rather have a canonical representation in which\nat least one of the dimensions never changes. As a user,\nI need something to hold on to. Even if its totally\narbitrary. I need know that the enimies gate is down.", [["#next", 9]]]
[37, "Cells and their metadata\n\nCells are always stored in a map mapping cell_id's\nto Cell objects. 'cell_id's are typically a freshly\ngenerated uuid4 string, but can be any string\nwhich does not contain the following characters:\n'\\n', '/', '.'.\n\nCell objects have the following fields:\n\n'data') contents of the cell.\n\n'encoding') Encoding of cell contents.\n\n'mime') mime-type of cell contents.\n\n'up', 'down', 'left', and 'right' links) links\nto other cells in the graph. The 'up' and 'down'\nlinks are simply cell_ids and can only point\nto other cells within the same graph. The 'left'\n'right' links, however, can point to cells both\nwithin the current graph and to cells outside of\nit.\n\n'related') links to other cells which are related\nto this one. Unlike the other vertexes, related\nlinks are only one way. Related cells are typically\nthe same (aka, have synchronized contents) or at\nleast represent the same entity as the cell that\nlinks from them.\n\nFor example, if you have an email client in\nwhich email is a Cell, and there are views for\nthreaded email sorting, date based sorting,\nand coorespondent based sorting, than you can\nuse the related list to jump between these\n\"versions\" of each email's Cell. In another\nexample of related use, imagine that you have a\ngraph of all the tram lines in Prague, and you\nhave another graph of all the subway lines in\nPrague. Obviously, many of the stations will\nbe the same. You can use related links to jump\nfrom a metro station to a tram station in the\nsame location.\n\n 'tags' ) are used for grouping cells in a visual\neditor or for whatever use you find interesting.\nThey may contain no whitespace.\n\n 'coords' ) this option encodes the coordinates of\nthe cell within a virtual space. It is strongly\ndiscouraged to use this option, and most clients will\nnot respect this option, choosing rather, to layout\nthe cells in an algorithmic fashion. Furthermore, most\nservices will not save this option. Clients which\ndo take the cell's coords into account are considered\nto be \"floating\" clients, where-as clients which layout\nthe cells algorithmically will be refered to as tiling.\nThe order of coordinates is x,y,z... more than three\ndimensions is possible if you're so creatively\ninspired.", [["", 3], ["#next", 106], ["", 19], ["", 13]]]
[38, "The Selection object\n\nSelections are used to store what a client has selected or is\nlooking at. Each selection contains a collection of cursors which\npoint to cells in the graph.\n\nSelections are stored in a map in which the key is the cursor_id\na unique string, typically a uuid4. This map can be either a\nskeleton map in which only the 'name' field of this object is\nstored or a full map in which all changed fields are stored.\n\nSelections have the following properties:\n\nname:            The human readable name of the selection. A client\n                 may not have two selections with the same name. But\n                 two different clients may each have differnt\n                 selections with the same names. \n\ncursors:         List of cursors to cells in the selection.\n\nupdate_count:    The number of times this selection has been updated.\n                 Clients must increment this number each time they\n                 modify a selection.\n\nclients:         This maps clients to their relationship with the selection.\n                 The distinction between PRIMARY and SECONDARY selections is\n                 that PRIMARY selections are selections which have been\n                 created by a given client where-as SECONDARY selections\n                 were created elsewhere and are either being folowed\n                 or \"joined\". It is possible for clients to specify\n                 selections as INTERNAL. INTERNAL selections usually don't\n                 make sense to be shared or to be seen by the user.\n                 When a client no longer wishes to use a selection it should\n                 set its status to NONE.", [["", 47], ["#next", 17], ["", 64]]]
[39, "Pattern of communication\n\nThe gradesta protocol functions via the passing\nof changes to a data structure which represents\nthe protocol's shared state. Basically, you should\nthink of it as a patching system. At first, you\nshare the original document, and after that, you\njust send diffs back and forth.\n\nThere are two levels of data synchronization\nwithin the protocol, complete, and partial.\n\nBecause graphs can be arbitrarilly large,\npotentially infinite in size, it is impossible\nfor them to be synchronized completely.\n\nInstead, clients may place a cursor in the \ngraph and subscribe to cells which are near\nthat cursor. Cells are sent on the wire as\na map, which can be merged with the entpoint's\ncell map.\n\nCells may be bookmarked. The number of bookmarks\nis limited, and therefore the full list of\nbookmarks is always synchronized. However this too\nis represented as a map which is updated with\nmap-diffs.\n\nClients may also wish to see the cursor's of\nother clients. Cursors are stored in maps on\na per-client basis. Each client can see a\nskeleton map of the other client's cursors,\nbut cannot see their locations so as to prevent\nthe manager from needlessly forwarding cursor\nlocation updates to every other client. Instead,\neach cursor has an id and if two clients share\ncursors with the same ID, these cursors become\nlinked. If 'client a' has a cursor with id \"uuid-foo\"\nand 'client b' wants to see where that cursor is,\nit can create a cursor which also has id \"uuid-foo\"\nand 'client b' will now receive updates from the\nmanager as to \"uuid-foo\"'s location. Furthermore,\n'client b' can control 'client a's \"uuid-foo\" cursor\nby adding its own \"uuid-foo\" cursor and setting that\ncursor's location.\n\nThe shared state is stored in a hierarchy with\nthe ClientState being at the root and the\nServiceState being contained within the\nClientState.\n\nAs each type of state is child to the last,\neach type of state is simpler than the last.\n\nThis goes in line with the gradesta philosophy\nthat as much work as possible should be passed\noff to the manager, which need be written only\nonce. And that clients, which are less numerous\nthan services, can be granted a little more\nresponsibility.\n\nThe ServiceState, however, is intended to be\nas simple as conceivably possible.", [["", 42], ["", 43], ["#next", 67]]]
[42, "message ClientState {\n optional ServiceState  service_state    = 1;\n map <string,Client>    clients          = 2;\n optional Manager       manager          = 3;\n map <string,Selection> selections       = 4;\n}", [["#", 43], ["#", 46], ["#", 174], ["#", 47]]]
[43, "message ServiceState {\n // Map cell_id to CellRuntime object\n map <string,CellRuntime> cells                =  1;\n optional CellRuntime     cell_template        =  2;\n // Map bookmark_name to Bookmark object\n map <string,Bookmark>    bookmarks            =  3; \n enum OnDiskState {\n  READ_ONLY = 0;\n  SAVED     = 1;\n  MODIFIED  = 2;\n }\n \n optional OnDiskState     on_disk_state        =  4;\n map <string, Round>      rounds               =  5;\n map <string, Query>      queries              =  6;\n map <string, string>     error_log            =  7;\n optional ActorMetadata   metadata             =  8;\n}", [["#", 119], ["#", 45], ["#", 177], ["#", 179], ["#", 147]]]
[44, "Bookmarks\nIf the service provides a graph, but does not\ngive any context as to what is in the graph\nit is impossible for a client to find\nany cells. Without knowing where to start when\nwalking a graph, it is impossible for the \nclient to display anything at all to the user.\n\nIn order to solve this problem, the concept of\nbookmarks is introduced. A bookmark maps a human\nreadable name to a cell_id, and stores that name\nand cell_id in a central map so that cells can be\nfound when needed.\n\nThe map of bookmarks is stored in the ServiceState.\nThis map must never be empty.\n\nA bookmark's Status is used for map updates to delete\nbookmarks, but may also be used by the service or\nmanager to communicate to a client that a bookmark that\nit is trying to create or set points to a NON_EXISTANT\ncell. The status may also be set to NON_EXISTANT by the\nservice if the cell that the bookmark points to is\ndeleted. ", [["", 45], ["#next", 48], ["", 49]]]
[45, "message Bookmark {\n repeated string cells   = 1;\n enum Status {\n  NORMAL       = 1;\n  DELETED      = 0;\n }\n \n optional Status status  = 2 [default = NORMAL] ;\n}", []]
[46, "message Client {\n enum Status {\n  NORMAL         = 1;\n  INITIALIZING   = 2;\n  DISCONNECTING  = 0;\n }\n optional Status         status             = 1 [default = NORMAL];\n optional ActorMetadata  metadata           = 2;\n}", [["#", 147]]]
[47, "message Selection {\n optional string     name               = 1;\n repeated Cursor     cursors            = 2;\n optional uint64     update_count       = 3;\n enum Status {\n  PRIMARY      = 1;\n  SECONDARY    = 2;\n  INTERNAL     = 3;\n  NONE         = 0;\n }\n // Map client_id to selection status\n map <string,Status> clients            = 4;\n}", [["#", 99]]]
[48, "Setting bookmarks\n\nClients may set bookmarks by passing an entire\nbookmarks list to the master. Similarly, services\nmay set bookmarks by doing the same. This entire\nnew bookmarks list is forwarded to all other\nparties.", [["#next", 49]]]
[49, "Getting bookmarks\nBookmarks are automatically sent to the clients.\nIf the client receives a list of bookmarks, it\nshould consider that list to be definitive and\nup-to-date. If the list of bookmarks is empty,\nthen the empty list should be ignored, and any\npreviously received bookmarks list should be used\ninstead. Bookmarks do not need to be explicitly\nrequested.", [["#next", 65]]]
[51, "Opening Links\n\nFrom the client side:\n\nThere are two types of links. Local links and\nexternal links. Local links have '.' as their\npath. External links have any other string.\nIf the link is a local link, the client should\nopen it by simple jumping to the 'cell_id'.\nHowever, if it is an external link, the client\nshould open it using the 'gradesta-open-link'\nexecutable. The executable should be launched\nwith the same CWD as the client. It should have\nthree arguments, the service string, the path,\nand the cell_id.\n\nService side (AKA popup services):\n\nNot yet specified.", [["#next", 81]]]
[52, "Architecture of local services", [["", 53]]]
[53, "service.gradesock", [["PULL", 113]]]
[56, "manager", [["PUSH", 53], ["PUSH", 57], ["PUSH", 58], ["PUSH", 59]]]
[57, "clients/client1/client.gradesock", [["PULL", 111]]]
[58, "clients/client2/client.gradesock", [["PULL", 109]]]
[59, "clients/client3/client.gradesock", [["PULL", 107]]]
[60, "Architecture for internet services", [["", 61]]]
[61, "service", [[" manager.gradesock", 63]]]
[63, "manager", [[" service.gradesock", 61], [" SSL sock", 70], [" SSL sock", 74], [" SSL sock", 75]]]
[64, "Watching and sharing cursors\n\nIt is often usefull for one client to\nfollow the cursor of another client or\neven to share a cursor with another client.\nFor example, a graphical text viewer may\nbe configured to center it's view around\nthe cursor of a text based graph editor.\n\nA step through debugger, posing as a client\nmay make a cursor available which points\nto the currently executed cell.\n\nIt is therefore necessary that clients\nbe able to see the cursors of other clients.\nIt seemed excessive to inform all clients of\nevery movement of a cursor by another client.\nTherefore, only clients which explicitly share\ncursors are notified when a cursor changes. \nThis is accomplished by allowing multiple\nclients to have cursors with the same id.\nWhen two clients have a cursor with the same\nid, these cursors are joined, and when one\nof the clients updates that cursor, the other\nis notified of the change by the manager.", [["", 42], ["#next", 148]]]
[65, "The Client object\n\nThe Client object's main purpose is to track\nthe Client's cursors.\n\nThe Client object has the following fields:\n\n'status') This can be one of\n  NORMAL:        This is almost always the satus.\n  INITIALIZING:  Set once by the client for the first\n                 message from that client. Also sent by\n                 the manager to other clients in order\n                 to inform them of the new client.\n  DISCONNECTING: Set one by the client for the last\n                 message from that client. Also sent\n                 by the manager to other clients to \n                 inform them of the \ndisconnection.\n\n'metadata') stores information about the client binary.", [["", 46], ["#next", 38]]]
[66, "The ServiceState object\nis the only interface between the service and\nthe manager/client. It is intentionally as simple\nas possible. It only has three fields.\n\n'bookmarks') the bookmarks to important cells in\nthe current graph.\n\n'cells') the exact contents of this field vary\ndepending on the point of view. From the client's\npoint of view, this field contains cells that it\nhas \"subscribed to\" by placing a Cursor on or near\nthem. From the services point of view, this field\neither contains Cells which are being set, or Cells\nwhich are being subscribed to or unsubscribed from.\nThe service can tell the difference between those\npossibilities by looking at the 'cell_status' in the\nCell.Runtime. If the 'cell_status' is NORMAL then the\nCell is being set, created, or updated. If the\n'cell_status' is IN_VIEW or OUT_OF_VIEW then the Cell\nis either being subscribed to, if IN_VIEW, or\nunsubscribed from if OUT_OF_VIEW.\n\n'saved') this flag marks whether the in-memory contents\nof the graph have been saved to disk. When this flag is\nset to true by a client, the graph is saved. If the service\nauto-saves the graph, or there is nothing to save, the\nservice should always set this flag to true. Whenever the\ngraph is changed, the service should set the flag to false.\n\n'graph_generation') this number represents the number\nof times the service has registered a change to the graph's\nstate. This is used by the manager to ensure consistency\nwhen passing on cell data to clients.\n\n'error_log') maps times to error strings.\n\n'processed_requests') how many requests sent by the manager\nhave been processed by the service?\n\n'metadata') stores information about the service binary.", [["", 43], ["#next", 37]]]
[67, "Starting up/shutting down", [["#next", 68], ["", 117], ["", 69], ["", 115]]]
[68, "Service startup\nWhen a service starts up and launches the\nmanager, the the manager contacts the service,\nonce with a blank state. The service replies\npassing the graph's bookmarks and the service_name.\n\n1) REQ Manager -> Service\n   no fields set\n\n2) REP Service -> Manager\n   service_name\n   bookmarks", [["#next", 117]]]
[69, "Client startup\nWhen a client is launched, the first thing that\nhappens after the sockets have been created is\nthat the client contacts the manager, passing a\nnewly clreated client_id and the human readable\nclient name.\n\nThe manager then responds with the list of\nbookmarks and the service_name.\n\nThe once the client sees the bookmarks it\ncan start placing cursors.\n\nThe client places the cursors using a REQ,\nbefore the manager responds to this REQ, it\nregisters cell subscriptions with the service,\nas necessary, and gathers whatever cell\ncontents need to be passed on to the client.\nThe manager then sends the requested cells\nto the client in the REP.\n\n1) REQ Manager -> Client\n   service_name\n   bookmarks\n   clients (with skeleton cursors)\n\n2) REP Client -> Manager\n   nothing\n\n3) REQ Client -> Manager\n   client_id\n   client_name\n   cursors\n\n4) REQ Manager -> Service\n   cells\n\n5) REP Service -> Manager\n   cells (repeate 4 and 5 as necessary) \n\n6) REP Manager -> Client\n   cells\n\n", [["#next", 115]]]
[70, "manager-proxy", [[" SSL sock", 63], [" client.gradesock", 71], [" client.gradesock", 72], [" client.gradesock", 73]]]
[71, "client", [[" manager.gradesock", 70]]]
[72, "client", [[" manager.gradesock", 70]]]
[73, "client", [[" manager.gradesock", 70]]]
[74, "manager-proxy", [[" SSL sock", 63], [" client.gradesock", 76], [" client.gradesock", 77]]]
[75, "manager-proxy", [[" SSL sock", 63], [" client.gradesock", 78]]]
[76, "client", [[" manager.gradesock", 74]]]
[77, "client", [[" manager.gradesock", 74]]]
[78, "client", [[" manager.gradesock", 75]]]
[80, "Graph serialization\n\nThe simplest form of gradesta graph serialization\nis to serialize the graph using protobuf, to a\nGraphState object.\n\nThis is an efficient way to serialize a graph, it is\nboth small in size and quick to parse. However, it\nis not a very usefull method if you wish to check your\ngraph in to a version control system and acheive readable\ndiffs.\n\nFor that reason, the gradesta standard also comes with\nits own, custom, textual, serialization format named\ngratexta (.gt). The goal of the format is to provide a\nsimple, human readable, human editable format in which\nthe cell text is unescaped and rendered with newlines\nin-tact so as to allow line based diffing algorithms to work.\n\nThe format is custom because none of the popular serialization\nformats that were analyzed at the time of specification supported\narbitrary multi-line binary strings. Yaml's | format does not support\nmulti-line strings beggining with whitespace. TOML's ''' multi-\nline strings do not support strings containing three single quotes.\nThe only format with usable multiline strings that was found was\nRFC 5322, which unfortunately is limited to 7 bit ASCII and supports\nneither nested dictionaries nor arbitrary single line strings nor\narbitrary dictionary keys.\n\nWanting a well defined, extensible, easilly parsed format, however,\nit was decided to extend YAML rathern than create an entirely new\nformat.\n\nIn order to further reduce the burden of parsing a custom format,\ngratexta2protobuf and protobuf2gratexta utilities are provided.\nIf you are creating a service which needs to edit a gratesta graph\nit may be better to stack your service ontop of a standard gratesta\nservice rather than to support the gratesta file format directly.\n\nThe gratexta format consists of a stream of YAML documents. The first\ndocument is a mapping of bookmark names to destinations.\n\nThe documents which follow represent gradesta cells. Each cell\ndocument may be followed with a multiline cell text field. If\nthis field does not exist, the cell is assumed to be empty.\n\nEach line of the multiline cell text field is prepended with the\n',' character. No escaping is necessary.\n\nParsing a gratexta file with the help of a standard YAML parser\nis easy. First split the file at each line consisting of only\n\"---\". Then remove the first and second segments. These segments\nrepresent the whatever came before the first YAML document and the\n\"bookmarks\" document. Parse the bookmarks document using your YAML\nparser. Then split remaining segments the line \"...\". You should\nnow have a list of tuples, the first of which represents the cell's\nattributres, and the second of which represents the cell's text.\nParse the \"car\"s or \"heads\" of these tuples with a YAML parser, and\nparse the \"cdr\"s or \"tails\" by ignoring lines not starting with \",\"\nand appending all lines starting with \",\" removing the \",\" as you\ngo. \n\nHere is an example gratexta file.\n\n---------START EXAMPLE gratexta file------------------------------\n---\n\"<bookmark-name>\": <cell-id-of-destination>\n\"<another-bookmark-name>\": <cell-id-of-destination>\n...\n\n---\n<cell-id>\n up       : <id-of-destination>\n down     : <id-of-destination>\n left     : <service-name>/<graph-path>/<id-of-destination>\n right    : <service-name>/<graph-path>/<id-of-destination>\n mime     : text/plain\n encoding : UTF8\n\n related:\n  \"foo bar\": <service-name>/<graph-path>/<id-of-destination>\n  \"baf baz\": <service-name>/<graph-path>/<id-of-destination>\n...\n,Cell\n,text\n,\n, \n,in\n,multi-line\n,block\n---\n<next-cell-id>:\n up     : <id-of-destination>\n down   : <id-of-destination>\n left   : <service-name>/<graph-path>/<id-of-destination>\n right  : <service-name>/<graph-path>/<id-of-destination>\n mime     : text/plain\n encoding : UTF8\n...\n,Cell\n,text\n,in\n,multi-line\n,block\n,prepended with ',' and ended \n,by the start\n,of a new YAML document\n,or the end of the document\n---------END EXAMPLE----------------------------------", [["", 170], ["#next", 120]]]
[81, "Resolving service names\n\nThe gradesta-open-link executable resolves\nservice names by looking them up in a JSON\ndictionary which maps service names to executable\npaths. The gradesta-open-link executable will\nfirst attempt to look up service names in the\nfollowing locations.\n\n1) ~/.gradesta/services.json\n2) /etc/gradesta/services.json\n3) /etc/gradesta/services.d/*.json (searched in alphabetical order)\n3) /usr/share/gradesta/services.d/*.json (searched in alphabetical order)", [["#next", 44]]]
[82, "Telling the service to save the graph\n\nClients may direct the service to save the graph\nto disk by setting the 'saved' flag of the ServiceState\nobject to true.\n\nClients may save-as a graph by launching the\ngratesta-save-as executable with the first argument\nset to the path of the service directory of the\nservice who's graph is to be saved and the second\nargument set to the real file system path to which\nthe graph is to be saved. There are also flags for\nspecifying cursors within the graph to be save-as'ed\nso as to allow for the save-as'ing of parts of infinite\ngraphs or the save-as'ing of individual graphs of a\nmulti-graph.\n\nThe gratesta-save-as executable will imediately save\nthe graph to a file and exit. If the client then wishes \nto open a new service to serve the save-as'ed graph, it\nshould do so as it would normally open a gratesta file.", [["", 66]]]
[83, "Stacking services\n\nIt is often desireable to \"stack\" services ontop\neachother. This is done in the obvious way, a stackable\nservice acts as a client to another service. No magic,\nnothing.\n\nStacking is done, for example, when producing an IDE\nservice which adds functionality ontop the standard\ngratesta service, or when creating utility services\nsuch as interactive search and replace services or\ninteractive graph manipulation/simplification services.", [["", 84], ["#next", 80]]]
[84, "Architecture of stacked services", [["", 85]]]
[85, "bottom service", [[" manager.gradesock", 88]]]
[88, "manager of bottom service", [[" client.gradesock", 89], [" service.gradesock", 85]]]
[89, "stacked service", [[" manager.gradesock", 91], [" manager.gradesock", 88]]]
[91, "manager of stacked service", [[" client.gradesock", 92], [" client.gradesock", 93], [" client.gradesock", 94], [" service.gradesock", 89]]]
[92, "client to stacked service", [[" manager.gradesock", 91]]]
[93, "client to stacked service", [[" manager.gradesock", 91]]]
[94, "client to stacked service", [[" manager.gradesock", 91]]]
[95, "Copyright #2\nThough the gradesta project is licensed under\nthe AGPLv3, it is permisible to use this\nprotobuf file in non-AGPL licensed applications\nin order to ensure protocol compatibility,\ngranted that this file remains unmodified.\n\nIf your legal team has a recomendation as to\nhow this could be phrased better, please let\nme know.\n\nTimothy Hobbs", [["#next", 2]]]
[96, "About gradesta using simple writer\nhttps://xkcd.com/simplewriter/\n\nGraphs are a set of things where each thing points\nto other things in the graph. Kind of like how \nroads go from one city to another. There can be \ndirected graphs in which the roads are one way. Or \nthere can be undirected graphs in which the roads \nall go both ways. Gradesta graphs are a special \nkind of directed graph called a doubly linked \ndirected graph. This is a kind of graph in which \nthe roads all go only one way, but there is always \na road going back for every road going forward. You\ncan still tell which way is forwards and which way \nis back though because the roads that go back \nalways go to the left and the roads that go forward\nalways go to the right.\n\nGraphs can be cyclic or non-cyclic. If a graph is \ncyclic, that means that if you keep on going the \nsame way down the roads sometimes you will get\nback to where you started. If a graph is non-cyclic, \nthat means that you will never get back to where \nyou started unless you change directions. In \ngradesta graphs, if you go only up or only down, \nyou will never get back to where you started. But \nif you go left or right, you might get back to \nwhere you started.\n\nGradesta graphs can be very large, even so large \nthat they do not end. This means that gradesta \nneeds to be a protocol and not just a new kind of \nfile. If there was a graph that was so large it did\nnot end, how would you save it to a file? And when \nthe graphs are so large, that they cannot be saved,\nhow can you offer them as a protocol? You could \nmake a protocol which had many ways to ask for \nparts of the graph. You would ask for one thing \nfrom the graph, then ask for another. You could \nthen ask the service to tell you if anything in the\ngraph changed. This would be the normal way to make\na protocol like that. The problem with this way of \nmaking a protocol is that if a person wants to see \nthe things that are near a given thing they need to\nbe able to go a short way in each direction. This \nseems very easy, but it is pretty hard. This is \nreally hard when you want to ask over the Internet,\nbecause you would have to ask for every thing next \nto your thing, and then you would have to ask for \neverything next to the next to things. And each \ntime you would send your questions over the \nInternet. This would be slow. So instead of asking \nfor each thing one thing at a time, it is much \nfaster and simpler for a client to ask for all the \nthings near a thing.\n\nFiguring out what things are near a thing is so \nhard that I decided that it is better to not force \nclients or services to need to know how to figure \nit out. Instead, I made it so that there is a \nmanager, which is a program that sits between the \nclients and the service and figures that out. The \nmanager also helps make sure that the clients work \ntogether well. The managers job is to do all the \nhard jobs. This is because there is only one kind \nof manager, and you only need to figure out those \nhard problems once. In fact, the services job is so\neasy that it does not even need to know that there \nis more than one client, the manager talks to all \nthe clients and then talks to the service as if \nthere was only one. That way new clients and \nservices are very easy to make.\n\nThe gradesta protocol is also different from a \nnormal asking protocol in other ways. You could say\nthat gradesta is not an asking and telling protocol\nbut a saying protocol. A client does not ask for \neach thing near a thing one at a time but says that\nit wants to look at all things near a thing. When \nit wants to change a thing, it does not tell the \nservice to change the thing, but it says that a new\nthing has the same name as an old thing. This means\nthat the language that the service uses is the same\nas the language that the client uses. When the \nclient asks for a thing, the service sends the \nthing the same way as the client would send a new \nthing or a changed thing to the service.\n\nThe protocol is also a counting protocol. The \nclient and service count how many times each thing \nchanges. If two clients change a thing at the same \ntime, they will both count up by one. Then you will\nhave two different things with the same number. \nThen you know something has gone wrong and you pick\none thing and you tell the client which sent the \nother thing that it was too slow. The manager makes\nsure that the changes are counted correctly. \nAnother hard job the manager does for everyone \nelse.\n\nMessages are also counted. This is actually how\nthe manager knows which client sent a message. The \nclient who's number of messages went up is the \nclient who sent it. Counting protocols are good \nbecause it is easier to find out what went wrong \nwhen things don't work. Sometimes you can see what \nwent wrong just by looking at the numbers of \nchanges or mesages and seeing that they are too big\nor too small.\n\nSince gradesta is a saying protocol, it is possible\nfor a client to see what other clients are looking \nat. This is because each client says what thing it \nis looking at by just saying its name and saying \nwhat it looks at. The manager then tells everyone \nwhat everyone else is looking at. This can be used \nin many ways. If you want to follow a client and \nshow what it is looking at in a different way, you \ncan. If you want to show another client what you \nare looking at, you can. If there is a client who's\njob is to find problems, then the client can say it\nis looking at those problems, and the other clients\ncan look at those problems too. If a client is an \ninterpreter which is walking through a graph of \ncode then the other clients can follow it.\n\nIf you have a graph of things but you do not know \nwhat things are in the graph then how do you ask \nfor anything? How can you say you are looking at \nsomething if you do not know what is there to look \nat? In gradesta we fix this problem by making a \nlist of all of the most important things in the \ngraph. Maybe the first thing ever created in the \ngraph would be in that list. These important things\nhave names. This list is called \"bookmarks\".", [["#next", 8]]]
[97, "Shutting down services\n\nIf you want, set the saved flag to true. Then SIGTERM.", [["#next", 96]]]
[98, "The ClientState object\n\nThe ClientState object consists of two fields:\n\n'clients') maps client_ids to Client objects. This map is\nsent to clients by the manager in full when a client starts\nup. However, this map can only contain one entry when sent\nby a client, that entry should be the entry for the client\nwhich sent the message.\n\n'selections') maps selection_ids to Selection objects. \n\n'service_state') a service state object which contains\na partial map of cells and a full map of bookmarks as well\nas service meta-data.\n\n'manager_metadata') stores information about the manager binary.", [["", 42], ["#next", 66]]]
[99, "message Cursor {\n optional string     name               = 1;\n optional string     center             = 2;\n optional uint64     center_stack_depth = 3;\n optional uint32     directions         = 4;\n optional uint64     max_distance       = 5;\n optional uint64     max_cells          = 6;\n repeated DataCursor data_cursors       = 7;\n repeated string     cells              = 8;\n}", [["#", 104]]]
[100, "The Cursor object\ndescribes a way of watching a group of cells which neighbor\na given cell.\n\nCursors have the following properties:\n\nname:            Human readable name/description of cursor.\n\ncenter:          Id of the cell at the center of the\n                 neighborhood.\n\ncenter_stack_depth: Distance from the center cell to go up and down\n                 within the center stack. This over-rides max_distance.\n\ndirections:      This is a binary flag store which records\n                 the initial directions in which the\n                 neighborhood expands from the center. These are:\n\n                 0b0001 NORTH   Upwards  in the stack\n                 0b0010 EAST    Outwards on the eastern edge\n                 0b0100 SOUTH   Downards in the stack\n                 0b1000 WEST    Outwards on the western edge\n\nmax_distance:    Maximum number of edges away from the\n                 center cell at which neighboring cells\n                 are considered to be within the neighborhood.\n\nmax_cells:       Maximum number of cells allowed in the neighborhood.\n\ndata_cursors:    Optionally, clients may specify actual locations within\n                 a cell's data which are pointed to or highlighted.\n\ncells:           The cells within view of this cursor. This is set by the\n                 manager.", [["", 99], ["#next", 105]]]
[104, "message DataCursor {\n optional uint64     index              = 1;\n optional uint64     len                = 2;\n}", []]
[105, "The DataCursor object\n\nindex:      Clients may, if they wish, share an index which points\n            within the cell's data to more closely specify where\n            they are looking. The index can either be a text index\n            or a binary index, according to the specified encoding\n            of the cell. If the encoding is specified as unknown,\n            the index should be a utf-8 index. There is no\n            validation as to whether this index points inside the\n            center cell's actual text.\n\nlen:        The length of the cursor. This is used if a cursor\n            selects a section of data/text, rather than simply\n            pointing to a given point in the data/text.", [["", 104], ["#next", 64]]]
[106, "Cell Runtime state\n\nThe cell Runtime only exists during runtime, but\nis never serialized. The serialized part of the\ncell is intended to be as simple as possible, but\nthe runtime is somewhat more complex. \n\n'editability') Is the cell's text editable or\nread-only? If set to DYNAMIC, the client should\ntry to send a new version of the cell each time\nthe user inserts or deletes a character. The\nclient should also share data cursors when in\nDYNAMIC cells.\n\n'link_editability') Are which edges can be\nmodified? This uses the same direction encoding\nscheme as the cursor directions used by the cursor\nobject, however, it contains one extra dimension,\nencoded as 0b10000 which encodes the \"related\"\ndimension.\n\n'edit_count') This number reprensents\nthe number of times the cell has been modified\nin the current session (or globally if serialized\nby the service). This is updated by the client\neach time it requests a change, and is used to\nensure that there is no data loss when multiple\nclients edit the same cell at the same time.\n\n'click_count') The number of times the cell has been\n'clicked' or 'pressed' in the client.\n\n'status') This is a message passing field. It plays the\nroll of specifying a type of command which is associated\nwith the cell. The command types are:\n\n Universal statuses/commands:\n  'NORMAL') Pass the state of the cell verbatim or request\n  a cell\n  'DELETED') Delete the cell or convey the cell's non-\n  existance.\n\n Manager to service commands: \n  'IN_VIEW') Request the cell and subscribe to any updates\n  /changes made to the cell. If the graph-generation is set,\n  the service need not send the cell again, if no changes have\n  been made since the specified graph-generation.\n  to the cell\n  'OUT_OF_VIEW') No longer subscribe to updates to the cell.", [["#next", 19], ["", 119]]]
[107, "client3", [["PUSH", 108]]]
[108, "clients/client3/manager.gradesock", [["PULL", 56]]]
[109, "client2", [["PUSH", 110]]]
[110, "clients/client2/manager.gradesock", [["PULL", 56]]]
[111, "client1", [["PUSH", 112]]]
[112, "clients/client1/manager.gradesock", [["PULL", 56]]]
[113, "service", [["PUSH", 114]]]
[114, "manager.gradesock", [["PULL", 56]]]
[115, "Client shutdown\n\nOnce the client shuts itself down, the manager will detect\nthat the client's socket is no longer present, and will\npreform all necessary cleanup.", [["#next", 98]]]
[117, "Service shutdown\n\nThe manager will send the service a TERM signal\nafter the last client has disconnected.", [["#next", 69]]]
[118, "Protocol limitations\n\nDue to the way the protocol is designed, service designers\nmust be careful not to push changes to graph topology with\nexcessive frequency. If the service pushes changes the\ntopology of the graph too quickly, the manager will cycle\nindefintely trying to synchronize the new topologies, and the\nclients will never receive any messages from the manager.\nServices should not make changes to graph topology more frequenlty\nthan once every couple of hundred milliseconds. Note, that this\nlimitation does not apply to self regulating topology change\ncycles. In the case of a networked, massively multi-user graph\neditor, for example, it is possible that some users with slower\nconnections could be \"shut out\" of the system, because their\nmanagers would never complete state synchronization, however\nmost users will by definition be able to view and edit the\ngraph, because the rate of edit's is self regulated by the\nuser's own ability to edit the graph. If no user's manager is\nable to synchronize quickly enough, than no edits will be\nmade, and therefore the rate of toplogy change will necessarilly\nslow ;) ", [["#next", 82]]]
[119, "message CellRuntime {\n optional Cell        cell                     =  1;\n optional uint64      edit_count               =  2;\n optional uint64      graph_generation         =  3;\n optional uint64      click_count              =  4;\n optional bool        dynamic                  =  5;\n enum Status {\n  NORMAL       = 1; // universal\n  IN_VIEW      = 2; // manager -> service\n  OUT_OF_VIEW  = 3; // manager -> service\n  DELETED      = 0; // universal\n }\n optional Status      status                   =  6;\n\n // Map field_id to Supported enum\n map <uint64, Supported> supported_cell_fields =  7;\n map <uint64, Supported> supported_link_fields =  8;\n}", [["#", 3], ["#", 173]]]
[120, "Additions and changes to the Gradesta protocol\n\nThe following rules and restrictions apply \nwhen proposing changes to the gradesta protocol:\n\n1) Changing or extending the gradesta protocol\nis strictly forbidden.\n\n2) Anyone who even considers such proposing a\nchange shall be chased from town by a mob of\npaintbrush weilding bicyclists\n\n2) Proposals must be composed in Iambic pentameter\n\n3) Proposals must be sung to a tree of at least\n200 years of age\n\n4) Video evidence of the recital must be\nincluded along with the proposal text", [["#next", 96]]]
[147, "message ActorMetadata {\n optional string name       = 1;\n optional string source_url = 2;\n}", []]
[148, "Actor metadata\n\nThe actor metadata object holds metadata associated with\na service, manager, or client.\n\nIts fields are: name and source_url. The source_url field\nis intended to enable AGPL compliance.", [["", 147], ["#next", 118]]]
[170, "message GraphState {\n map <string,Cell>        cells                = 1; // Maps cell_id to Cell object\n map <string,Bookmark>    bookmarks            = 2; // Maps bookmark_name to Bookmark object\n}", [["#", 3], ["#", 45]]]
[171, "The Notification object\nThis object is shared between the manager-kernel and\nthe notification manager.\n\nThis consists of the updates to the client_state and the\nlist of clients who are to receive the updates.", [["", 172]]]
[172, "message Notification {\n optional ClientState  client_state         = 1;\n repeated string       recipients           = 2;\n}", [["#", 42]]]
[173, "enum Supported {\n  READ_ONLY = 0;\n  EDITABLE = 1;\n }", []]
[174, "message Manager {\n optional ActorMetadata metadata = 1;\n}", [["#", 147]]]
[175, "The Manager object", [["", 174]]]
[176, "message MessageFromClient {\n optional ClientState client_state          = 1;\n optional string      origin                = 2;\n}", []]
[177, "message Round {\n optional string client_of_origin = 1;\n optional string errors           = 2;\n optional uint64 request          = 3;\n}", []]
[178, "The round object\n\nRequests are made by clients and processed by the\nservice. They are stored in the ServiceState as a\nmap mapping from a uuid4 request_id to a Request\nobject.\n\nThe request object consists of the id of the client\nwhich originated the request and a string containing\nany errors which occured when processing the request.\nThe service should leave ensure that the client_of_origin\nstring is still set when responding to a request.", [["", 177]]]
[179, "message Query {\n optional string client_of_origin = 1;\n optional string query            = 2;\n enum Field {\n  ID = 1;\n  DATA = 2;\n }\n repeated Field  what_to_query    = 3;\n enum Type {\n  CONTAINS = 1;\n }\n optional Type   type             = 4;\n repeated string matched_cells    = 5;\n}", []]
