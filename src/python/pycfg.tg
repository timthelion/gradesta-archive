[0, "#pycfg is a compiler which compiles text graph python controll flow graphs to normal executable python code.", [["^#", 23], ["", 12], ["!pycfg", 27]]]
[3, "print_header s\nprint(\"#!/usr/bin/python3\\n#DO NOT EDIT\\n#This file was automatically generated from its textgraph source by pycfg.\",file=s.args.outfile)", [["True; s", 4]]]
[4, "read_line s\nline = s.args.infile.readline()", [["line.startswith(\"#\") or line.isspace(); s", 4], ["line == \"\"; s", 11], ["True; s line", 8]]]
[8, "json_load_line s line\nid,text,streets = json.loads(line)\nline_iter = iter(text.split(\"\\n\"))\nsquare = SimpleNamespace(id=id,line_iter=line_iter,streets=streets)", [["except ValueError as e; s e", 9], ["True; s square", 28]]]
[9, "invalid_json s e\nprint(\"Error on line \"+str(s.fd.lineno()),file=sys.stderr)\nprint(e,file=sys.stderr)", []]
[10, "start_function s square name bag\nprint(\"def %s(*args):\\n\\treturn __py_cfg_call(%i,*args)\\ndef __py_cfg_internal_function_%s(*args):\\n\\ttry:\" % (name, square.id, name), file=s.args.outfile)\ns.squares.append((square.id,name))", [["bag == []; s square", 30], ["True; s square name bag", 57]]]
[11, "print_end s\nprint(\"__py_cfg_squares = {\"+\",\".join(map(lambda sqr: str(sqr[0])+\":__py_cfg_internal_function_\"+sqr[1],s.squares))+\"}\",file=s.args.outfile)\nprint(\"def __py_cfg_call(__py_cfg_square,*args):\\n\\t__py_cfg_bag = list(args)\\n\\twhile __py_cfg_square is not None:\\n\\t\\t__py_cfg_square,__py_cfg_bag = __py_cfg_squares[__py_cfg_square](*__py_cfg_bag)\\n\\treturn __py_cfg_bag\", file=s.args.outfile)", [["s.args.in_function; s", 24], ["True; s", 25]]]
[12, "#imports\nimport sys\nimport fileinput\nimport json\nimport argparse\nfrom types import SimpleNamespace", []]
[23, "", []]
[24, "return_value s\nprint(\"return __py_cfg_call(0,[])\",file=s.args.outfile)", []]
[25, "just_run s\nprint(\"__py_cfg_call(0,[])\",file=s.args.outfile)", []]
[26, "parse_args s\nparser = argparse.ArgumentParser(description='pycfg compiler. Compile pycfg textgraphs to runnable python code.')\nparser.add_argument('-f','--in-function', action='store_true',help='Compile a code snippet that is intended to be inserted into a function.')\nparser.add_argument('infile', nargs='?', type=argparse.FileType('r'), default=sys.stdin)\nparser.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout)                   \ns.args = parser.parse_args()", [["True; s", 3]]]
[27, "initialize_state\ns = SimpleNamespace(squares=[],args=None,fd=None)", [["True; s", 26]]]
[28, "take_first_line s square\nline = next(square.line_iter)", [["except StopIteration; s square", 29], ["line.strip() == \"\"; s square", 29], ["True; s square line", 35]]]
[29, "blank_square s square\nname = \"__pycfg_anon_function\" + str(square.id)\nbag = []", [["True; s square name bag", 10]]]
[30, "print_function_line s square\nl = next(square.line_iter)\nif l.strip().startswith(\"return \"):\n  l = l.replace(\"return \",\"return None,\", 1)\nprint(\"\\t\\t%s # \u25a1:%i\" % (l,square.id),file=s.args.outfile)", [["except StopIteration; s square", 31], ["True; s square", 30]]]
[31, "close_out_function_body s square\nprint(\"\\t\\tpass # \u25a1:%i\" % square.id,file=s.args.outfile)\n#csr = ConditionsReader\ncsr = SimpleNamespace(exceptions=[],conditions=[],streets_iter=iter(square.streets))", [["True; s square csr", 32]]]
[32, "gather_exceptions_and_conditions s square csr\n#cr = ConditionReader\nstreet = next(csr.streets_iter)\ncr = SimpleNamespace(street = street,street_name_iter = iter(street[0]),condition=\"\")", [["except StopIteration; s square csr", 33], ["True; s square csr cr", 36]]]
[33, "print_exceptions s square csr\nfor e in csr.exceptions:\n  print(e)\nprint(\"\\texcept Exception as e:\\n\\t\\traise e\",file=s.args.outfile)", [["True; s square csr", 34]]]
[34, "print_conditions s square csr\nfor c in csr.conditions:\n  print(c)\nprint(\"\\treturn None,None\",file=s.args.outfile)", [["True; s", 4]]]
[35, "get_name_and_bag s square line\nwords = line.split()\nname = words[0]\nbag = words[1:]", [["True; s square name bag", 10]]]
[36, "get_condition s square csr cr\nchar = next(cr.street_name_iter)", [["except StopIteration; square.id cr.street", 37], ["char == \"\\\"\"; s square csr cr", 38], ["char == \";\"; s square csr cr", 42], ["True; s square csr cr char", 56]]]
[37, "malformed_condition id street\nprint(\"Syntax error in street comming form square %i\\n\\n%s\\n\\nMalformed condition. The correct format is <condition>; args to pass on\\nEx: True; foo bar\\nEx1: line.startswith(\\\"lala\\\"); baz boop\" % (id,street[0]), file=sys.stderr)", []]
[38, "read_string s square csr cr\ncr.condition = cr.condition + \"\\\"\"", [["True; s square csr cr", 39]]]
[39, "read_string_char s square csr cr\nchar = next(cr.street_name_iter)\ncr.condition = cr.condition + char", [["except StopIteration; square.id cr.street", 37], ["char == \"\\\\\"; s square csr cr", 40], ["char == \"\\\"\"; s square csr cr", 36], ["True; s square csr cr", 39]]]
[40, "read_string_escape s square csr cr\ncr.condition = cr.condition + next(cr.street_name_iter)", [["except StopIteration; street.id cr.street", 37], ["True; s square csr cr", 39]]]
[42, "read_bag s square csr cr\nbr = SimpleNamespace(bag_items=[],char=None)", [["True; s square csr cr br", 43]]]
[43, "bag_white_space s square csr cr br\nbr.char = next(cr.street_name_iter)", [["except StopIteration; s square csr cr br", 50], ["br.char == \" \"; s square csr cr br", 43], ["True; s square csr cr br", 47]]]
[47, "new_bag_item s square csr cr br\nbr.bag_items.append(\"\")", [["True; s square csr cr br", 48]]]
[48, "bag_item_char s square csr cr br\nbr.bag_items[-1] = br.bag_items[-1] + br.char\nbr.char = next(cr.street_name_iter)", [["except StopIteration; s square csr cr br", 50], ["br.char == \" \"; s square csr cr br", 43], ["True; s square csr cr br", 48]]]
[50, "build_continuation s square csr cr br\ncontinuation = \"return %i,[%s]\" % (cr.street[1], \",\".join(br.bag_items))", [["cr.condition.startswith(\"except \"); s square csr cr continuation", 51], ["True; s square csr cr continuation", 53]]]
[51, "add_exception s square csr cr continuation\ncsr.exceptions.append(\"\\t%s:\\n\\t\\t%s\" % (cr.condition,continuation))", [["True; s square csr", 32]]]
[53, "add_condition s square csr cr continuation\ncsr.conditions.append(\"\\tif %s:\\n\\t\\t%s\" % (cr.condition, continuation))", [["True; s square csr", 32]]]
[56, "condition_char s square csr cr char\ncr.condition = cr.condition + char", [["True; s square csr cr", 36]]]
[57, "unpack_bag s square name bag\nprint(\"\\n\\t\\t[%s] = list(args)\"% \",\".join(bag),file=s.args.outfile)", [["True; s square", 30]]]
