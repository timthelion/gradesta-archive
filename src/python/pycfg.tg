[0, "#pycfg is a compiler which compiles text graph python controll flow graphs to normal executable python code.", [["^#", 23], ["", 12], ["!pycfg", 27]]]
[3, "print_header s\nprint(\"#!/usr/bin/python3\\n#DO NOT EDIT\\n#This file was automatically generated from its textgraph source by pycfg.\",file=s.args.outfile)", [["; s", 4]]]
[4, "read_line s\nline = s.args.infile.readline()", [["line.startswith(\"#\") or line.isspace(); s", 4], ["line == \"\"; s", 11], ["; s line", 8]]]
[8, "json_load_line s line\nid,text,streets = json.loads(line)\nline_iter = iter(text.split(\"\\n\"))\nsquare = SimpleNamespace(id=id,line_iter=line_iter,streets=streets)", [["except ValueError as e; s e", 9], ["; s | square", 28]]]
[9, "invalid_json s e\nprint(\"Error on line \"+str(s.fd.lineno()),file=sys.stderr)\nprint(e,file=sys.stderr)", []]
[10, "start_function s | square name\nprint(\"def %s(__pycfg_bag__,*args):\\n\\treturn __py_cfg_call(%i,__pycfg_bag__,*args)\\ndef __py_cfg_internal_function_%s(__pycfg_bag__,*args):\\n\\ttry:\" % (name, square.id, name), file=s.args.outfile)\ns.squares.append((square.id,name))", [["; s square |", 58]]]
[11, "print_end s\nprint(\"__pycfg_squares__ = {\"+\",\".join(map(lambda sqr: str(sqr[0])+\":__py_cfg_internal_function_\"+sqr[1],s.squares))+\"}\",file=s.args.outfile)\nprint(\"def __pycfg_call__(__pycfg_square__,__pycfg_bag__,*args):\\n\\t__pycfg_hand__ = list(args)\\n\\twhile __pycfg_square__ is not None:\\n\\t\\t__pycfg_square__,__pycfg_bag__,__pycfg_hand__ = __pycfg_squares__[__pycfg_square__](__pycfg_bag__,*__pycfg_hand__)\\n\\treturn __pycfg_hand__\", file=s.args.outfile)\nprint(\"import types\")", [["s.args.in_function; s", 24], ["; s", 25]]]
[12, "#imports\nimport sys\nimport fileinput\nimport json\nimport argparse\nfrom types import SimpleNamespace", []]
[23, "", []]
[24, "return_value s\nprint(\"return __pycfg_call__(0,types.SimpleNamespace(),[])\",file=s.args.outfile)", []]
[25, "just_run s\nprint(\"__pycfg_call__(0,types.SimpleNamespace(),[])\",file=s.args.outfile)", []]
[26, "parse_args s\nparser = argparse.ArgumentParser(description='pycfg compiler. Compile pycfg textgraphs to runnable python code.')\nparser.add_argument('-f','--in-function', action='store_true',help='Compile a code snippet that is intended to be inserted into a function.')\nparser.add_argument('infile', nargs='?', type=argparse.FileType('r'), default=sys.stdin)\nparser.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout)                   \ns.args = parser.parse_args()", [["; s", 3]]]
[27, "initialize_state\ns = SimpleNamespace(squares=[],args=None,fd=None)", [["; s", 26]]]
[28, "take_first_line square\nline = next(square.line_iter)", [["line.strip() == \"\"; square", 29], ["end; square", 29], ["; square line", 35]]]
[29, "blank_square square\nname = \"__pycfg_anon_function\" + str(square.id)\nbag = []\nhand = []", [["; hand bag | square name", 10]]]
[30, "print_function_line s square\nl = next(square.line_iter)\nif l.strip().startswith(\"return \"):\n  l = l.replace(\"return \",\"return None,None,\", 1)\nprint(\"\\t\\t%s # \u25a1:%i\" % (l,square.id),file=s.args.outfile)", [["end; s square", 31], ["; s square", 30]]]
[31, "close_out_function_body s square\nprint(\"\\t\\tpass # \u25a1:%i\" % square.id,file=s.args.outfile)\n#csr = ConditionsReader\ncsr = SimpleNamespace(exceptions=[],conditions=[],streets_iter=iter(square.streets))", [["; s square | csr", 32]]]
[32, "gather_exceptions_and_conditions csr\nstreet = next(csr.streets_iter)\ncr = SimpleNamespace(street = street,street_name_iter = iter(street[0]),condition=\"\")", [["end; csr", 33], ["; csr | cr", 36]]]
[33, "print_exceptions s | csr\nfor e in csr.exceptions:\n  print(e)\nprint(\"\\texcept Exception as e:\\n\\t\\traise e\",file=s.args.outfile)", [["; s csr", 34]]]
[34, "print_conditions s csr\nfor c in csr.conditions:\n  print(c)\nprint(\"\\treturn None,None,None\",file=s.args.outfile)", [["; s", 4]]]
[35, "get_name_and_bag square line\nname_and_unpackings = line.split(\" \",1)\nname = name_and_unpackings[0]\nif len(name_and_unpackings) == 2:\n  bag_and_hand = name_and_unpackings[1].split(\"|\",1)\n  bag = bag_and_hand[0].split()\n  if len(bag_and_hand) == 2:\n    hand = bag_and_hand[1].split()\n  else:\n    hand = bag\n    bag = []\nelse:\n  hand = []\n  bag = []", [["; bag hand | square name", 10]]]
[36, "get_condition cr\nchar = next(cr.street_name_iter)", [["end; cr.street", 37], ["char == \"\\\"\"; cr", 38], ["char == \";\"; cr", 42], ["; cr char", 56]]]
[37, "malformed_condition square | street\nprint(\"Syntax error in street comming form square %i\\n\\n%s\\n\\nMalformed condition. The correct format is <condition>; args to pass on\\nEx: True; foo bar\\nEx1: line.startswith(\\\"lala\\\"); baz boop\" % (square.id,street[0]), file=sys.stderr)", []]
[38, "read_string cr\ncr.condition = cr.condition + \"\\\"\"", [["; cr", 39]]]
[39, "read_string_char cr\nchar = next(cr.street_name_iter)\ncr.condition = cr.condition + char", [["end; cr.street", 37], ["char == \"\\\\\"; cr", 40], ["char == \"\\\"\"; cr", 36], ["; cr", 39]]]
[40, "read_string_escape cr\ncr.condition = cr.condition + next(cr.street_name_iter)", [["end; street.id cr.street", 37], ["; cr", 39]]]
[42, "read_bag cr\nbr = SimpleNamespace(bag=[],hand=[],char=None)", [["; cr | br", 61]]]
[43, "hand_white_space cr | br\nbr.char = next(cr.street_name_iter)", [["end; cr | br", 50], ["br.char == \" \"; cr | br", 43], ["; cr | br", 47]]]
[47, "new_hand_item br\nbr.hand.append(\"\")", [["; br", 48]]]
[48, "hand_item_char cr | br\nbr.hand[-1] = br.hand[-1] + br.char\nbr.char = next(cr.street_name_iter)", [["end; cr | br", 50], ["br.char == \" \"; cr | br", 43], ["; cr | br", 48]]]
[50, "build_continuation cr | br\ncontinuation = \"\"\nfor bag_item in br.bag:\n  continuation += \"\\n\\t\\t__pycfg_bag__.%s = %s\"%(bag_item,bag_item)\ncontinuation += \"\\n\\t\\treturn %i,__pycfg_bag__,[%s]\" % (cr.street[1], \",\".join(br.hand))", [["cr.condition.startswith(\"except \"); cr continuation", 51], ["cr.condition.strip() == \"end\"; cr continuation", 67], ["cr.condition.strip() == \"\"; cr continuation", 68], ["; cr continuation", 53]]]
[51, "add_exception csr | cr continuation\ncsr.exceptions.append(\"\\t%s:\\n%s\" % (cr.condition,continuation))", [["; csr", 32]]]
[53, "add_condition csr | cr continuation\ncsr.conditions.append(\"\\tif %s:\\n%s\" % (cr.condition, continuation))", [["; csr", 32]]]
[56, "condition_char cr char\ncr.condition = cr.condition + char", [["; cr", 36]]]
[57, "layout_hand s square hand |\nif hand:\n  print(\"\\n\\t\\t[%s] = list(args)\"% \",\".join(hand),file=s.args.outfile)", [["; s square", 30]]]
[58, "unpack_bag bag |\nbag_iter = iter(bag)", [["; bag_iter |", 59]]]
[59, "next_bag_item bag_iter |\nbag_item = next(bag_iter)", [["end;", 57], ["; bag_iter | bag_item", 60]]]
[60, "unpack_bag_item bag_item\nprint(\"\\n\\t\\t%s = __pycfg_bag__.%s\"%(bag_item,bag_item))\nprint(\"\\n\\t\\t__pycfg_bag__.__delattr__(\\\"%s\\\")\"%bag_item)", [[";", 59]]]
[61, "bag_white_space cr | br\nbr.char = next(cr.street_name_iter)", [["end; cr | br", 65], ["br.char == \"|\"; cr | br", 43], ["br.char == \" \"; cr | br", 61], ["; cr br |", 64]]]
[63, "bag_item_char cr br | bag_item\nbag_item += br.char\nbr.char = next(cr.street_name_iter)", [["end;cr | br bag_item True", 66], ["br.char == \"|\"; cr | br bag_item False", 66], ["br.char == \" \"; cr | br bag_item False", 66], ["; cr br | bag_item", 63]]]
[64, "new_bag_item\nbag_item = \"\"", [["; bag_item", 63]]]
[65, "no_bag_items_packed br\nbr.hand = br.bag\nbr.bag = []", [[";br", 50]]]
[66, "add_bag_item br bag_item stopped\nif bag_item and bag_item != \"|\":\n  br.bag.append(bag_item)", [["stopped; br", 65], ["br.char == \"|\"; br", 43], ["br.char == \" \"; br", 61]]]
[67, "expand_end cr continuation\ncr.condition = \"except StopIteration\"", [["; cr continuation", 51]]]
[68, "default_to_true cr continuation\ncr.condition = \"True\"", [[";cr continuation", 53]]]
