#!/usr/bin/python3
import fileinput
import json
import sys
import optparse
import os

class TextGraphServer():
  def __init__(self):
    self.graph = {}
    self.streetsByDestination = {}
    self.nextSquareId = 0
    self.lineNo = 0
    self.readonly = False
    self.debug = False
    if not 0 in self.graph:
      self.graph[0] = [0,"",[]]
      self.nextSquareId = 1

  def interpretLine(self,line,repl=False):
    if self.debug:
      print("<<" + line[:-1], file=sys.stderr)
    # Lines starting with # and blank lines are ignored.
    if line.startswith("#") or not line:
      sys.stdout.write("[]\n")
      sys.stdout.flush()
      sys.stdout.write("[]\n")
      sys.stdout.flush()
      return
    try:
      inputObject = json.loads(line)
    except ValueError as e:
      error = str(self.lineNo)+":"+line+"\nCould not be decoded.\n"+str(e)
      if repl:
        print(error)
        return
      else:
        sys.exit(error)
    self.lineNo += 1
    resultingSquares = []
    returnValues = []
    if self.readonly:
      readWritePermissions = "Read only"
    else:
      readWritePermissions = None
    # An empty list returns all squares
    if inputObject == []:
      for squareId in self.graph.keys():
        inputObject.append([squareId])
    # Except either one square or a list of squares
    if isinstance(inputObject[0],list):
      squares = inputObject
    else:
      squares = [inputObject]
    # A list of squares sets those squares, but also returns a list of the newly set squares. A return code is also returned, listing None if a value can be set/or has been successfully set and a string explaining an error or permissions problem. This is also how you query for squares.
    # Query square 1
    # <- [[1]]
    # -> [[1,"foo",[["bar St.",2]],[3,"incomming St."]]]
    # -> [[1,null,"Read only"]]
    # Set square 1
    # <- [[1,"foobar",[["bar St.",2]]]]
    # -> [[1,"foobar",[["bar St.",2]],[3,"incomming St."]]]
    # -> [[1,null,null]]
    # Query non-existant square
    # <- [[2]]
    # -> [[2,null,[],[]]]
    # -> [[1,"Square does not exist.","Square does not exist."]]

    for square in squares:
      try:
        squareId = square[0]
        if squareId is None:
          squareId = self.nextSquareId
          self.nextSquareId += 1
        elif isinstance(squareId,int) and squareId >= self.nextSquareId:
          self.nextSquareId = squareId + 1
      except IndexError:
        error = lineNo+":"+line + " is invalid."
        if repl:
          print(error)
          return
        else:
          sys.exit(error)
      if self.readonly:
        resultingSquares.append(self.graph[squareId]+[])
        returnValues.append([squareId,"Read only",["Read only"]])
        continue
      try:
        text = square[1]
      except IndexError:
        try:
          _,text,streets = self.graph[squareId]
        except KeyError:
          resultingSquares.append([squareId,None,[],[]])
          returnValues.append([squareId,"Square does not exist.","Square does not exist."])
          continue
      try:
        streets = square[2]
      except IndexError:
        try:
          _,_,streets = self.graph[squareId]
        except KeyError:
          resultingSquares.append([squareId,None,[],[]])
          returnValues.append([squareId,"Square does not exist.","Square does not exist."])
          continue
      if text is None:
        try:
          del self.graph[squareId]
          del self.streetsByDestination[squareId]
          for destination in self.streetsByDestination.keys():
            self.streetsByDestination[destination] = [s for s in self.streetsByDestination[destination] if s[0] != squareId]
        except KeyError:
          resultingSquares.append([squareId,None,[],[]])
          returnValues.append([squareId,"Square does not exist.","Square does not exist."])
          continue
      else:
        if squareId in self.graph:
          for street in self.graph[squareId][2]:
            try:
              self.streetsByDestination[street[1]] = [incommingStreet for incommingStreet in self.streetsByDestination[street[1]] if incommingStreet[0] != squareId]
            except KeyError:
              pass
        self.graph[squareId] = [squareId,text,streets]
        for name,destination in streets:
          if not destination in self.streetsByDestination:
            self.streetsByDestination[destination] = []
          self.streetsByDestination[destination].append([squareId,name])
          self.streetsByDestination[destination].sort()
      if squareId in self.streetsByDestination:
        incommingStreets = self.streetsByDestination[squareId]
      else:
        incommingStreets = []
      resultingSquares.append([squareId,text,streets,incommingStreets])
      returnValues.append([squareId,readWritePermissions,[readWritePermissions for _ in streets]])
    sys.stdout.write(json.dumps(resultingSquares)+"\n")
    sys.stdout.flush()
    sys.stdout.write(json.dumps(returnValues)+"\n")
    sys.stdout.flush()
    if self.debug:
      print(">>" + json.dumps(resultingSquares), file=sys.stderr)
      print(">>" + json.dumps(returnValues), file=sys.stderr)
      print("", file=sys.stderr)

  def repl(self):
    import readline
    import atexit
    try:
      os.makedirs(os.path.join(os.path.expanduser("~"), ".tgserve"))
    except FileExistsError:
      pass
    histfile = os.path.join(os.path.expanduser("~"), ".tgserve","repl_history")
    try:
      readline.read_history_file(histfile)
      # default history len is -1 (infinite), which may grow unruly
      readline.set_history_length(10000)
    except IOError:
      pass
    atexit.register(readline.write_history_file, histfile)
    while True:
      self.interpretLine(input(),repl=True)

  def serve(self):
    for line in iter(sys.stdin.readline,''):
      self.interpretLine(line)

if __name__ == "__main__":
  parser = optparse.OptionParser(usage = "tgserve",description = "Dumb server for the textgraph protocol.")
  parser.add_option("--repl", dest="repl",action="store_true",default=False,help="Run in REPL mode, don't exit on errors.")
  parser.add_option("--debug", dest="debug",action="store_true",default=False,help="Print what is happening at the protocol level.")
  options,args = parser.parse_args(sys.argv[1:])
  tgs = TextGraphServer()
  tgs.debug = options.debug
  if options.repl:
    tgs.repl()
  else:
    tgs.serve()
