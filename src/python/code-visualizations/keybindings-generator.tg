[0, "#!/usr/bin/python3\n#Display chains of keypress handling.", [["", 12], ["!pycfg", 27]]]
[12, "#imports\nimport sys\nimport argparse\nimport textgraph\nimport mge\nimport copy\nfrom types import SimpleNamespace", []]
[26, "parse_args s\nparser = argparse.ArgumentParser(description='Generate a visualization of the keybindings described in an mge-config file.')\nparser.add_argument('--config-file',help='Config file to visualize')\nparser.add_argument('--modes-file',help='File that lists the modes to be analyzed')\nparser.add_argument('--keypress-call-graph-file',help='File that describes the keypress-call-graph')\nparser.add_argument('--out',help='Output file')\ns.args = parser.parse_args()", [["True; s", 58]]]
[27, "initialize_state\ns = SimpleNamespace(config=None,keybindings_template=None,args=None,bound_keys=[])", [["True; s", 26]]]
[58, "load_graphs s\ns.config = mge.Config(s.args.config_file)\ns.keybindings_template = textgraph.TextGraphFile(s.args.modes_file)\ns.keypress_call_graph = textgraph.TextGraphFile(s.args.keypress_call_graph_file)\ns.keybindings = {}\nmode_iter = iter(s.keybindings_template[0].streets)", [["True; s mode_iter |", 59]]]
[59, "next_mode s mode_iter |\nmode = s.keybindings_template[next(mode_iter).destination]", [["; mode mode_iter |s", 60], ["end; s | [[s.keypress_call_graph[0]]] [] False", 66]]]
[60, "search_conf s\nconf_iter = iter(s.config.getNeighborhood(center=0)[0])", [["; s conf_iter | []", 61]]]
[61, "next_conf_square conf_iter mode | keybindings\nconf_square = next(conf_iter)", [["conf_square.text == mode.text;conf_iter mode keybindings | conf_square", 62], ["; conf_iter mode | keybindings", 61], ["end; mode keybindings", 65]]]
[62, "add_keybindings conf_square\nthis_modes_keybindings = iter(conf_square.streets)", [["; this_modes_keybindings", 63]]]
[63, "next_keybinding keybindings s |this_modes_keybindings\nkeybinding = next(this_modes_keybindings)\nkeybindings.append(s.config[keybinding.destination].text)", [[";keybindings s |this_modes_keybindings", 63], ["end; s| keybindings", 61]]]
[65, "save_keybindings s| mode keybindings\ns.keybindings[mode] = keybindings", [[";s |", 59]]]
[66, "iter_objects objects expanded_objects expanded\nobject_iter = iter(objects)", [[";objects object_iter | expanded_objects expanded ", 71]]]
[67, "swap expanded_objects expanded\nfocusables = expanded_objects", [["expanded; expanded_objects [] False", 66], ["not expanded; focusables|", 74]]]
[68, "get_keybindings focusables | keySquare\nfocus_iter = iter(focusables)", [["; focus_iter focusables keySquare |", 69]]]
[69, "next_focusable focus_iter keySquare |\nfocusable = next(focus_iter)\nfocusable_class_iter = iter(focusable)", [["; focus_iter keySquare | focusable_class_iter keySquare", 79], ["end; |", 76]]]
[70, "save s|\ns.keybindings_template.applyChanges()\ns.keybindings_template.filename = s.args.out\ns.keybindings_template.save()", []]
[71, "next_object object_iter | expanded_objects expanded\nobject_path = next(object_iter)\nstreets_iter = iter(object_path[-1].streets)", [["len(object_path[-1].streets) == 0; object_iter | expanded_objects expanded object_path", 78], [";object_iter | expanded_objects expanded object_path streets_iter", 72], ["end; expanded_objects expanded", 67]]]
[72, "expand s | expanded_objects expanded object_path streets_iter\nexpanded_object_path = copy.copy(object_path)\nexpanded_object_path.append(s.keypress_call_graph[next(streets_iter).destination])\nexpanded_objects.append(expanded_object_path)", [["; s | expanded_objects True object_path streets_iter", 72], ["end; s | expanded_objects expanded", 71]]]
[74, "connect_modes s|\nmodes_iter = iter(s.keybindings.items())", [["; modes_iter s |", 75]]]
[75, "connect_mode modes_iter |\nmode, keys = next(modes_iter)\nkeys_iter = iter(keys)", [["; modes_iter keys_iter mode |", 76], ["end; ", 70]]]
[76, "connect_keys keys_iter s mode |\nkey = next(keys_iter)\nkeySquare = s.keybindings_template.newLinkedSquare(mode.squareId,\"\",squareText=key)", [[";keys_iter s mode key | keySquare", 68], ["end; s|", 75]]]
[78, "pass_on_non_expandable_path expanded_objects expanded object_path\nexpanded_objects.append(object_path)", [["; expanded_objects expanded", 71]]]
[79, "connect_focusable_classes key s mode | focusable_class_iter lastSquare\nfocusable_class = next(focusable_class_iter)\nfocusable_class_name = focusable_class.text.split()[0][1:]\nlastSquare = s.keybindings_template.newLinkedSquare(lastSquare,\"\",squareText=focusable_class_name)\ncommand = s.config.getCommand(focusable_class_name,mode.text,key)\nlastSquare = s.keybindings_template.newLinkedSquare(lastSquare,\"\",squareText=str(command))", [["end; key s mode| ", 69], ["; key s mode | focusable_class_iter lastSquare", 79]]]
