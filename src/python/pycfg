#!/usr/bin/python3
#pycfg is a compiler which compiles text graph python controll flow graphs to normal executable python code. # □:0
# # □:23
#imports # □:12
import sys # □:12
import fileinput # □:12
import json # □:12
import argparse # □:12
from types import SimpleNamespace # □:12
#!/usr/bin/python3
#DO NOT EDIT
#This file was automatically generated from its textgraph source by pycfg.
def print_header(*args):
	return __py_cfg_call(3,*args)
def __py_cfg_internal_function_print_header(*args):
	try:

		[s] = list(args)
		print("#!/usr/bin/python3\n#DO NOT EDIT\n#This file was automatically generated from its textgraph source by pycfg.",file=s.args.outfile) # □:3
		pass # □:3
	except Exception as e:
		raise e
	if True:
		return 4,[s]
	return None,None
def read_line(*args):
	return __py_cfg_call(4,*args)
def __py_cfg_internal_function_read_line(*args):
	try:

		[s] = list(args)
		line = s.args.infile.readline() # □:4
		pass # □:4
	except Exception as e:
		raise e
	if line.startswith("#") or line.isspace():
		return 4,[s]
	if line == "":
		return 11,[s]
	if True:
		return 8,[s,line]
	return None,None
def json_load_line(*args):
	return __py_cfg_call(8,*args)
def __py_cfg_internal_function_json_load_line(*args):
	try:

		[s,line] = list(args)
		id,text,streets = json.loads(line) # □:8
		line_iter = iter(text.split("\n")) # □:8
		square = SimpleNamespace(id=id,line_iter=line_iter,streets=streets) # □:8
		pass # □:8
	except ValueError as e:
		return 9,[s,e]
	except Exception as e:
		raise e
	if True:
		return 28,[s,square]
	return None,None
def invalid_json(*args):
	return __py_cfg_call(9,*args)
def __py_cfg_internal_function_invalid_json(*args):
	try:

		[s,e] = list(args)
		print("Error on line "+str(s.fd.lineno()),file=sys.stderr) # □:9
		print(e,file=sys.stderr) # □:9
		pass # □:9
	except Exception as e:
		raise e
	return None,None
def start_function(*args):
	return __py_cfg_call(10,*args)
def __py_cfg_internal_function_start_function(*args):
	try:

		[s,square,name,bag] = list(args)
		print("def %s(*args):\n\treturn __py_cfg_call(%i,*args)\ndef __py_cfg_internal_function_%s(*args):\n\ttry:" % (name, square.id, name), file=s.args.outfile) # □:10
		s.squares.append((square.id,name)) # □:10
		pass # □:10
	except Exception as e:
		raise e
	if bag == []:
		return 30,[s,square]
	if True:
		return 57,[s,square,name,bag]
	return None,None
def print_end(*args):
	return __py_cfg_call(11,*args)
def __py_cfg_internal_function_print_end(*args):
	try:

		[s] = list(args)
		print("__py_cfg_squares = {"+",".join(map(lambda sqr: str(sqr[0])+":__py_cfg_internal_function_"+sqr[1],s.squares))+"}",file=s.args.outfile) # □:11
		print("def __py_cfg_call(__py_cfg_square,*args):\n\t__py_cfg_bag = list(args)\n\twhile __py_cfg_square is not None:\n\t\t__py_cfg_square,__py_cfg_bag = __py_cfg_squares[__py_cfg_square](*__py_cfg_bag)\n\treturn __py_cfg_bag", file=s.args.outfile) # □:11
		pass # □:11
	except Exception as e:
		raise e
	if s.args.in_function:
		return 24,[s]
	if True:
		return 25,[s]
	return None,None
def return_value(*args):
	return __py_cfg_call(24,*args)
def __py_cfg_internal_function_return_value(*args):
	try:

		[s] = list(args)
		print("return __py_cfg_call(0,[])",file=s.args.outfile) # □:24
		pass # □:24
	except Exception as e:
		raise e
	return None,None
def just_run(*args):
	return __py_cfg_call(25,*args)
def __py_cfg_internal_function_just_run(*args):
	try:

		[s] = list(args)
		print("__py_cfg_call(0,[])",file=s.args.outfile) # □:25
		pass # □:25
	except Exception as e:
		raise e
	return None,None
def parse_args(*args):
	return __py_cfg_call(26,*args)
def __py_cfg_internal_function_parse_args(*args):
	try:

		[s] = list(args)
		parser = argparse.ArgumentParser(description='pycfg compiler. Compile pycfg textgraphs to runnable python code.') # □:26
		parser.add_argument('-f','--in-function', action='store_true',help='Compile a code snippet that is intended to be inserted into a function.') # □:26
		parser.add_argument('infile', nargs='?', type=argparse.FileType('r'), default=sys.stdin) # □:26
		parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout)                    # □:26
		s.args = parser.parse_args() # □:26
		pass # □:26
	except Exception as e:
		raise e
	if True:
		return 3,[s]
	return None,None
def initialize_state(*args):
	return __py_cfg_call(0,*args)
def __py_cfg_internal_function_initialize_state(*args):
	try:
		s = SimpleNamespace(squares=[],args=None,fd=None) # □:0
		pass # □:0
	except Exception as e:
		raise e
	if True:
		return 26,[s]
	return None,None
def take_first_line(*args):
	return __py_cfg_call(28,*args)
def __py_cfg_internal_function_take_first_line(*args):
	try:

		[s,square] = list(args)
		line = next(square.line_iter) # □:28
		pass # □:28
	except StopIteration:
		return 29,[s,square]
	except Exception as e:
		raise e
	if line.strip() == "":
		return 29,[s,square]
	if True:
		return 35,[s,square,line]
	return None,None
def blank_square(*args):
	return __py_cfg_call(29,*args)
def __py_cfg_internal_function_blank_square(*args):
	try:

		[s,square] = list(args)
		name = "__pycfg_anon_function" + str(square.id) # □:29
		bag = [] # □:29
		pass # □:29
	except Exception as e:
		raise e
	if True:
		return 10,[s,square,name,bag]
	return None,None
def print_function_line(*args):
	return __py_cfg_call(30,*args)
def __py_cfg_internal_function_print_function_line(*args):
	try:

		[s,square] = list(args)
		l = next(square.line_iter) # □:30
		if l.strip().startswith("return "): # □:30
		  l = l.replace("return ","return None,", 1) # □:30
		print("\t\t%s # □:%i" % (l,square.id),file=s.args.outfile) # □:30
		pass # □:30
	except StopIteration:
		return 31,[s,square]
	except Exception as e:
		raise e
	if True:
		return 30,[s,square]
	return None,None
def close_out_function_body(*args):
	return __py_cfg_call(31,*args)
def __py_cfg_internal_function_close_out_function_body(*args):
	try:

		[s,square] = list(args)
		print("\t\tpass # □:%i" % square.id,file=s.args.outfile) # □:31
		#csr = ConditionsReader # □:31
		csr = SimpleNamespace(exceptions=[],conditions=[],streets_iter=iter(square.streets)) # □:31
		pass # □:31
	except Exception as e:
		raise e
	if True:
		return 32,[s,square,csr]
	return None,None
def gather_exceptions_and_conditions(*args):
	return __py_cfg_call(32,*args)
def __py_cfg_internal_function_gather_exceptions_and_conditions(*args):
	try:

		[s,square,csr] = list(args)
		#cr = ConditionReader # □:32
		street = next(csr.streets_iter) # □:32
		cr = SimpleNamespace(street = street,street_name_iter = iter(street[0]),condition="") # □:32
		pass # □:32
	except StopIteration:
		return 33,[s,square,csr]
	except Exception as e:
		raise e
	if True:
		return 36,[s,square,csr,cr]
	return None,None
def print_exceptions(*args):
	return __py_cfg_call(33,*args)
def __py_cfg_internal_function_print_exceptions(*args):
	try:

		[s,square,csr] = list(args)
		for e in csr.exceptions: # □:33
		  print(e) # □:33
		print("\texcept Exception as e:\n\t\traise e",file=s.args.outfile) # □:33
		pass # □:33
	except Exception as e:
		raise e
	if True:
		return 34,[s,square,csr]
	return None,None
def print_conditions(*args):
	return __py_cfg_call(34,*args)
def __py_cfg_internal_function_print_conditions(*args):
	try:

		[s,square,csr] = list(args)
		for c in csr.conditions: # □:34
		  print(c) # □:34
		print("\treturn None,None",file=s.args.outfile) # □:34
		pass # □:34
	except Exception as e:
		raise e
	if True:
		return 4,[s]
	return None,None
def get_name_and_bag(*args):
	return __py_cfg_call(35,*args)
def __py_cfg_internal_function_get_name_and_bag(*args):
	try:

		[s,square,line] = list(args)
		words = line.split() # □:35
		name = words[0] # □:35
		bag = words[1:] # □:35
		pass # □:35
	except Exception as e:
		raise e
	if True:
		return 10,[s,square,name,bag]
	return None,None
def get_condition(*args):
	return __py_cfg_call(36,*args)
def __py_cfg_internal_function_get_condition(*args):
	try:

		[s,square,csr,cr] = list(args)
		char = next(cr.street_name_iter) # □:36
		pass # □:36
	except StopIteration:
		return 37,[square.id,cr.street]
	except Exception as e:
		raise e
	if char == "\"":
		return 38,[s,square,csr,cr]
	if char == ";":
		return 42,[s,square,csr,cr]
	if True:
		return 56,[s,square,csr,cr,char]
	return None,None
def malformed_condition(*args):
	return __py_cfg_call(37,*args)
def __py_cfg_internal_function_malformed_condition(*args):
	try:

		[id,street] = list(args)
		print("Syntax error in street comming form square %i\n\n%s\n\nMalformed condition. The correct format is <condition>; args to pass on\nEx: True; foo bar\nEx1: line.startswith(\"lala\"); baz boop" % (id,street[0]), file=sys.stderr) # □:37
		pass # □:37
	except Exception as e:
		raise e
	return None,None
def read_string(*args):
	return __py_cfg_call(38,*args)
def __py_cfg_internal_function_read_string(*args):
	try:

		[s,square,csr,cr] = list(args)
		cr.condition = cr.condition + "\"" # □:38
		pass # □:38
	except Exception as e:
		raise e
	if True:
		return 39,[s,square,csr,cr]
	return None,None
def read_string_char(*args):
	return __py_cfg_call(39,*args)
def __py_cfg_internal_function_read_string_char(*args):
	try:

		[s,square,csr,cr] = list(args)
		char = next(cr.street_name_iter) # □:39
		cr.condition = cr.condition + char # □:39
		pass # □:39
	except StopIteration:
		return 37,[square.id,cr.street]
	except Exception as e:
		raise e
	if char == "\\":
		return 40,[s,square,csr,cr]
	if char == "\"":
		return 36,[s,square,csr,cr]
	if True:
		return 39,[s,square,csr,cr]
	return None,None
def read_string_escape(*args):
	return __py_cfg_call(40,*args)
def __py_cfg_internal_function_read_string_escape(*args):
	try:

		[s,square,csr,cr] = list(args)
		cr.condition = cr.condition + next(cr.street_name_iter) # □:40
		pass # □:40
	except StopIteration:
		return 37,[street.id,cr.street]
	except Exception as e:
		raise e
	if True:
		return 39,[s,square,csr,cr]
	return None,None
def read_bag(*args):
	return __py_cfg_call(42,*args)
def __py_cfg_internal_function_read_bag(*args):
	try:

		[s,square,csr,cr] = list(args)
		br = SimpleNamespace(bag_items=[],char=None) # □:42
		pass # □:42
	except Exception as e:
		raise e
	if True:
		return 43,[s,square,csr,cr,br]
	return None,None
def bag_white_space(*args):
	return __py_cfg_call(43,*args)
def __py_cfg_internal_function_bag_white_space(*args):
	try:

		[s,square,csr,cr,br] = list(args)
		br.char = next(cr.street_name_iter) # □:43
		pass # □:43
	except StopIteration:
		return 50,[s,square,csr,cr,br]
	except Exception as e:
		raise e
	if br.char == " ":
		return 43,[s,square,csr,cr,br]
	if True:
		return 47,[s,square,csr,cr,br]
	return None,None
def new_bag_item(*args):
	return __py_cfg_call(47,*args)
def __py_cfg_internal_function_new_bag_item(*args):
	try:

		[s,square,csr,cr,br] = list(args)
		br.bag_items.append("") # □:47
		pass # □:47
	except Exception as e:
		raise e
	if True:
		return 48,[s,square,csr,cr,br]
	return None,None
def bag_item_char(*args):
	return __py_cfg_call(48,*args)
def __py_cfg_internal_function_bag_item_char(*args):
	try:

		[s,square,csr,cr,br] = list(args)
		br.bag_items[-1] = br.bag_items[-1] + br.char # □:48
		br.char = next(cr.street_name_iter) # □:48
		pass # □:48
	except StopIteration:
		return 50,[s,square,csr,cr,br]
	except Exception as e:
		raise e
	if br.char == " ":
		return 43,[s,square,csr,cr,br]
	if True:
		return 48,[s,square,csr,cr,br]
	return None,None
def build_continuation(*args):
	return __py_cfg_call(50,*args)
def __py_cfg_internal_function_build_continuation(*args):
	try:

		[s,square,csr,cr,br] = list(args)
		continuation = "return %i,[%s]" % (cr.street[1], ",".join(br.bag_items)) # □:50
		pass # □:50
	except Exception as e:
		raise e
	if cr.condition.startswith("except "):
		return 51,[s,square,csr,cr,continuation]
	if True:
		return 53,[s,square,csr,cr,continuation]
	return None,None
def add_exception(*args):
	return __py_cfg_call(51,*args)
def __py_cfg_internal_function_add_exception(*args):
	try:

		[s,square,csr,cr,continuation] = list(args)
		csr.exceptions.append("\t%s:\n\t\t%s" % (cr.condition,continuation)) # □:51
		pass # □:51
	except Exception as e:
		raise e
	if True:
		return 32,[s,square,csr]
	return None,None
def add_condition(*args):
	return __py_cfg_call(53,*args)
def __py_cfg_internal_function_add_condition(*args):
	try:

		[s,square,csr,cr,continuation] = list(args)
		csr.conditions.append("\tif %s:\n\t\t%s" % (cr.condition, continuation)) # □:53
		pass # □:53
	except Exception as e:
		raise e
	if True:
		return 32,[s,square,csr]
	return None,None
def condition_char(*args):
	return __py_cfg_call(56,*args)
def __py_cfg_internal_function_condition_char(*args):
	try:

		[s,square,csr,cr,char] = list(args)
		cr.condition = cr.condition + char # □:56
		pass # □:56
	except Exception as e:
		raise e
	if True:
		return 36,[s,square,csr,cr]
	return None,None
def unpack_bag(*args):
	return __py_cfg_call(57,*args)
def __py_cfg_internal_function_unpack_bag(*args):
	try:

		[s,square,name,bag] = list(args)
		print("\n\t\t[%s] = list(args)"% ",".join(bag),file=s.args.outfile) # □:57
		pass # □:57
	except Exception as e:
		raise e
	if True:
		return 30,[s,square]
	return None,None
__py_cfg_squares = {3:__py_cfg_internal_function_print_header,4:__py_cfg_internal_function_read_line,8:__py_cfg_internal_function_json_load_line,9:__py_cfg_internal_function_invalid_json,10:__py_cfg_internal_function_start_function,11:__py_cfg_internal_function_print_end,24:__py_cfg_internal_function_return_value,25:__py_cfg_internal_function_just_run,26:__py_cfg_internal_function_parse_args,0:__py_cfg_internal_function_initialize_state,28:__py_cfg_internal_function_take_first_line,29:__py_cfg_internal_function_blank_square,30:__py_cfg_internal_function_print_function_line,31:__py_cfg_internal_function_close_out_function_body,32:__py_cfg_internal_function_gather_exceptions_and_conditions,33:__py_cfg_internal_function_print_exceptions,34:__py_cfg_internal_function_print_conditions,35:__py_cfg_internal_function_get_name_and_bag,36:__py_cfg_internal_function_get_condition,37:__py_cfg_internal_function_malformed_condition,38:__py_cfg_internal_function_read_string,39:__py_cfg_internal_function_read_string_char,40:__py_cfg_internal_function_read_string_escape,42:__py_cfg_internal_function_read_bag,43:__py_cfg_internal_function_bag_white_space,47:__py_cfg_internal_function_new_bag_item,48:__py_cfg_internal_function_bag_item_char,50:__py_cfg_internal_function_build_continuation,51:__py_cfg_internal_function_add_exception,53:__py_cfg_internal_function_add_condition,56:__py_cfg_internal_function_condition_char,57:__py_cfg_internal_function_unpack_bag}
def __py_cfg_call(__py_cfg_square,*args):
	__py_cfg_bag = list(args)
	while __py_cfg_square is not None:
		__py_cfg_square,__py_cfg_bag = __py_cfg_squares[__py_cfg_square](*__py_cfg_bag)
	return __py_cfg_bag
__py_cfg_call(0,[])

