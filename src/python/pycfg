#!/usr/bin/python3
#pycfg is a compiler which compiles text graph python controll flow graphs to normal executable python code. # □:0
# # □:23
#imports # □:12
import sys # □:12
import fileinput # □:12
import json # □:12
import argparse # □:12
from types import SimpleNamespace # □:12
#!/usr/bin/python3
#DO NOT EDIT
#This file was automatically generated from its textgraph source by pycfg.
def print_header(__pycfg_bag__,*args):
	return __py_cfg_call(3,__pycfg_bag__,*args)
def __py_cfg_internal_function_print_header(__pycfg_bag__,*args):
	try:

		[s] = list(args)
		print("#!/usr/bin/python3\n#DO NOT EDIT\n#This file was automatically generated from its textgraph source by pycfg.",file=s.args.outfile) # □:3
		pass # □:3
	except Exception as e:
		raise e
	if True:

		return 4,__pycfg_bag__,[s]
	return None,None,None
def read_line(__pycfg_bag__,*args):
	return __py_cfg_call(4,__pycfg_bag__,*args)
def __py_cfg_internal_function_read_line(__pycfg_bag__,*args):
	try:

		[s] = list(args)
		line = s.args.infile.readline() # □:4
		pass # □:4
	except Exception as e:
		raise e
	if line.startswith("#") or line.isspace():

		return 4,__pycfg_bag__,[s]
	if line == "":

		return 11,__pycfg_bag__,[s]
	if True:

		return 8,__pycfg_bag__,[s,line]
	return None,None,None
def json_load_line(__pycfg_bag__,*args):
	return __py_cfg_call(8,__pycfg_bag__,*args)
def __py_cfg_internal_function_json_load_line(__pycfg_bag__,*args):
	try:

		[s,line] = list(args)
		id,text,streets = json.loads(line) # □:8
		line_iter = iter(text.split("\n")) # □:8
		square = SimpleNamespace(id=id,line_iter=line_iter,streets=streets) # □:8
		pass # □:8
	except ValueError as e:

		return 9,__pycfg_bag__,[s,e]
	except Exception as e:
		raise e
	if True:

		return 28,__pycfg_bag__,[s,square]
	return None,None,None
def invalid_json(__pycfg_bag__,*args):
	return __py_cfg_call(9,__pycfg_bag__,*args)
def __py_cfg_internal_function_invalid_json(__pycfg_bag__,*args):
	try:

		[s,e] = list(args)
		print("Error on line "+str(s.fd.lineno()),file=sys.stderr) # □:9
		print(e,file=sys.stderr) # □:9
		pass # □:9
	except Exception as e:
		raise e
	return None,None,None
def start_function(__pycfg_bag__,*args):
	return __py_cfg_call(10,__pycfg_bag__,*args)
def __py_cfg_internal_function_start_function(__pycfg_bag__,*args):
	try:

		[s,square,name,bag,hand] = list(args)
		print("def %s(__pycfg_bag__,*args):\n\treturn __py_cfg_call(%i,__pycfg_bag__,*args)\ndef __py_cfg_internal_function_%s(__pycfg_bag__,*args):\n\ttry:" % (name, square.id, name), file=s.args.outfile) # □:10
		s.squares.append((square.id,name)) # □:10
		pass # □:10
	except Exception as e:
		raise e
	if True:

		__pycfg_bag__.s = s
		__pycfg_bag__.square = square
		__pycfg_bag__.hand = hand
		return 58,__pycfg_bag__,[bag]
	return None,None,None
def print_end(__pycfg_bag__,*args):
	return __py_cfg_call(11,__pycfg_bag__,*args)
def __py_cfg_internal_function_print_end(__pycfg_bag__,*args):
	try:

		[s] = list(args)
		print("__pycfg_squares__ = {"+",".join(map(lambda sqr: str(sqr[0])+":__py_cfg_internal_function_"+sqr[1],s.squares))+"}",file=s.args.outfile) # □:11
		print("def __pycfg_call__(__pycfg_square__,__pycfg_bag__,*args):\n\t__pycfg_hand__ = list(args)\n\twhile __pycfg_square__ is not None:\n\t\t__pycfg_square__,__pycfg_bag__,__pycfg_hand__ = __pycfg_squares__[__pycfg_square__](__pycfg_bag__,*__pycfg_hand__)\n\treturn __pycfg_hand__", file=s.args.outfile) # □:11
		print("import types") # □:11
		pass # □:11
	except Exception as e:
		raise e
	if s.args.in_function:

		return 24,__pycfg_bag__,[s]
	if True:

		return 25,__pycfg_bag__,[s]
	return None,None,None
def return_value(__pycfg_bag__,*args):
	return __py_cfg_call(24,__pycfg_bag__,*args)
def __py_cfg_internal_function_return_value(__pycfg_bag__,*args):
	try:

		[s] = list(args)
		print("return __pycfg_call__(0,types.SimpleNamespace(),[])",file=s.args.outfile) # □:24
		pass # □:24
	except Exception as e:
		raise e
	return None,None,None
def just_run(__pycfg_bag__,*args):
	return __py_cfg_call(25,__pycfg_bag__,*args)
def __py_cfg_internal_function_just_run(__pycfg_bag__,*args):
	try:

		[s] = list(args)
		print("__pycfg_call__(0,types.SimpleNamespace(),[])",file=s.args.outfile) # □:25
		pass # □:25
	except Exception as e:
		raise e
	return None,None,None
def parse_args(__pycfg_bag__,*args):
	return __py_cfg_call(26,__pycfg_bag__,*args)
def __py_cfg_internal_function_parse_args(__pycfg_bag__,*args):
	try:

		[s] = list(args)
		parser = argparse.ArgumentParser(description='pycfg compiler. Compile pycfg textgraphs to runnable python code.') # □:26
		parser.add_argument('-f','--in-function', action='store_true',help='Compile a code snippet that is intended to be inserted into a function.') # □:26
		parser.add_argument('infile', nargs='?', type=argparse.FileType('r'), default=sys.stdin) # □:26
		parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout)                    # □:26
		s.args = parser.parse_args() # □:26
		pass # □:26
	except Exception as e:
		raise e
	if True:

		return 3,__pycfg_bag__,[s]
	return None,None,None
def initialize_state(__pycfg_bag__,*args):
	return __py_cfg_call(0,__pycfg_bag__,*args)
def __py_cfg_internal_function_initialize_state(__pycfg_bag__,*args):
	try:
		s = SimpleNamespace(squares=[],args=None,fd=None) # □:0
		pass # □:0
	except Exception as e:
		raise e
	if True:

		return 26,__pycfg_bag__,[s]
	return None,None,None
def take_first_line(__pycfg_bag__,*args):
	return __py_cfg_call(28,__pycfg_bag__,*args)
def __py_cfg_internal_function_take_first_line(__pycfg_bag__,*args):
	try:

		[s,square] = list(args)
		line = next(square.line_iter) # □:28
		pass # □:28
	except StopIteration:

		return 29,__pycfg_bag__,[s,square]
	except Exception as e:
		raise e
	if line.strip() == "":

		return 29,__pycfg_bag__,[s,square]
	if True:

		return 35,__pycfg_bag__,[s,square,line]
	return None,None,None
def blank_square(__pycfg_bag__,*args):
	return __py_cfg_call(29,__pycfg_bag__,*args)
def __py_cfg_internal_function_blank_square(__pycfg_bag__,*args):
	try:

		[s,square] = list(args)
		name = "__pycfg_anon_function" + str(square.id) # □:29
		bag = [] # □:29
		hand = [] # □:29
		pass # □:29
	except Exception as e:
		raise e
	if True:

		return 10,__pycfg_bag__,[s,square,name,bag,hand]
	return None,None,None
def print_function_line(__pycfg_bag__,*args):
	return __py_cfg_call(30,__pycfg_bag__,*args)
def __py_cfg_internal_function_print_function_line(__pycfg_bag__,*args):
	try:

		[s,square] = list(args)
		l = next(square.line_iter) # □:30
		if l.strip().startswith("return "): # □:30
		  l = l.replace("return ","return None,None,", 1) # □:30
		print("\t\t%s # □:%i" % (l,square.id),file=s.args.outfile) # □:30
		pass # □:30
	except StopIteration:

		return 31,__pycfg_bag__,[s,square]
	except Exception as e:
		raise e
	if True:

		return 30,__pycfg_bag__,[s,square]
	return None,None,None
def close_out_function_body(__pycfg_bag__,*args):
	return __py_cfg_call(31,__pycfg_bag__,*args)
def __py_cfg_internal_function_close_out_function_body(__pycfg_bag__,*args):
	try:

		[s,square] = list(args)
		print("\t\tpass # □:%i" % square.id,file=s.args.outfile) # □:31
		#csr = ConditionsReader # □:31
		csr = SimpleNamespace(exceptions=[],conditions=[],streets_iter=iter(square.streets)) # □:31
		pass # □:31
	except Exception as e:
		raise e
	if True:

		return 32,__pycfg_bag__,[s,square,csr]
	return None,None,None
def gather_exceptions_and_conditions(__pycfg_bag__,*args):
	return __py_cfg_call(32,__pycfg_bag__,*args)
def __py_cfg_internal_function_gather_exceptions_and_conditions(__pycfg_bag__,*args):
	try:

		[s,square,csr] = list(args)
		#cr = ConditionReader # □:32
		street = next(csr.streets_iter) # □:32
		cr = SimpleNamespace(street = street,street_name_iter = iter(street[0]),condition="") # □:32
		pass # □:32
	except StopIteration:

		return 33,__pycfg_bag__,[s,square,csr]
	except Exception as e:
		raise e
	if True:

		return 36,__pycfg_bag__,[s,square,csr,cr]
	return None,None,None
def print_exceptions(__pycfg_bag__,*args):
	return __py_cfg_call(33,__pycfg_bag__,*args)
def __py_cfg_internal_function_print_exceptions(__pycfg_bag__,*args):
	try:

		[s,square,csr] = list(args)
		for e in csr.exceptions: # □:33
		  print(e) # □:33
		print("\texcept Exception as e:\n\t\traise e",file=s.args.outfile) # □:33
		pass # □:33
	except Exception as e:
		raise e
	if True:

		return 34,__pycfg_bag__,[s,square,csr]
	return None,None,None
def print_conditions(__pycfg_bag__,*args):
	return __py_cfg_call(34,__pycfg_bag__,*args)
def __py_cfg_internal_function_print_conditions(__pycfg_bag__,*args):
	try:

		[s,square,csr] = list(args)
		for c in csr.conditions: # □:34
		  print(c) # □:34
		print("\treturn None,None,None",file=s.args.outfile) # □:34
		pass # □:34
	except Exception as e:
		raise e
	if True:

		return 4,__pycfg_bag__,[s]
	return None,None,None
def get_name_and_bag(__pycfg_bag__,*args):
	return __py_cfg_call(35,__pycfg_bag__,*args)
def __py_cfg_internal_function_get_name_and_bag(__pycfg_bag__,*args):
	try:

		[s,square,line] = list(args)
		name_and_unpackings = line.split(" ",1) # □:35
		name = name_and_unpackings[0] # □:35
		if len(name_and_unpackings) == 2: # □:35
		  bag_and_hand = name_and_unpackings[1].split("|",1) # □:35
		  bag = bag_and_hand[0].split() # □:35
		  if len(bag_and_hand) == 2: # □:35
		    hand = bag_and_hand[1].split() # □:35
		  else: # □:35
		    hand = bag # □:35
		    bag = [] # □:35
		else: # □:35
		  hand = [] # □:35
		  bag = [] # □:35
		pass # □:35
	except Exception as e:
		raise e
	if True:

		return 10,__pycfg_bag__,[s,square,name,bag,hand]
	return None,None,None
def get_condition(__pycfg_bag__,*args):
	return __py_cfg_call(36,__pycfg_bag__,*args)
def __py_cfg_internal_function_get_condition(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr] = list(args)
		char = next(cr.street_name_iter) # □:36
		pass # □:36
	except StopIteration:

		return 37,__pycfg_bag__,[square.id,cr.street]
	except Exception as e:
		raise e
	if char == "\"":

		return 38,__pycfg_bag__,[s,square,csr,cr]
	if char == ";":

		return 42,__pycfg_bag__,[s,square,csr,cr]
	if True:

		return 56,__pycfg_bag__,[s,square,csr,cr,char]
	return None,None,None
def malformed_condition(__pycfg_bag__,*args):
	return __py_cfg_call(37,__pycfg_bag__,*args)
def __py_cfg_internal_function_malformed_condition(__pycfg_bag__,*args):
	try:

		[id,street] = list(args)
		print("Syntax error in street comming form square %i\n\n%s\n\nMalformed condition. The correct format is <condition>; args to pass on\nEx: True; foo bar\nEx1: line.startswith(\"lala\"); baz boop" % (id,street[0]), file=sys.stderr) # □:37
		pass # □:37
	except Exception as e:
		raise e
	return None,None,None
def read_string(__pycfg_bag__,*args):
	return __py_cfg_call(38,__pycfg_bag__,*args)
def __py_cfg_internal_function_read_string(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr] = list(args)
		cr.condition = cr.condition + "\"" # □:38
		pass # □:38
	except Exception as e:
		raise e
	if True:

		return 39,__pycfg_bag__,[s,square,csr,cr]
	return None,None,None
def read_string_char(__pycfg_bag__,*args):
	return __py_cfg_call(39,__pycfg_bag__,*args)
def __py_cfg_internal_function_read_string_char(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr] = list(args)
		char = next(cr.street_name_iter) # □:39
		cr.condition = cr.condition + char # □:39
		pass # □:39
	except StopIteration:

		return 37,__pycfg_bag__,[square.id,cr.street]
	except Exception as e:
		raise e
	if char == "\\":

		return 40,__pycfg_bag__,[s,square,csr,cr]
	if char == "\"":

		return 36,__pycfg_bag__,[s,square,csr,cr]
	if True:

		return 39,__pycfg_bag__,[s,square,csr,cr]
	return None,None,None
def read_string_escape(__pycfg_bag__,*args):
	return __py_cfg_call(40,__pycfg_bag__,*args)
def __py_cfg_internal_function_read_string_escape(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr] = list(args)
		cr.condition = cr.condition + next(cr.street_name_iter) # □:40
		pass # □:40
	except StopIteration:

		return 37,__pycfg_bag__,[street.id,cr.street]
	except Exception as e:
		raise e
	if True:

		return 39,__pycfg_bag__,[s,square,csr,cr]
	return None,None,None
def read_bag(__pycfg_bag__,*args):
	return __py_cfg_call(42,__pycfg_bag__,*args)
def __py_cfg_internal_function_read_bag(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr] = list(args)
		br = SimpleNamespace(bag=[],hand=[],char=None) # □:42
		pass # □:42
	except Exception as e:
		raise e
	if True:

		return 61,__pycfg_bag__,[s,square,csr,cr,br]
	return None,None,None
def hand_white_space(__pycfg_bag__,*args):
	return __py_cfg_call(43,__pycfg_bag__,*args)
def __py_cfg_internal_function_hand_white_space(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,br] = list(args)
		br.char = next(cr.street_name_iter) # □:43
		pass # □:43
	except StopIteration:

		return 50,__pycfg_bag__,[s,square,csr,cr,br]
	except Exception as e:
		raise e
	if br.char == " ":

		return 43,__pycfg_bag__,[s,square,csr,cr,br]
	if True:

		return 47,__pycfg_bag__,[s,square,csr,cr,br]
	return None,None,None
def new_hand_item(__pycfg_bag__,*args):
	return __py_cfg_call(47,__pycfg_bag__,*args)
def __py_cfg_internal_function_new_hand_item(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,br] = list(args)
		br.hand.append("") # □:47
		pass # □:47
	except Exception as e:
		raise e
	if True:

		return 48,__pycfg_bag__,[s,square,csr,cr,br]
	return None,None,None
def hand_item_char(__pycfg_bag__,*args):
	return __py_cfg_call(48,__pycfg_bag__,*args)
def __py_cfg_internal_function_hand_item_char(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,br] = list(args)
		br.hand[-1] = br.hand[-1] + br.char # □:48
		br.char = next(cr.street_name_iter) # □:48
		pass # □:48
	except StopIteration:

		return 50,__pycfg_bag__,[s,square,csr,cr,br]
	except Exception as e:
		raise e
	if br.char == " ":

		return 43,__pycfg_bag__,[s,square,csr,cr,br]
	if True:

		return 48,__pycfg_bag__,[s,square,csr,cr,br]
	return None,None,None
def build_continuation(__pycfg_bag__,*args):
	return __py_cfg_call(50,__pycfg_bag__,*args)
def __py_cfg_internal_function_build_continuation(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,br] = list(args)
		continuation = "" # □:50
		for bag_item in br.bag: # □:50
		  continuation += "\n\t\t__pycfg_bag__.%s = %s"%(bag_item,bag_item) # □:50
		continuation += "\n\t\treturn %i,__pycfg_bag__,[%s]" % (cr.street[1], ",".join(br.hand)) # □:50
		pass # □:50
	except Exception as e:
		raise e
	if cr.condition.startswith("except "):

		return 51,__pycfg_bag__,[s,square,csr,cr,continuation]
	if True:

		return 53,__pycfg_bag__,[s,square,csr,cr,continuation]
	return None,None,None
def add_exception(__pycfg_bag__,*args):
	return __py_cfg_call(51,__pycfg_bag__,*args)
def __py_cfg_internal_function_add_exception(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,continuation] = list(args)
		csr.exceptions.append("\t%s:\n%s" % (cr.condition,continuation)) # □:51
		pass # □:51
	except Exception as e:
		raise e
	if True:

		return 32,__pycfg_bag__,[s,square,csr]
	return None,None,None
def add_condition(__pycfg_bag__,*args):
	return __py_cfg_call(53,__pycfg_bag__,*args)
def __py_cfg_internal_function_add_condition(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,continuation] = list(args)
		csr.conditions.append("\tif %s:\n%s" % (cr.condition, continuation)) # □:53
		pass # □:53
	except Exception as e:
		raise e
	if True:

		return 32,__pycfg_bag__,[s,square,csr]
	return None,None,None
def condition_char(__pycfg_bag__,*args):
	return __py_cfg_call(56,__pycfg_bag__,*args)
def __py_cfg_internal_function_condition_char(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,char] = list(args)
		cr.condition = cr.condition + char # □:56
		pass # □:56
	except Exception as e:
		raise e
	if True:

		return 36,__pycfg_bag__,[s,square,csr,cr]
	return None,None,None
def layout_hand(__pycfg_bag__,*args):
	return __py_cfg_call(57,__pycfg_bag__,*args)
def __py_cfg_internal_function_layout_hand(__pycfg_bag__,*args):
	try:

		s = __pycfg_bag__.s

		__pycfg_bag__.__delattr__("s")

		square = __pycfg_bag__.square

		__pycfg_bag__.__delattr__("square")

		hand = __pycfg_bag__.hand

		__pycfg_bag__.__delattr__("hand")
		if hand: # □:57
		  print("\n\t\t[%s] = list(args)"% ",".join(hand),file=s.args.outfile) # □:57
		pass # □:57
	except Exception as e:
		raise e
	if True:

		return 30,__pycfg_bag__,[s,square]
	return None,None,None
def unpack_bag(__pycfg_bag__,*args):
	return __py_cfg_call(58,__pycfg_bag__,*args)
def __py_cfg_internal_function_unpack_bag(__pycfg_bag__,*args):
	try:

		[bag] = list(args)
		bag_iter = iter(bag) # □:58
		pass # □:58
	except Exception as e:
		raise e
	if True:

		__pycfg_bag__.bag_iter = bag_iter
		return 59,__pycfg_bag__,[]
	return None,None,None
def next_bag_item(__pycfg_bag__,*args):
	return __py_cfg_call(59,__pycfg_bag__,*args)
def __py_cfg_internal_function_next_bag_item(__pycfg_bag__,*args):
	try:

		bag_iter = __pycfg_bag__.bag_iter

		__pycfg_bag__.__delattr__("bag_iter")
		bag_item = next(bag_iter) # □:59
		pass # □:59
	except StopIteration:

		return 57,__pycfg_bag__,[]
	except Exception as e:
		raise e
	if True:

		__pycfg_bag__.bag_iter = bag_iter
		return 60,__pycfg_bag__,[bag_item]
	return None,None,None
def unpack_bag_item(__pycfg_bag__,*args):
	return __py_cfg_call(60,__pycfg_bag__,*args)
def __py_cfg_internal_function_unpack_bag_item(__pycfg_bag__,*args):
	try:

		[bag_item] = list(args)
		print("\n\t\t%s = __pycfg_bag__.%s"%(bag_item,bag_item)) # □:60
		print("\n\t\t__pycfg_bag__.__delattr__(\"%s\")"%bag_item) # □:60
		pass # □:60
	except Exception as e:
		raise e
	if True:

		return 59,__pycfg_bag__,[]
	return None,None,None
def bag_white_space(__pycfg_bag__,*args):
	return __py_cfg_call(61,__pycfg_bag__,*args)
def __py_cfg_internal_function_bag_white_space(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,br] = list(args)
		br.char = next(cr.street_name_iter) # □:61
		pass # □:61
	except StopIteration:

		return 65,__pycfg_bag__,[s,square,csr,cr,br]
	except Exception as e:
		raise e
	if br.char == "|":

		return 43,__pycfg_bag__,[s,square,csr,cr,br]
	if br.char == " ":

		return 61,__pycfg_bag__,[s,square,csr,cr,br]
	if True:

		return 64,__pycfg_bag__,[s,square,csr,cr,br]
	return None,None,None
def bag_item_char(__pycfg_bag__,*args):
	return __py_cfg_call(63,__pycfg_bag__,*args)
def __py_cfg_internal_function_bag_item_char(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,br,bag_item] = list(args)
		bag_item += br.char # □:63
		br.char = next(cr.street_name_iter) # □:63
		pass # □:63
	except StopIteration:

		return 66,__pycfg_bag__,[s,square,csr,cr,br,bag_item,True]
	except Exception as e:
		raise e
	if br.char == "|":

		return 66,__pycfg_bag__,[s,square,csr,br,bag_item,False]
	if br.char == " ":

		return 66,__pycfg_bag__,[s,square,csr,cr,br,bag_item,False]
	if True:

		return 63,__pycfg_bag__,[s,square,csr,cr,br,bag_item]
	return None,None,None
def new_bag_item(__pycfg_bag__,*args):
	return __py_cfg_call(64,__pycfg_bag__,*args)
def __py_cfg_internal_function_new_bag_item(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,br] = list(args)
		bag_item = "" # □:64
		pass # □:64
	except Exception as e:
		raise e
	if True:

		return 63,__pycfg_bag__,[s,square,csr,cr,br,bag_item]
	return None,None,None
def no_bag_items_packed(__pycfg_bag__,*args):
	return __py_cfg_call(65,__pycfg_bag__,*args)
def __py_cfg_internal_function_no_bag_items_packed(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,br] = list(args)
		br.hand = br.bag # □:65
		br.bag = [] # □:65
		pass # □:65
	except Exception as e:
		raise e
	if True:

		return 50,__pycfg_bag__,[s,square,csr,cr,br]
	return None,None,None
def add_bag_item(__pycfg_bag__,*args):
	return __py_cfg_call(66,__pycfg_bag__,*args)
def __py_cfg_internal_function_add_bag_item(__pycfg_bag__,*args):
	try:

		[s,square,csr,cr,br,bag_item,stopped] = list(args)
		if bag_item and bag_item != "|": # □:66
		  br.bag.append(bag_item) # □:66
		pass # □:66
	except Exception as e:
		raise e
	if stopped:

		return 65,__pycfg_bag__,[s,square,csr,cr,br]
	if br.char == "|":

		return 43,__pycfg_bag__,[s,square,csr,cr,br]
	if br.char == " ":

		return 61,__pycfg_bag__,[s,square,csr,cr,br]
	return None,None,None
__pycfg_squares__ = {3:__py_cfg_internal_function_print_header,4:__py_cfg_internal_function_read_line,8:__py_cfg_internal_function_json_load_line,9:__py_cfg_internal_function_invalid_json,10:__py_cfg_internal_function_start_function,11:__py_cfg_internal_function_print_end,24:__py_cfg_internal_function_return_value,25:__py_cfg_internal_function_just_run,26:__py_cfg_internal_function_parse_args,0:__py_cfg_internal_function_initialize_state,28:__py_cfg_internal_function_take_first_line,29:__py_cfg_internal_function_blank_square,30:__py_cfg_internal_function_print_function_line,31:__py_cfg_internal_function_close_out_function_body,32:__py_cfg_internal_function_gather_exceptions_and_conditions,33:__py_cfg_internal_function_print_exceptions,34:__py_cfg_internal_function_print_conditions,35:__py_cfg_internal_function_get_name_and_bag,36:__py_cfg_internal_function_get_condition,37:__py_cfg_internal_function_malformed_condition,38:__py_cfg_internal_function_read_string,39:__py_cfg_internal_function_read_string_char,40:__py_cfg_internal_function_read_string_escape,42:__py_cfg_internal_function_read_bag,43:__py_cfg_internal_function_hand_white_space,47:__py_cfg_internal_function_new_hand_item,48:__py_cfg_internal_function_hand_item_char,50:__py_cfg_internal_function_build_continuation,51:__py_cfg_internal_function_add_exception,53:__py_cfg_internal_function_add_condition,56:__py_cfg_internal_function_condition_char,57:__py_cfg_internal_function_layout_hand,58:__py_cfg_internal_function_unpack_bag,59:__py_cfg_internal_function_next_bag_item,60:__py_cfg_internal_function_unpack_bag_item,61:__py_cfg_internal_function_bag_white_space,63:__py_cfg_internal_function_bag_item_char,64:__py_cfg_internal_function_new_bag_item,65:__py_cfg_internal_function_no_bag_items_packed,66:__py_cfg_internal_function_add_bag_item}
def __pycfg_call__(__pycfg_square__,__pycfg_bag__,*args):
	__pycfg_hand__ = list(args)
	while __pycfg_square__ is not None:
		__pycfg_square__,__pycfg_bag__,__pycfg_hand__ = __pycfg_squares__[__pycfg_square__](__pycfg_bag__,*__pycfg_hand__)
	return __pycfg_hand__
import types
__pycfg_call__(0,types.SimpleNamespace(),[])

