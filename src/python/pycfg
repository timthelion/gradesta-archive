#!/usr/bin/python3
import json
import fileinput
import sys

imports = ""
squares = []
in_function = True
print("PyCfgSquareState = type('PyCfgSquareState', (object,), {})")
for line in fileinput.input():
	if line.startswith("#"):
		print(line)
	try:
		id,text,streets = json.loads(line)
	except ValueError:
		sys.exit("Line: "+str(lineno)+"\n"+line+"\nis invalid.")
	if text:
		first_line = True
		something_was_printed = False
		for l in text.split("\n"):
			lwords = l.split()
			if first_line:
				print("def "+lwords[0]+"(*args):\n\treturn __py_cfg_call("+str(id)+",*args)\n")
				print("def __py_cfg_internal_function_"+lwords[0]+"(*args):")
				squares.append((id,lwords[0]))
				if len(lwords) > 1:
					print("\t["+",".join(lwords[1:])+"] = list(args)")
				print("\ttry:")
				first_line = False
			elif line.startswith("import "):
				imports = imports + "\n" + line + " # □:"+str(id)
			else:
				if l.strip():
					something_was_printed = True
				if l.strip().startswith("return "):
					 l = l.replace("return","return None,")
				print("\t\t"+l+" # □:"+str(id))
		print("\t\tpass # □:"+str(id))
		conditions = []
		exceptions = []
		exception = False
		cont = ""
		for s in reversed(streets):
			vars_to_pass_on = []
			cond = []
			reading_cond = False
			next_square = s[1]
			for v in reversed(s[0].split()):
				if v == "except":
					exception = True
				if reading_cond:
					cond = [v] + cond
				elif v.endswith(";"):
					reading_cond = True
					if v[:-1]:
						cond = [v[:-1]] + cond
				elif v == "return":
					next_square = None
				else:
					vars_to_pass_on.insert(0,v)
			continuation = "return "+str(next_square)+",["+",".join(vars_to_pass_on)+"]"
			if not exception:
				conditions.insert(0,"\tif "+" ".join(cond)+": # □:"+str(id)+"\n\t\t"+cont+"\n\t\t"+continuation)
			else:
				exceptions.insert(0,"\t"+" ".join(cond)+": # □:"+str(id)+"\n\t\t"+cont+"\n\t\t"+continuation)
			cont = ""
		for e in exceptions:
			print(e)
		print("\texcept Exception as e:\n\t\traise e")
		for c in conditions:
			print(c)
		print("\treturn None,None")
print(imports)
print("__py_cfg_squares = {"+",".join(map(lambda sqr: str(sqr[0])+":__py_cfg_internal_function_"+sqr[1],squares))+"}")
print("""
def __py_cfg_call(__py_cfg_square,*args):
  __py_cfg_bag = list(args)
  while __py_cfg_square is not None:
    __py_cfg_square,__py_cfg_bag = __py_cfg_squares[__py_cfg_square](*__py_cfg_bag)
  return __py_cfg_bag

""")
if in_function:
  print("return __py_cfg_call(0,[])")
else:
  print("__py_cfg_call(0,[])")
