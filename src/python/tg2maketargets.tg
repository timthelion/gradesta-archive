[0, "#!/usr/bin/python3\n#tg2maketargets transforms a dependency graph into valid GNU Make code.\n\n#Each square is transformed into a GNU Make target who's dependencies are determined by that square's incomming streats. Square 0 is printed out verbatim then ignored.", [["^#", 23], ["", 12], ["!pycfg", 26]]]
[69, "print_squares args graph\nsquare_iter=iter(graph.getNeighborhood(0)[0])", [[";args graph square_iter |", 70]]]
[70, "next_square square_iter |\nsquare = next(square_iter)", [["square.squareId == 0; square_iter|", 70], ["len(square.text.split(\"\\n\")) == 1; square_iter|", 70], ["; square_iter| square", 73], ["end;", 71]]]
[71, "end_of_program\npass", []]
[73, "compile_make_target square\ndependency_iter = iter(square.incommingStreets)", [["; dependency_iter | square []", 74]]]
[74, "next_dependency graph dependency_iter| square dependencies\ndependency = graph[next(dependency_iter).origin]", [["dependency.squareId == 0; dependency_iter graph | square dependencies", 74], ["; dependency_iter graph | square dependencies dependency", 76], ["end; graph| square dependencies", 78]]]
[12, "#imports\nimport sys\nimport argparse\nimport textgraph\nfrom types import SimpleNamespace", []]
[76, "add_dependency square dependencies dependency\ndependencies.append(dependency.title)", [["; square dependencies", 74]]]
[78, "print_make_target args| square dependencies\nprint(\"%s:%s\"%(square.title,\" \".join(dependencies)),file=args.outfile)\nfor line in square.text.split(\"\\n\")[1:]:\n  print(\"\\t%s\"%line,file=args.outfile)\nprint(\"\",file=args.outfile)", [[";args|", 70]]]
[79, "print_square_zero args graph\nprint(graph[0].text,file=args.outfile)", [["; args graph", 69]]]
[23, "", []]
[26, "parse_args\nparser = argparse.ArgumentParser(description='tg2maketargets transforms a dependency graph into valid GNU Make code.\\nEach square is transformed into a GNU Make target who\\'s dependencies are determined by that square\\'s incomming streats. Square 0 is printed out verbatim then ignored.')\nparser.add_argument('infile', type=argparse.FileType('r'),nargs='?', default=sys.stdin)\nparser.add_argument('outfile', type=argparse.FileType('w'),nargs='?', default=sys.stdout)                   \nargs = parser.parse_args()\ngraph = textgraph.TextGraphFile(file=args.infile)", [[";args graph", 79]]]
