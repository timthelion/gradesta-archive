[0, "#!/usr/bin/python3\n# The gradesta-manager is the universal middle man of the gradesta protocol.\n# It tracks gradesta clients and which cells they are subscribed to.", [["^#", 1], ["", 2], ["", 195], ["", 49], ["", 78], ["!^pycfg", 4]]]
[1, "License: AGPL >= 3\nCopyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.", []]
[2, "#imports\nimport sys\nimport optparse\nimport os\nimport zmq\nimport select\nimport gradesta_pb2\nimport subprocess\nimport fcntl\nimport attr\nimport posix", []]
[513, "staged = attr.ib (default = attr.Factory(gradesta_pb2.ClientState))", []]
[4, "parse_cli_args\nparser = optparse.OptionParser(usage=\"gradesta-manager SERVICE_PID\",description=\"\"\"the universal middle man of the gradesta protocol.\"\"\")\n\noptions,args = parser.parse_args()\nservice_pid = int(args[0])", [[";args| service_pid", 186]]]
[517, "def stage_cells(self,cells):", [["^\\t", 518]]]
[514, "#other_clients\n@property\ndef other_clients(self):\n ocd = {}\n for client_id,client in self.manager.clients.items():\n  if client_id != self.client_id:\n   ocd[client_id] = client\n return ocd", []]
[519, "staged = attr.ib (default = attr.Factory(gradesta_pb2.ServiceState))", []]
[520, "def stage_state(self,message):", [["^\\t", 543]]]
[521, "def stage_cells(self,cells):", [["^\\t", 545]]]
[522, "def stage_bookmarks(self,bookmarks):", [["^\\t", 548]]]
[523, "def stage_delete_bookmark(self,deleted_bookmark):", [["^\\t", 547]]]
[524, "def commit(self):", [["^\\t", 549]]]
[525, "def stage_out_of_view(self,cell_ids):", [["^\\t", 546]]]
[526, "def stage_in_view(self,cell_ids,since_generation = None):\n raise Exception(\"Not implemented.\")", []]
[527, "def run_get_que(self):", [["^\\t", 542]]]
[528, "cell_versions = attr.ib (default = attr.Factory(dict))", []]
[529, "#verify_link_consistency", []]
[530, "#update_selections\nfor selection_id, selection in message.selections.items():\n try:\n  so = self.manager.selections[selection_id]\n  for client_id,status in selection.clients.items():\n   if status == gradesta_pb2.NONE:\n    try:\n     self.manager.clients[client_id].drop_selection(selection_id)\n     del so.clients[client_id]\n    except KeyError:\n     pass\n  if not so.clients:\n   del self.manager.selections[selection_id]\n   continue\n except KeyError:\n  so = Selection(self.manager)\n  self.manager.selections[selection_id] = so\n if selection.update_count <= so.update_count and so.update_count > 0:\n  self.stage_selection_rollback(selection_id)\n  continue\n if selection.HasField(\"name\"):\n  so.name = selection.name\n cursor_objects = []\n old_cursor_objects = so.cursors\n for cursor in selection.cursors:\n  try:\n   co = old_cursor_objects.pop(0)\n  except IndexError:\n   co = Cursor(parent = so)\n  co.update(cursor)\n  cursor_objects.append(co)\n so.cursors = cursor_objects\n for client_id,status in selection.clients.items():\n  if status == gradesta_pb2.Selection.NONE:\n   continue\n  so.clients[client_id] = status\n  \n for client in self.manager.clients.values():\n  client.stage_selection(selection_id,selection)\nprint(self.manager.selections)", []]
[531, "#apply_service_state_changes_to_self", []]
[532, "#stage_service_state_changes_to_service", []]
[533, "#commit_service_state_changes_to_service (stages rollbacks and corrections to clients)", []]
[534, "", [["", 529], ["", 530], ["", 531], ["", 532], ["", 533], ["", 535], ["", 536], ["", 537]]]
[535, "#run_get_process_loop", []]
[536, "#send_staged_changes_to_other_clients", []]
[537, "#reply_with_staged_changes_to_this_client\nm = gradesta_pb2.ClientState()\nself.client_socket.send(m)", []]
[538, "Member subclasses", [["", 223], ["", 289], ["", 290], ["", 492], ["", 382]]]
[539, "get_que = attr.ib (default = attr.Factory(list))", []]
[542, "for get in self.get_que:\n if get.cell_id in self.service.cells:\n  self.update_cell(cell_id,self.service.cells(cell_id))\n else:\n  self.service.stage_get_cell(cell_id)\nresponse = self.service.commit()", []]
[543, "self.staged.CopyFrom(message)", []]
[544, "raise Exception(\"Boom! Unimplemented!\")", []]
[545, "for cell_id, cell in cells:\n sc = self.staged.cells[cell_id]\n sc.CopyFrom(cell)", []]
[546, "raise Exception(\"Not implmeneted.\")", []]
[547, "bm = self.staged.bookmarks[deledted_bookmark]\nbm.status = gradesta_pb2.Bookmark.DELETED", []]
[548, "for bookmark_name, dest in bookmarks:\n bm = self.staged.bookmarks\n bm.cell_id = dest\n bm.status = gradesta_pb2.Bookmark.NORMAL", []]
[549, "self.service_sock.send(self.staged)\nself.process(self.staged)\nself.staged = gradesta_pb2.ServiceState()\nreaction = self.service_sock.recv()\nself.process(reaction)\nreturn reaction", []]
[550, "clients = attr.ib (default = attr.Factory(dict))", []]
[551, "def stage_selection(self,selection_id,selection):", [["^\\t", 552]]]
[552, "s = self.staged.selections[selection_id]\ns.CopyFrom(selection)", []]
[553, "def update(self, cursor):", [["^\\t", 554]]]
[554, "self.name = cursor.name\nself.center = cursor.center\nself.center_stack_depth = cursor.center_stack_depth\nself.directions = cursor.directions\nself.max_distance = cursor.max_distance\nself.max_cells = cursor.max_cells\nself.data_cursors = cursor.data_cursors", []]
[518, "for cell_id,cell in cells:\n c = self.staged.service_state.cells[cell_id]\n try:\n  current_edit_count = self.cell_verions[cell_id]\n  if cell.edit_count == current_edit_count:\n   #todo\n   pass   \n except KeyError: \n  pass\n self.cell_versions[cell_id] = cell.edit_count\n c.CopyFrom(cell)", []]
[49, "#functions", []]
[78, "#classes", [["", 261], ["", 248], ["", 200], ["", 472], ["", 492], ["", 223], ["", 237], ["", 141], ["", 217], ["", 269], ["", 146], ["", 154], ["", 289], ["", 290], ["", 291], ["#", 492], ["", 382], ["", 426]]]
[141, "class ClientSock(REQ):", [["^\\t", 145], ["#", 165]]]
[143, "def __init__(self,client):", [["^\\t", 144]]]
[144, "self.client = client\nself.manager = client.manager\nsocket_path = os.path.join(client.socket_dir,\"client.gradesock\")\nsuper().__init__(socket_path,gradesta_pb2.ClientState)", []]
[145, "#methods", [["", 143], ["#", 194], ["", 259]]]
[146, "#ServiceSock class\n@attr.s\nclass ServiceSock(REQ):", [["^\\t", 419], ["^\\t", 149], ["#", 165]]]
[149, "#methods", [["", 150], ["", 152]]]
[150, "def __attrs_post_init__(self):", [["^\\t", 151]]]
[151, "super().__init__(self.socket,gradesta_pb2.ServiceState)\ninit_message = gradesta_pb2.ServiceState()\nself.send(init_message)\nself.process(self.recv())", []]
[152, "def process(self,message):", [["^\\t", 153]]]
[153, "self.service.process(message)", []]
[154, "#ServiceManagerSock class\n@attr.s\nclass ServiceManagerSock(REP):", [["^\\t", 416], ["^\\t", 155], ["#", 196]]]
[155, "# methods", [["", 156], ["", 218]]]
[156, "def __attrs_post_init__(self):", [["^\\t", 157]]]
[157, "super().__init__(\"manager.gradesock\",gradesta_pb2.ServiceState)", []]
[165, "class REQ(ProtobufSocket):", [["^\\t", 166], ["#", 176]]]
[166, "#methods", [["", 167]]]
[167, "def __init__(self,socket,msg_type):", [["^\\t", 168]]]
[168, "super().__init__(msg_type)\nself.socket = zmq_context.socket(zmq.REQ)\nself.socket_path = \"ipc://\"+os.path.join(os.getcwd(),socket)\nself.socket.connect(self.socket_path)", []]
[169, "class PUB(ProtobufSocket):", [["^\\t", 170], ["#", 176]]]
[170, "#methods", [["", 172]]]
[172, "def __init__(self,socket,msg_type):", [["^\\t", 173]]]
[173, "super().__init__(msg_type)\nself.socket = zmq_context.socket(zmq.PUB)\nself.socket_path = \"ipc://\"+os.path.join(os.getcwd(),socket)\nself.socket.connect(self.socket_path)", []]
[174, "def send(self,message):", [["^\\t", 175]]]
[175, "self.socket.send(message.SerializeToString())", []]
[176, "class ProtobufSocket():", [["^\\t", 177]]]
[177, "#methods", [["", 180], ["", 174], ["", 178], ["", 278]]]
[178, "def recv(self):", [["^\\t", 179]]]
[179, "m = self.msg_type()\nm.ParseFromString(self.socket.recv())\nreturn m", []]
[180, "def __init__(self,msg_type):", [["^\\t", 181]]]
[181, "self.msg_type = msg_type", []]
[185, "process_req_from_service\nself.logger.log(\"Waiting for a message on manager.gradesock.\")\nmessage = self.recv();\nself.logger.log(\"Received message on manager.gradesock\")\nself.service.process(message.service_state)", []]
[186, "make_manager_object_and_loop service_pid\nmanager = Manager(service_pid)\nmanager.loop()", []]
[194, "def get_owned_cells(self,cells):", []]
[195, "#globals\nzmq_context = zmq.Context()\nUP     = 0b0001\nRIGHT  = 0b0010\nDOWN   = 0b0100\nLEFT   = 0b1000\n\nALL_DIRECTIONS = 0b1111\n\nALL_BUT_UP    = UP    | ALL_DIRECTIONS\nALL_BUT_RIGHT = RIGHT | ALL_DIRECTIONS\nALL_BUT_DOWN  = DOWN  | ALL_DIRECTIONS\nALL_BUT_LEFT  = LEFT  | ALL_DIRECTIONS", []]
[196, "class REP(ProtobufSocket):", [["^\\t", 197], ["#", 176]]]
[197, "#methods", [["", 198]]]
[198, "def __init__(self,socket,msg_type):", [["^\\t", 199]]]
[199, "super().__init__(msg_type)\nself.socket = zmq_context.socket(zmq.REP)\nself.socket.bind(\"ipc://\"+os.path.join(os.getcwd(),socket))", []]
[200, "class Logger:", [["^\\t", 201]]]
[201, "#methods", [["", 202], ["", 204]]]
[202, "def __init__(self):", [["^\\t", 203]]]
[203, "pass", []]
[204, "def log(self,m):", [["^\\t", 205]]]
[205, "print(m)", []]
[206, "take_client | message\nclient = next(client_iter)", [["client.status == gradesta_pb2.ClientState.INITIALIZING; client_iter | client", 208], ["client.status == gradesta_pb2.Client.DISCONNECTING; client_iter | client", 210], ["; client_iter | client", 209]]]
[207, "pass_on_message client_origins message |\nif client_origins:\n self.logger.log(\"Forwarding message to service to see what service has to say.\")\n self.service.send(message.service_state)\n rep = self.service.recv()\n self.socket.send(rep.SerializeToString())\nelse:\n rep = gradesta_pb2.ClientState()\n self.logger.log(\"Sending empty response to service.\")\n self.socket.send(rep.SerializeToString())\nfor client_id,client in self.clients.items():\n if not client_id in client_origins:\n  self.logger.log(\"Forwarding message to client %s.\"%client_id)\n  client.send(message)", [[";", 185]]]
[208, "add_new_clients client\nif client.client_id in self.clients:\n self.logger.log(\"Error, cannot initialize client twice.\\n%s\",str(client))\nelse:\n self.logger.log(\"Adding new client %s with human readable name '%s'.\"%(client.client_id,client.name))\n self.clients[client.client_id] = Client(os.path.join(client.client_id,\"client.gradesock\"),client)", [[";client", 209]]]
[209, "add_client_origin client_origins | client\nclient_origins.add(client.client_id)", [["; client_origins | client", 211]]]
[210, "disconnect_client client\nprint(\"Client %s is disconnecting.\"%(client.client_id))\ntry:\n del self.clients[client.client_id]\nexcept KeyError:\n pass", [[";", 207]]]
[211, "process_client_state client\nself.clients[client.client_id].process(client)", [[";", 207]]]
[217, "class ClientManagerSock(REP):", [["^\\t", 220], ["#", 196]]]
[218, "def process(self,m):", [["^\\t", 219]]]
[219, "", [["!^pycfg -f", 206]]]
[220, "#methods", [["", 221], ["", 267], ["", 305]]]
[221, "def __init__(self,client):", [["^\\t", 222]]]
[222, "self.client = client\nsuper().__init__(os.path.join(self.client.socket_dir,\"manager.gradesock\"),gradesta_pb2.ClientState)", []]
[223, "#Manager class\n@attr.s\nclass Manager(Member):", [["^\\t", 459], ["^\\t", 224], ["^\\t", 467], ["#", 237], ["#", 269], ["#", 289], ["#", 248], ["#", 200]]]
[224, "#methods", [["", 460], ["", 227], ["", 280], ["", 308], ["", 527]]]
[226, "selections = attr.ib (default = attr.Factory(dict))", []]
[227, "def loop(self):", [["^\\t", 228]]]
[228, "", [["!^pycfg -f", 229]]]
[229, "wait_for_event\nself.logger.log(\"Waiting\")\n(r,w,x) = zmq.select([self.service.service_manager_sock.socket,self.client_connection_watchdog]+[x.manager_socket.socket for x in self.clients.values()],[],[])\nself.logger.log(\"Events recieved. Read: %s Write: %s Errors: %s\"%(r,w,x))\nfnos = r+w+x\nfnosi = iter(fnos)", [[";fnosi|", 233]]]
[233, "read_sockets fnosi |\nfno = next(fnosi)", [["fno == self.service.service_manager_sock.socket;fnosi |", 234], ["fno == self.client_connection_watchdog.fileno(); fnosi|", 235], ["; fnosi | fno", 236], ["end;", 229]]]
[234, "service_manager_req\nself.service.service_manager_sock.process(self.service.service_manager_sock.recv())", [[";", 233]]]
[235, "process_client_connect_disconnect\nself.client_connection_watchdog.clear()\ndirs = os.listdir(\"clients\")\ndirs = [dir for dir in dirs if dir not in (\"..\",\".\")]\nclients_with_socks = []\ncleaned_up_now = set()\nfor dir in dirs:\n sock = os.path.join(\"clients\",dir,\"client.gradesock\")\n if os.path.exists(sock):\n  clients_with_socks.append(dir)\n elif not os.path.exists(os.path.join(\"clients\",dir,\"manager.gradesock\")):\n  os.rmdir(os.path.join(\"clients\",dir))\n  cleaned_up_now.add(dir)\nif not set(dirs) - cleaned_up_now:\n self.shutdown()\n#process disconnections\nclients_to_disconnect = [client_id for client_id in self.clients.keys() if client_id not in clients_with_socks]\nself.logger.log(\"Clients to disconnect: \"+str(clients_to_disconnect))\nfor client_id in clients_to_disconnect:\n self.clients[client_id].disconnect()\n del self.clients[client_id]\n#process connections\nclients_to_connect = [client_id for client_id in clients_with_socks if client_id not in self.clients]\nfor client_id in clients_to_connect:\n client = Client(self,client_id)\n self.logger.log(client_id)\n self.clients[client_id] = client\n client.init_manager_socket()\n client.connect_client_socket()\nself.logger.log(\"Currently connected clients:\")\nfor client_id,client in self.clients.items():\n self.logger.log(client_id + \": \"+client.name)", [[";", 233]]]
[236, "process_client_req fno\nfor client_id,client in self.clients.items():\n if client.manager_socket.socket == fno:\n  client.manager_socket.process(client.manager_socket.recv())\n  break", [[";", 233]]]
[237, "#Client class\n@attr.s\nclass Client:", [["^\\t", 398], ["^\\t", 238], ["^\\t", 240], ["#", 141], ["#", 217]]]
[238, "#methods", [["", 243], ["", 245], ["", 266], ["", 276], ["", 517], ["", 551]]]
[240, "#properties", [["", 241], ["", 514]]]
[241, "#socket_dir\n@property\ndef socket_dir(self):\n return os.path.join(\"clients\",self.client_id)", []]
[243, "def init_manager_socket(self):", [["^\\t", 244]]]
[244, "self.manager_socket = ClientManagerSock(self)", []]
[245, "def connect_client_socket(self):", [["^\\t", 246]]]
[246, "self.client_socket = ClientSock(self)\nself.client_socket.send_init_message()", []]
[248, "class ClientConnectionWatchdog:", [["^\\t", 249]]]
[249, "#methods", [["", 250], ["", 252], ["", 253]]]
[250, "def __init__(self):", [["^\\t", 251]]]
[251, "self.proc = subprocess.Popen([\"inotifywait\",\"--monitor\",\"--recursive\",\"--event\",\"create\",\"--event\",\"delete\",\"clients\"],stdout=subprocess.PIPE)\n# http://eyalarubas.com/python-subproc-nonblock.html\nflags = fcntl.fcntl(self.proc.stdout, fcntl.F_GETFL)\nfcntl.fcntl(self.proc.stdout, fcntl.F_SETFL, flags | os.O_NONBLOCK)", []]
[252, "def fileno(self):", [["^\\t", 254]]]
[253, "def clear(self):", [["^\\t", 255]]]
[254, "return self.proc.stdout.fileno()", []]
[255, "print(\"READ:\"+self.proc.stdout.read().decode(\"utf-8\"))", []]
[259, "def send_init_message(self):", [["^\\t", 260]]]
[260, "m = gradesta_pb2.ClientState()\n#m.service_state.bookmarks.update(self.client.manager.service.bookmarks)\nm.service_state.name = self.manager.service.name\nm.service_state.source_url = self.manager.service.source_url\nfor name,dest in self.manager.service.bookmarks.items():\n b = m.service_state.bookmarks[name]\n b.cell_id = dest\n b.status = gradesta_pb2.Bookmark.NORMAL\n\nself.send(m)\nself.recv()\nself.manager.logger.log(\"Sent init message to client %s. Via socket %s\"%(self.client.client_id,self.socket_path))", []]
[261, "#ZMQ/Protobuf helpers", [["", 176], ["", 165], ["", 196], ["", 169], ["", 262]]]
[262, "class ROUTER(ProtobufSocket):", [["^\\t", 263], ["#", 176]]]
[263, "#methods", [["", 264]]]
[264, "def __init__(self,socket,msg_type):", [["^\\t", 265]]]
[265, "super().__init__(msg_type)\nself.socket = zmq_context.socket(zmq.ROUTER)\nself.socket_path = \"ipc://\"+os.path.join(os.getcwd(),socket)\nself.socket.connect(self.socket_path)", []]
[266, "def disconnect(self):", [["^\\t", 275]]]
[267, "def disconnect(self):", [["^\\t", 268]]]
[268, "self.socket.close()", []]
[269, "#Service class\n@attr.s\nclass Service:", [["^\\t", 406], ["^\\t", 270], ["#", 154], ["#", 146]]]
[270, "#methods", [["", 273], ["", 282], ["", 511], ["", 520], ["", 521], ["", 526], ["", 525], ["", 522], ["", 523], ["", 524]]]
[272, "service_sock = attr.ib ()\n@service_sock.default\ndef __ss_d(self):\n return ServiceSock(self.manager,self,\"service.gradesock\")", []]
[273, "def process(self,message):", [["^\\t", 274]]]
[274, "self.name = message.name\nself.source_url = message.source_url\nfor name,bookmark in message.bookmarks.items():\n if bookmark.status == gradesta_pb2.Bookmark.NORMAL:\n  self.bookmarks[name] = bookmark.cell_id\n elif bookark.status == gradesta_pb2.Bookmark.DELETED:\n  del self.bookmarks[name]\nself.cells.update(message.cells)\nself.saved = message.saved\nfor name,dest in self.bookmarks.items():\n print(name+\": \"+dest)", []]
[275, "self.manager_socket.close()", []]
[276, "def process(self,message):", [["^\\t", 534], ["#", 302], ["#", 301]]]
[277, "if len(message.clients) == 0:\n return\nif (len(message.clients) != 1) or (self.client_id not in message.clients):\n self.manager.logger.log(\"Error, clients can only set their own states.\")\n return\nmclient = message.clients[self.client_id]\nself.name = mclient.name if mclient.name else self.name\nself.source_url = mclient.source_url if mclient.source_url else self.source_url\nself.manager.logger.log(\"%s %s\"%(self.name,self.source_url))", []]
[278, "def close(self):", [["^\\t", 279]]]
[279, "self.socket.close()", []]
[280, "def shutdown(self):", [["^\\t", 281]]]
[281, "self.service.shutdown()\nsys.exit()", []]
[282, "def shutdown(self):", [["^\\t", 283]]]
[283, "posix.kill(self.pid, 15) #send TERM to service", []]
[289, "#Selection class\n@attr.s\nclass Selection(Member):", [["^\\t", 444], ["^\\t", 292], ["#", 290]]]
[290, "#Cursor class\n@attr.s\nclass Cursor(Member):", [["^\\t", 448], ["^\\t", 295], ["^\\t", 479], ["#", 291], ["", 492]]]
[291, "#DataCursor class\n@attr.s\nclass DataCursor:", [["^\\t", 441]]]
[292, "#methods", []]
[295, "#methods", [["", 553]]]
[301, "def process_clients():", [["^\\t", 277]]]
[302, "def process_service_state():", [["^\\t", 304]]]
[304, "if message.HasField(\"service_state\"):\n ", []]
[305, "def process(self,message):", [["^\\t", 306]]]
[306, "self.client.process(message)", []]
[308, "def process_selection_change(self,selection_id,selection):", [["^\\t", 381]]]
[381, "pass", []]
[382, "#CellView class\n@attr.s\nclass CellView(Member):", [["^\\t", 384], ["^\\t", 383], ["^\\t", 481], ["", 492]]]
[383, "#methods", []]
[384, "#attrs", [["", 423], ["", 424], ["", 387], ["", 395], ["", 390], ["", 391], ["", 392], ["", 393], ["", 388], ["", 389]]]
[387, "parents = attr.ib ()", []]
[388, "remaining_stack_space_up = attr.ib ()", []]
[389, "remaining_stack_space_down = attr.ib ()", []]
[390, "up = attr.ib ()", []]
[391, "down = attr.ib ()", []]
[392, "left = attr.ib ()", []]
[393, "right = attr.ib ()", []]
[395, "directions = attr.ib ()", []]
[398, "#attrs", [["", 399], ["", 400], ["", 401], ["", 402], ["", 403], ["", 404], ["", 405], ["", 513], ["", 528]]]
[399, "manager = attr.ib ()", []]
[400, "client_id = attr.ib ()", []]
[401, "name = attr.ib (default = \"\")", []]
[402, "source_url = attr.ib (default = \"\")", []]
[403, "selection_statuses = attr.ib (default = \"\")", []]
[404, "manager_socket = attr.ib (default = None)", []]
[405, "client_socket = attr.ib (default = None)", []]
[406, "#attrs", [["", 407], ["", 409], ["", 410], ["", 411], ["", 412], ["", 413], ["", 414], ["", 415], ["", 272], ["", 519]]]
[407, "manager = attr.ib ()", []]
[409, "pid = attr.ib ()", []]
[410, "name = attr.ib (default = \"\")", []]
[411, "source_url = attr.ib (default = \"\")", []]
[412, "bookmarks = attr.ib (default = attr.Factory(dict))", []]
[413, "cells = attr.ib (default = attr.Factory(dict))", []]
[414, "saved = attr.ib (default = True)", []]
[415, "service_manager_sock = attr.ib ()\n@service_manager_sock.default\ndef __sms_d(self):\n return ServiceManagerSock(self.manager,self)", []]
[416, "#attrs", [["", 417], ["", 418]]]
[417, "manager = attr.ib ()", []]
[418, "service = attr.ib ()", []]
[419, "#attrs", [["", 420], ["", 421], ["", 422]]]
[420, "manager = attr.ib ()", []]
[421, "service = attr.ib ()", []]
[422, "socket  = attr.ib ()", []]
[423, "manager = attr.ib ()", []]
[424, "cursor = attr.ib ()", []]
[426, "#Directions class\n@attr.s\nclass Directions:", [["^\\t", 427], ["^\\t", 435]]]
[427, "#attrs", [["", 432]]]
[432, "directions = attr.ib ()", []]
[435, "#properties", [["", 438], ["", 436], ["", 439], ["", 440]]]
[436, "#left\n@property\ndef left(self):\n return self.directions & LEFT\n\n@left.setter\ndef left(self, l):\n if l:\n  self.directions = self.directions | LEFT\n else:\n  self.directions = self.directions & ALL_BUT_LEFT", []]
[438, "#right\n@property\ndef right(self):\n return self.directions & RIGHT\n\n@right.setter\ndef right(self, d):\n if d:\n  self.directions = self.directions | RIGHT\n else:\n  self.directions = self.directions & ALL_BUT_RIGHT", []]
[439, "#up\n@property\ndef up(self):\n return self.directions & UP\n\n@up.setter\ndef up(self, d):\n if d:\n  self.directions = self.directions | UP\n else:\n  self.directions = self.directions & ALL_BUT_UP", []]
[440, "#down\n@property\ndef down(self):\n return self.directions & DOWN\n\n@down.setter\ndef down(self, d):\n if d:\n  self.directions = self.directions | DOWN\n else:\n  self.directions = self.directions & ALL_BUT_DOWN", []]
[441, "#attrs", [["", 443], ["", 442]]]
[442, "len = attr.ib (default = 1)", []]
[443, "start = attr.ib (default = 0)", []]
[444, "#attrs", [["", 489], ["", 446], ["", 445], ["", 447], ["", 478], ["", 550]]]
[445, "cursors = attr.ib (default = attr.Factory(list))", []]
[446, "name = attr.ib (default = \"\")", []]
[447, "update_count = attr.ib (default = 0)", []]
[448, "#attrs", [["", 490], ["", 449], ["", 450], ["", 451], ["", 452], ["", 453], ["", 454], ["", 455], ["", 456], ["#", 457], ["#", 458]]]
[449, "name = attr.ib (default = \"\")", []]
[450, "_center = attr.ib (default = \"\")", []]
[451, "center_stack_depth = attr.ib (default = 0)", []]
[452, "directions = attr.ib (default = None)", []]
[453, "max_distance = attr.ib (default = 0)", []]
[454, "max_cells = attr.ib (default = 1)", []]
[455, "data_cursors = attr.ib (default = attr.Factory(list))", []]
[456, "cell_view_tree = attr.ib (default = attr.Factory(VersionedLink))", []]
[457, "in_view = attr.ib (default = attr.Factory(set))", []]
[458, "newly_out_of_view = attr.ib (default = attr.Factory(set))", []]
[459, "#attrs", [["", 466], ["", 462], ["", 463], ["", 464], ["", 465], ["", 226], ["", 477], ["", 488], ["", 539]]]
[460, "def __attrs_post_init__(self):", [["^\\t", 461]]]
[461, "try:\n os.mkdir(\"clients\")\nexcept FileExistsError:\n pass", []]
[462, "service =  attr.ib ()\n@service.default\ndef service_default(self):\n return Service(self,self.service_pid)", []]
[463, "client_connection_watchdog = attr.ib(default = attr.Factory(ClientConnectionWatchdog))", []]
[464, "logger = attr.ib (default = attr.Factory(Logger))", []]
[465, "clients = attr.ib (default = attr.Factory(dict))", []]
[466, "service_pid = attr.ib ()", []]
[467, "#properties", []]
[468, "#newly_out_of_view\n@property\ndef newly_out_of_view(self):\n noov = set()\n for subordinate in self.subordinates:\n  noov.update(subordinate.newly_out_of_view)\n return noov - self.newly_in_view", []]
[469, "#newly_in_view\n@property\ndef newly_in_view(self):\n niv = set()\n for subordinate in self.subordinates:\n  niv.update(subordinate.newly_in_view)\n return niv", []]
[472, "#Member class\n@attr.s\nclass Member:", [["^\\t", 483], ["^\\t", 473], ["#", 538]]]
[473, "#properties", [["", 469], ["", 468]]]
[477, "subordinates = attr.ib ()\n@subordinates.default\ndef subordinates_default(self):\n return self.selections", []]
[478, "subordinates = attr.ib ()\n@subordinates.default\ndef subordinates_default(self):\n return self.cursors", []]
[479, "#properties", [["", 480], ["", 504]]]
[480, "#subordinates\n@property\ndef subordinates(self):\n return [self.cell_view_tree]", []]
[481, "#properties", [["", 482], ["", 491]]]
[482, "#subordinates\n@property\ndef subordinates(self):\n subordinates_ = [self.left,self.right,self.up,self.down]\n return [subordinate for subordinate in subordinates_ if subordinate is not None]", []]
[483, "#methods", [["", 484]]]
[484, "def update_cell(self,cell_id,cell):", [["^\\t", 485]]]
[485, "for subordinate in self.subordinates:\n subordinate.update_cell(cell_id,cell)", []]
[488, "parent = attr.ib (default = None)", []]
[489, "parent = attr.ib (repr = False)", []]
[490, "parent = attr.ib (repr = False)", []]
[491, "#parent\n@property\ndef parent(self):\n if len(self.parents) > 0:\n  return self.parents[0]\n else:\n  return self.cursor", []]
[492, "#VersionedLink class\n@attr.s\nclass VersionedLink(Member):", [["^\\t", 493], ["^\\t", 501], ["#", 382]]]
[493, "#attrs", [["", 494], ["#", 497], ["#", 498], ["", 499], ["", 500], ["_", 503]]]
[494, "changed = attr.ib (default = None)", []]
[497, "newly_in_view = attr.ib (default = None)", []]
[498, "newly_out_of_view = attr.ib (default = None)", []]
[499, "unchanged = attr.ib (default = None)", []]
[500, "deleted = attr.ib (default = None)", []]
[501, "#methods", [["", 502]]]
[502, "def update_cell(self,cell_id,cell):", [["^\\t", 508]]]
[503, "cell_id = attr.ib (default = \"\")", []]
[504, "#center", [["", 506], ["", 507]]]
[506, "@property\ndef center(self):\n return self._center", []]
[507, "@center.setter\ndef center(self, center):\n self._center = center\n self.cell_view_tree.cell_id = center", []]
[508, "raise Exception(\"Unimplemented.\")", []]
[511, "def process_from_client(self,message):", [["^\\t", 544]]]
