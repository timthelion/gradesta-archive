[0, "#!/usr/bin/python3\n# The gradesta-manager is the universal middle man of the gradesta protocol.\n# It tracks gradesta clients and which cells they are subscribed to.", [["^#", 1], ["", 2], ["!^pycfg", 4]]]
[1, "License: AGPL >= 3\nCopyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.", []]
[2, "#imports\nimport sys\nimport argparse\nimport os\nimport zmq\nimport gradesta_pb2", []]
[32, "create_socket args |\ncontext = zmq.Context()\nsock = context.socket(zmq.REP)\nprint(os.path.join(args.socketdir,\"manager.sock\"))\nsock.bind(\"ipc://\"+os.path.join(args.socketdir,\"manager.sock\"))", [["; sock args |", 38]]]
[4, "parse_cli_args\nparser = argparse.ArgumentParser(description=\"\"\"gradesta-manager the universal middle man of the gradesta protocol.\"\"\",formatter_class=argparse.RawTextHelpFormatter)\nparser.add_argument('socketdir', type=str,\n                    help='The managed service\\'s socket directory.')\nargs = parser.parse_args()", [["; args|", 32]]]
[34, "next_req_id i | rpm\nrid = next(i)", [["; i | rid rpm 0", 35], ["end; rpm", 37]]]
[38, "empty_clients\nclients = {}", [["; clients |", 31]]]
[37, "send_reply sock | rpm\nsock.send(rpm.SerializeToString())", [["; sock |", 31]]]
[35, "generate_id clients | rid rpm suffix\nid = rid.prefix + \"_\" + str(suffix)", [["not id in clients; clients| id rpm", 36], [";clients | rid rpm suffix+1", 35]]]
[36, "add_id clients | id rpm\nidm = gradesta_pb2.ReplyId()\nidm.client_id = id\nrpm.reply_id.extend([idm])\nclients[id] = {}", [["; clients | rpm", 34]]]
[31, "recv sock |\nm = sock.recv()\nrqm = gradesta_pb2.RequestToManager()\nrqm.ParseFromString(m)\nrpm = gradesta_pb2.ReplyFromManager()\ni = iter(rqm.request_id)", [["; i rqm sock | rpm", 34]]]
