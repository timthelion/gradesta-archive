#!/usr/bin/python3
from textgraph import *
import sys
import argparse
import json
import subprocess
import copy
parser = argparse.ArgumentParser(description="""Print textgraph as text by concatinating square contents.

Do not run this command on untrusted input!

Street names effect the output. The prefix of a street name determines which effect it has.

`^` - If a streat name starts with ^ then the street name becomes a prefix which is prepended to each line in the subgraph. These prefixes are accumulative.
`!` - Passes the subgraph to the specified command and concatinates the output of that command.
`!^` - Same as `!`, however, follows the same prefixing rules as with normal concatination.
`#` - Ignore subgraph.

""",formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('files', metavar='FILE', nargs='+', help='template files to fill in and concatinate')
parser.add_argument('--comment-prefix', dest='commentPrefix', default=None, help='What prefix should we use to add squareId comments to each line of code?')
parser.add_argument('--dont-comment-square-zero', dest='dont_comment_square_zero',action="store_true", default=False, help='Don\'t add a squareId comment for square zero.')
args = parser.parse_args()
indentation = ""
printed_squares = set()

for file in args.files:
  tg = TextGraphFile(file)
  def printSquares(square,indentation):
    printed_squares.add(square)
    squareIdComment = ""
    if not args.commentPrefix is None:
      if not (square == 0 and args.dont_comment_square_zero):
        squareIdComment = args.commentPrefix + " â–¡:"+str(square)
    print(indentation+tg[square].text.replace("\n",squareIdComment+"\n"+indentation)+squareIdComment)
    for street in tg[square].streets:
      if street.name.startswith('#'):
        continue
      if street.name.startswith('!'):
        if street.name.startswith('!^'): 
          command = street.name[2:].split()
        else:
          command = street.name[1:].split()
        subgraphJSON = ""
        for node in tg.getDownstreamIds(street.destination):
          newNode = copy.deepcopy(tg[node])
          if node == street.destination:
            newNode.squareId = 0
          for s in newNode.streets:
            if s.destination == street.destination:
              s.destination = 0
          subgraphJSON += newNode.json + "\n" 
        command_output = subprocess.check_output(command,input=subgraphJSON.encode("utf-8"))
        if street.name.startswith("!^"):
          print(indentation + command_output.decode("utf-8").replace("\n","\n"+indentation))
        else:
          print(command_output.decode("utf-8"))
        continue
      if street.name.startswith('^'):
        # The json load here is in order to parse escape characters such as '\t'...
        newIndentation = indentation + json.loads('"' + street.name[1:] + '"')
      else:
        newIndentation = indentation
      if street.destination not in printed_squares:
        printSquares(street.destination,newIndentation)
  printSquares(0,"")
