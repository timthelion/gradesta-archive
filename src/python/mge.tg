[0, "#!/usr/bin/python3\n# Authors: Timothy Hobbs\n# Copyright years: 2016\n# Description:\n# mge is a simple TUI Vim style modal editor for text graphs.", [["^#", 154], ["", 1], ["", 139], ["", 2], ["", 137]]]
[1, "# imports\nimport sys\nimport os\nimport subprocess\nimport inspect\nimport optparse\nimport copy\nimport re\ntry:\n  import urwid\nexcept ImportError:\n  sys.exit(\"The urwid TUI toolkit is required to run this program. On debian based systems you need to install python3-urwid. On other systems you'll have to search the web.\")\nfrom textgraph import *", []]
[2, "# Classes", [["", 155], ["", 14], ["", 15], ["", 846], ["", 52], ["", 477], ["", 64], ["", 72], ["", 81], ["", 96], ["", 109], ["", 117], ["", 604], ["", 128]]]
[3, "#methods", [["", 4], ["", 12], ["", 162]]]
[4, "def __init__(self,filenames):", [["^\\t", 5]]]
[5, "# conf\nself.conf = Config()\n# clipboard\nself.clipboard = Clipboard(self)\nself.clipboardBoxAdapter = urwid.BoxAdapter(self.clipboard,3)\n# status bar\nself.statusBar = urwid.Text(\"\")\n# tab title\nself.tabTitle = urwid.Text(\"\")\n# command bar\nself.commandBar = CommandBar(self)\n# graph views/tabs\nself.graphViews = []\nfor filename in filenames:\n  self.graphViews.append(GraphView(TextGraphFile(filename),self))\nself._currentTab = 0\nself.currentTab = 0\nsuper(MultiTabEditor,self).__init__(self.graphViews[0],header=self.clipboardBoxAdapter,footer=urwid.BoxAdapter(urwid.ListBox(urwid.SimpleFocusListWalker([self.statusBar,urwid.AttrMap(self.tabTitle,\"tabtitle\"),self.commandBar])),height=4))", []]
[6, "#view\n@property\ndef view(self):", [["^\\t", 7]]]
[7, "return self.graphViews[self.currentTab]", []]
[8, "#currentTab\n@property\ndef currentTab(self):", [["^\\t", 9]]]
[9, "return self._currentTab", []]
[10, "@currentTab.setter\ndef currentTab(self,currentTab):", [["^\\t", 11]]]
[11, "self._currentTab = currentTab\nself.body = self.graphViews[currentTab]\nself.tabTitle.set_text(\"[\"+str(currentTab+1)+\"/\"+str(len(self.graphViews))+\"] \"+self.view.graph.filename)\nself.view.updateStatusBar()", []]
[12, "def keypress(self,size,key):", [["^\\t", 13]]]
[13, "command = self.getCommand(key)", [["", 144], ["", 147], ["", 149], ["", 151], ["", 146]]]
[14, "class MultiTabEditor(urwid.Frame):", [["^\\t", 3], ["^\\t", 142]]]
[15, "class GraphView(urwid.WidgetPlaceholder):", [["^\\t", 16], ["^\\t", 54]]]
[16, "#methods", [["", 17], ["", 19], ["", 21], ["", 23], ["", 166], ["", 45]]]
[17, "def __init__(self,graph,tabbedEditor):", [["^\\t", 18]]]
[18, "self.__mode = 'navigation'\nself.defaultStreetName = \"\"\nself.copied_text = \"\"\nself.graph = graph\nself._selection = 0\nself.tabbedEditor = tabbedEditor\nself.history = []\nself._statusMessage = \"\"\nself.graph.applyChangesHandler = self.update\n# incommingStreets\nself.incommingStreets = IncommingStreetsList(self)\n# current square\nself.currentSquare = CurrentSquare(self)\nself.currentSquareWidget = self.currentSquare#urwid.Filler(self.currentSquare)\n# streets\nself.streets = StreetsList(self)\n# search box\nself.searchBox = SearchBox(self)\n# help\nself.help = urwid.Filler(Help(self))\n# main widget\nself.myopic_graph_view = MyopicGraphView(self)\nsuper(GraphView,self).__init__(self.myopic_graph_view)\nself.updateStatusBar()\nself.focus_item = self.currentSquareWidget\nself.update()\nself.incommingStreets.focusLastStreet()", []]
[19, "def update(self):", [["^\\t", 20]]]
[20, "# Make sure the selected square still exists...\nif self.selection not in self.graph:\n  while self.history:\n    prevSelection = self.history.pop()\n    if prevSelection in self.graph and self.graph[prevSelection].text is not None:\n      self.selection = prevSelection\n      break\n  if not self.history:\n    self.selection = 0\n# incommingStreets\nincommingStreets = []\nfor incommingStreet in self.graph[self.selection].incommingStreets:\n  incommingStreets.append(copy.deepcopy(incommingStreet))\nself.incommingStreets.update(incommingStreets)\n# current square\ntry:\n  self.currentSquare.set_edit_text(self.selectedSquare.text)\nexcept AttributeError:\n  if self.history and not self.graph[self.history[-1]].text is None:\n    self.selection = self.history[-1]\n  else:\n    self.selection = 0\n  self.currentSquare.set_edit_text(self.selectedSquare.text)\n# streets\nself.streets.update(self.selectedSquare.streets)", []]
[21, "def updateStatusBar(self):", [["^\\t", 519]]]
[23, "def recordChanges(self):", [["^\\t", 24]]]
[24, "if self.selectedSquare.text != self.currentSquare.edit_text:\n   currentSquare = copy.deepcopy(self.selectedSquare)\n   currentSquare.text = self.currentSquare.edit_text\n   self.graph.stageSquare(currentSquare)\n   self.graph.applyChanges()\nself.streets.recordChanges()\nself.incommingStreets.recordChanges()", []]
[25, "#selection\n@property\ndef selection(self):", [["^\\t", 26]]]
[26, "return self._selection", []]
[27, "@selection.setter\ndef selection(self,value):", [["^\\t", 28]]]
[28, "self.history.append(self.selection)\nself._selection = value\nself.update()", []]
[29, "#selectedSquare\n@property\ndef selectedSquare(self):", [["^\\t", 30]]]
[30, "return self.graph[self.selection]", []]
[31, "@selectedSquare.setter\ndef selectedSquare(self,value):", [["^\\t", 32]]]
[32, "self.selection = value.squareId", []]
[33, "#focus_item\n@property\ndef focus_item(self):", [["^\\t", 34]]]
[34, "return self.original_widget.focus_item", []]
[35, "@focus_item.setter\ndef focus_item(self,value):", [["^\\t", 36]]]
[36, "self.original_widget.focus_item = value", []]
[37, "#mode\n@property\ndef mode(self):", [["^\\t", 38]]]
[38, "return self.__mode", []]
[39, "@mode.setter\ndef mode(self,value):", [["^\\t", 40]]]
[40, "if (self.__mode == 'navigation') ^ (value == 'navigation'):\n  self.__mode = value\n  self.update()\nself.__mode = value\nif value in ['command','navigation']:\n  self.original_widget = self.myopic_graph_view\nelif value == 'search':\n  self.original_widget = self.searchBox\nelif value == 'help':\n  self.original_widget = self.help\nelif value in ['insert', 'visual', 'replace', 'delete']:\n  pass\nelse:\n  raise ValueError(\"Invalid mode \"+value)\n", []]
[41, "#statusMessage\n@property\ndef statusMessage(self):", [["^\\t", 42]]]
[42, "return self._statusMessage", []]
[43, "@statusMessage.setter\ndef statusMessage(self,value):", [["^\\t", 44]]]
[44, "self._statusMessage = value\nself.updateStatusBar()", []]
[45, "def keypress(self,size,key):", [["^\\t", 164], ["^\\t", 170]]]
[46, "if command == 'down':", [["^\\t", 180]]]
[52, "class Clipboard(urwid.ListBox):", [["^\\t", 53], ["^\\t", 58]]]
[53, "#methods", [["", 55], ["", 57], ["", 224], ["", 62]]]
[54, "#properties", [["", 41], ["", 43], ["", 37], ["", 39], ["", 33], ["", 35], ["", 29], ["", 31], ["", 25], ["", 27]]]
[55, "def __init__(self,editor):", [["^\\t", 56]]]
[56, "self.editor = editor\nself.selectionCollor = \"clipboard\"\nself.alignment = \"right\"\nself.squares = []\nsuper(Clipboard,self).__init__(urwid.SimpleFocusListWalker([]))", []]
[57, "def update(self,squares=None):", [["^\\t", 61]]]
[58, "#properties", [["", 59]]]
[59, "# view\n@property\ndef view(self):", [["^\\t", 60]]]
[60, "return self.editor.view", []]
[61, "if squares is not None:\n  self.squares = squares\nitems = []\nif not self.squares:\n  items.append(urwid.AttrMap(urwid.Padding(urwid.SelectableIcon(\" \",0),align=self.alignment,width=\"pack\"),None,self.selectionCollor))\nfor square in self.squares:\n  items.append(urwid.AttrMap(urwid.Padding(urwid.SelectableIcon(square[1].title,0),align=self.alignment,width=\"pack\"),None,self.selectionCollor))\nself.body.clear()\nself.body.extend(items)", []]
[62, "def keypress(self,size,key):", [["^\\t", 226]]]
[63, "if command == 'remove-from-stack':", [["^\\t", 228]]]
[64, "class CurrentSquare(ViEdit):", [["^\\t", 65], ["^\\t", 275]]]
[65, "#methods", [["", 66], ["", 70], ["", 238]]]
[66, "def __init__(self,view):", [["^\\t", 67]]]
[67, "self.view = view\nsuper(CurrentSquare,self).__init__(view)", []]
[70, "def keypress(self,size,key):", [["^\\t", 240]]]
[72, "class StreetNavigator(urwid.Pile):", [["^\\t", 73]]]
[73, "#methods", [["", 74], ["", 76], ["", 261], ["", 78]]]
[74, "def __init__(self,view,selectionCollor,alignment):", [["^\\t", 75]]]
[75, "self.view = view\nself.selectionCollor = selectionCollor\nself.alignment = alignment\nself.streets = []\nself.streetNameEdits = []\nself.squareEdits = []\nsuper(StreetNavigator,self).__init__(urwid.SimpleFocusListWalker([]))", []]
[76, "def update(self,streets=None):", [["^\\t", 545]]]
[78, "def keypress(self,size,key):", [["^\\t", 263]]]
[81, "class IncommingStreetsList(StreetNavigator):", [["^\\t", 82], ["^\\t", 89]]]
[82, "#methods", [["", 83], ["", 85], ["", 87], ["", 92], ["", 94]]]
[83, "def __init__(self,view):", [["^\\t", 84]]]
[84, "super(IncommingStreetsList,self).__init__(view,'incommingStreet_selected','left')", []]
[85, "def focusLastStreet(self):", [["^\\t", 86]]]
[86, "lastStreet = len(self.streets) - 1\nif lastStreet > 0:\n  self.focus_position = lastStreet", []]
[87, "def recordChanges(self):", [["^\\t", 88]]]
[88, "if self.view.mode == \"insert\":\n  newStreetNamesBySquareOfOrigin = {}\n  for edit,street in zip(self.streetNameEdits,self.streets):\n    if street.origin not in newStreetNamesBySquareOfOrigin:\n      newStreetNamesBySquareOfOrigin[street.origin] = []\n    newStreetNamesBySquareOfOrigin[street.origin].append(edit.edit_text)\n  for squareOfOrigin,streetNames in newStreetNamesBySquareOfOrigin.items():\n    square = copy.deepcopy(self.view.graph[squareOfOrigin])\n    changed = False\n    for street in square.streets:\n      if street.destination == self.view.selection:\n        newStreetName = streetNames.pop()\n        if not street.name == newStreetName:\n          street.name = newStreetName\n          changed = True\n    if changed:\n      self.view.graph.stageSquare(square)\n  self.view.graph.applyChanges()", []]
[89, "#properties", [["", 90]]]
[90, "#selectedSquareId\n@property\ndef selectedSquareId(self):", [["^\\t", 91]]]
[91, "\"\"\"The square that the selected street points to, in the direction going away from the current square.\"\"\"\nreturn self.streets[self.focus_position].origin", []]
[92, "def newStreetToNewSquare(self,useDefaultStreetName=True, index = None):", [["^\\t", 93]]]
[93, "self.view.recordChanges()\nsquareId = self.view.graph.allocSquare()\nif useDefaultStreetName:\n  streetName = self.view.defaultStreetName\nelse:\n  streetName = \"\"\nsquare = Square(squareId,\"\",[Street(streetName,self.view.selection,squareId)])\nself.view.graph.stageSquare(square)\nself.view.graph.applyChanges()\nreturn square.squareId", []]
[94, "def keypress(self,size,key):", [["^\\t", 563]]]
[96, "class StreetsList(StreetNavigator):", [["^\\t", 97], ["^\\t", 102]]]
[97, "#methods", [["", 98], ["", 100], ["", 105], ["", 107]]]
[98, "def __init__(self,view):", [["^\\t", 99]]]
[99, "self.view = view\nsuper(StreetsList,self).__init__(view,'street_selected','right')", []]
[100, "def recordChanges(self):", [["^\\t", 101]]]
[101, "if self.view.mode == 'insert':\n  square = copy.deepcopy(self.view.selectedSquare)\n  changed = False\n  for street,streetEdit in zip(square.streets,self.streetNameEdits):\n    if not street.name == streetEdit.edit_text:\n      street.name = streetEdit.edit_text\n      changed = True\n  if changed:\n    self.view.graph.stageSquare(square)\n    self.view.graph.applyChanges()", []]
[102, "#properties", [["", 103]]]
[103, "#selectedSquareId\n@property\ndef selectedSquareId(self):", [["^\\t", 104]]]
[104, "\"\"\"\nThe square that the selected street points to, in the direction going away from the current square.\n\"\"\"\nreturn self.streets[self.focus_position].destination", []]
[105, "def newStreetToNewSquare(self,useDefaultStreetName=True,index=None):", [["^\\t", 106]]]
[106, "self.view.recordChanges()\nif useDefaultStreetName:\n  streetName = self.view.defaultStreetName\nelse:\n  streetName = \"\"\nreturn self.view.graph.newLinkedSquare(self.view.selection,streetName,index)\n", []]
[107, "def keypress(self,size,key):", [["^\\t", 575]]]
[109, "class Help(urwid.Edit):", [["^\\t", 110]]]
[110, "#methods", [["", 111], ["", 113]]]
[111, "def __init__(self,view):", [["^\\t", 112]]]
[112, "self.view = view\nsuper(Help,self).__init__(\"\"\"\nWelcome to MGE - the myopic graph editor.\n\"\"\")", []]
[113, "def keypress(self,size,key):", [["^\\t", 114]]]
[114, "return super(Help,self).keypress(size,key)", []]
[117, "class SearchBox(urwid.ListBox):", [["^\\t", 118], ["^\\t", 123]]]
[118, "#methods", [["", 119], ["", 121], ["", 126]]]
[119, "def __init__(self,view):", [["^\\t", 120]]]
[120, "self.view = view\nself.squares = self.view.graph.values()\nsuper(SearchBox,self).__init__(urwid.SimpleFocusListWalker([]))\nself.searchEdit = SearchEdit(view,self)\nself.body.append(self.searchEdit)\nself.update()", []]
[121, "def update(self):", [["^\\t", 122]]]
[122, "self.squares = []\nitems = []\nfor square in self.view.graph.values():\n  if square.text is not None:\n    if self.searchEdit.edit_text in square.text:\n      self.squares.append(square)\n      items.append(urwid.AttrMap(urwid.Padding(urwid.SelectableIcon(square.title,0),align='left',width=\"pack\"),None,'search-selection'))\ndel self.body[1:]\nself.body.extend(items)\nself.focus_position = 0\n", []]
[123, "#properties", [["", 603], ["", 124]]]
[124, "#focused_square\n@property\ndef focused_square(self):", [["^\\t", 125]]]
[125, "if self.focus_position > 0:\n  return self.squares[self.focus_position-1].squareId\nelse:\n  raise IndexError(\"No focused square.\")", []]
[126, "def keypress(self,size,key):", [["^\\t", 590]]]
[128, "class CommandBar(urwid.Edit):", [["^\\t", 129], ["^\\t", 133]]]
[129, "#methods", [["", 130], ["", 132]]]
[130, "def __init__(self,editor):", [["^\\t", 131]]]
[131, "self.editor = editor\nself.edit = self\nsuper(CommandBar,self).__init__(\":\")\n", []]
[132, "def keypress(self,size,key):", [["^\\t", 136]]]
[133, "#properties", [["", 134]]]
[134, "#view\n@property\ndef view(self):", [["^\\t", 135]]]
[135, "return self.editor.view", []]
[136, "command = self.view.tabbedEditor.conf.getCommand(\"CommandBar\",self.view.mode,key)", [["", 620], ["", 618]]]
[137, "# Main function", [["", 138]]]
[138, "if __name__ == \"__main__\":\n  parser = optparse.OptionParser(usage = \"mge FILE\",description = \"Edit simple text graph file(tg file) using a simple,fast TUI interface.\")\n  options,args = parser.parse_args(sys.argv[1:])\n\n  if not len(args) >= 1:\n    sys.exit(\"mge expects to be passed at least one file path for editing. Use --help for help.\")\n\n  try:\n    editor = MultiTabEditor(args)\n  except (OSError,ValueError) as e:\n    sys.exit(str(e))\n  urwid.MainLoop(editor,pallet,handle_mouse=False).run()", []]
[139, "# Globals", [["", 141]]]
[141, "pallet = [('incommingStreet_selected', 'white', 'dark blue')\n         ,('street_selected', 'white', 'dark red')\n         ,('selection','black','white')\n         ,('clipboard','white','dark gray')\n         ,('tabtitle','black','white')\n         ,('normal-text','black','white')\n         ,('selected-text','black','light blue')\n         ,('search-selection','white','dark blue')]", []]
[142, "#properties", [["", 6], ["", 8], ["", 10]]]
[144, "if command == \"next-tab\":", [["^\\t", 145]]]
[145, "if self.currentTab < len(self.graphViews) - 1:\n  self.currentTab += 1", []]
[146, "return None", []]
[147, "elif command == \"prev-tab\":", [["^\\t", 148]]]
[148, "if self.currentTab > 0:\n  self.currentTab -= 1", []]
[149, "elif command == \"jump-to-body\":", [["^\\t", 150]]]
[150, "if self.focus_position != 'body':\n  self.focus_position = 'body'\nelse:\n  return super(MultiTabEditor,self).keypress(size,key)", []]
[151, "else:", [["^\\t", 152]]]
[152, "return super(MultiTabEditor,self).keypress(size,key)", []]
[154, "License: GPL >= 3\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.", []]
[155, "class Config(TextGraphFile):", [["^\\t", 156]]]
[156, "#methods", [["", 157], ["", 160]]]
[157, "def __init__(self):", [["^\\t", 158]]]
[158, "configPath = os.path.join(os.path.dirname(os.path.realpath(inspect.getsourcefile(lambda:0))),\"mge-config.tg\")\nsuper(Config,self).__init__(configPath)", []]
[160, "def getCommand(self, className, mode, key):", [["^\\t", 175], ["^\\t", 532]]]
[162, "def getCommand(self,key):", [["^\\t", 167]]]
[163, "return self.tabbedEditor.conf.getCommand(\"GraphView\",self.mode,key)", []]
[164, "command = self.getCommand(key)", [["", 888], ["", 886], ["", 195], ["", 880], ["", 171], ["", 185], ["", 197], ["", 199], ["", 183], ["", 190], ["", 192], ["", 188], ["", 217], ["", 219], ["", 243], ["", 205], ["", 207], ["", 209], ["", 211], ["", 46], ["", 213], ["", 215], ["", 173], ["", 236], ["", 235]]]
[166, "def getCommand(self,key):", [["^\\t", 163]]]
[167, "return self.conf.getCommand(\"MultiTabEditor\",\"\",key)", []]
[170, "self.updateStatusBar()", []]
[171, "if command == 'command-mode':", [["^\\t", 172]]]
[172, "self.mode = 'command'\nself.original_widget = self.myopic_graph_view", []]
[173, "if command == 'send-key-to-child' or command == 'record-changes-and-send-key-to-child':", [["^\\t", 174]]]
[174, "super(GraphView,self).keypress(size,key)", []]
[175, "keypaths = [", [["^\\t", 176], ["^\\t", 178], ["^\\t", 177], ["^\\t", 179]]]
[176, "[\"objects\",className,\"keybindings\",mode,key],", []]
[177, "[\"objects\",className,\"keybindings\",mode,\"any-key\"],", []]
[178, "[\"objects\",className,\"keybindings\",\"all-modes\",key],", []]
[179, "[\"objects\",className,\"keybindings\",\"all-modes\",\"any-key\"]]", []]
[180, "focusedBeforeProcessing = self.focus_item\nself.original_widget.keypress(size,'down')\nif focusedBeforeProcessing == self.currentSquareWidget and self.focus_item == self.streets:\n  self.streets.focus_position = 0", []]
[183, "if command == 'jump-to-center':", [["^\\t", 184]]]
[184, "self.focus_item = self.currentSquareWidget", []]
[185, "if command == 'insert-mode':", [["^\\t", 187]]]
[187, "self.mode = \"insert\"", []]
[188, "if command == 'back':", [["^\\t", 189]]]
[189, "if self.history:\n  self.selection = self.history.pop()", []]
[190, "if command == 'jump-to-command-bar':", [["^\\t", 191]]]
[191, "self.tabbedEditor.focus_position = 'footer'", []]
[192, "if command == 'jump-to-stack-area':", [["^\\t", 193]]]
[193, "self.tabbedEditor.focus_position = 'header'", []]
[195, "if not command == 'send-key-to-child':", [["^\\t", 196]]]
[196, "self.recordChanges()", []]
[197, "if command == 'search-mode':", [["^\\t", 198]]]
[198, "self.mode = 'search'", []]
[199, "if command == 'help-mode':", [["^\\t", 200]]]
[200, "self.mode = 'help'", []]
[205, "if command == 'go-down-default-street':", [["^\\t", 206]]]
[206, "try:\n  self.selection = self.selectedSquare.lookupStreet(self.defaultStreetName).destination\nexcept KeyError:\n  pass", []]
[207, "if command == 'go-up-default-street':", [["^\\t", 208]]]
[208, "for street in self.incommingStreets.streets:\n  if street.name == self.defaultStreetName:\n    self.selection = street.origin\n    break", []]
[209, "if command == 'clear-default-street-name':", [["^\\t", 210]]]
[210, "self.defaultStreetName = \"\"", []]
[211, "if command == 'up':", [["^\\t", 212]]]
[212, "super(GraphView,self).keypress(size,'up')", []]
[213, "if command == 'left':", [["^\\t", 214]]]
[214, "super(GraphView,self).keypress(size,'left')", []]
[215, "if command == 'right':", [["^\\t", 216]]]
[216, "super(GraphView,self).keypress(size,'right')", []]
[217, "if command == 'undo':", [["^\\t", 218]]]
[218, "self.graph.undo()\nif self.selection >= len(self.graph):\n  self.selection = 0\nif self.selectedSquare.text is None:\n  self.selection = 0", []]
[219, "if command == 'redo':", [["^\\t", 220]]]
[220, "self.graph.redo()", []]
[224, "def getCommand(self,key):", [["^\\t", 225]]]
[225, "return self.view.tabbedEditor.conf.getCommand(\"Clipboard\",\"\",key)", []]
[226, "command = self.getCommand(key)", [["", 63], ["", 229], ["", 233], ["", 273], ["", 231]]]
[228, "try:\n  fcp = self.focus_position\nexcept IndexError:\n  pass\nelse:\n  del self.squares[fcp]\n  self.update()\n  if fcp < len(self.squares):\n    self.focus_position = fcp", []]
[229, "if command == 'street-to-stack-item' or command == 'street-to-stack-item-no-pop':", [["^\\t", 230]]]
[230, "try:\n  fcp = self.focus_position\nexcept IndexError:\n  pass\nelse:\n  square = self.squares[fcp]\nif not command == 'street-to-stack-item-no-pop':\n  del self.squares[fcp]\n  currentSquare = copy.deepcopy(self.view.selectedSquare)\n  currentSquare.streets.append(Street(self.view.defaultStreetName,square.squareId,currentSquare.squareId))\n  self.view.graph.stageSquare(currentSquare)\n  self.view.graph.applyChanges()", []]
[231, "if command == 'send-key-to-child':", [["^\\t", 232]]]
[232, "return super(Clipboard,self).keypress(size,key)", []]
[233, "if command == 'incomming-street-to-stack-item' or command == 'incomming-street-to-stack-item-no-pop':", [["^\\t", 234]]]
[234, "#TODO rewrite this for multitab view\ntry:\n  fcp = self.focus_position\nexcept IndexError:\n  pass\nelse:\n  square = self.squares[fcp]\n  if not command == 'incommingStreet-to-stack-item-no-pop':\n    del self.squares[fcp]\n  square.streets.append(Street(self.view.defaultStreetName,self.view.selection,square.squareId))\n  self.view.graph.stageSquare(square)\n  self.view.graph.applyChanges()", []]
[235, "#Try calling command.\ntry:\n  command(self)\nexcept TypeError:\n  pass", []]
[236, "if command == 'goto-last-stack-item':", [["^\\t", 237]]]
[237, "filenameOfOriginGraph,square = self.tabbedEditor.clipboard.squares.pop()\nself.tabbedEditor.clipboard.update()\n#TODO look at the filename and switch tabs if the stack item is from another tab\nself.selectedSquare = square", []]
[238, "def getCommand(self,key):", [["^\\t", 239]]]
[239, "return self.view.tabbedEditor.conf.getCommand(\"CurrentSquare\",self.view.mode,key)", []]
[240, "command = self.getCommand(key)", [["", 245], ["", 247], ["", 249], ["", 251], ["", 253], ["", 241], ["", 259]]]
[241, "if command == \"new-square-streeted-to-previous-square\":", [["^\\t", 242]]]
[242, "prevSquare = self.view.history[-1]\nself.view.recordChanges()\nnewSquareId = self.view.graph.newLinkedSquare(prevSquare,self.view.defaultStreetName)\nself.view.selection = newSquareId\nself.view.history.append(prevSquare)", []]
[243, "if command == 'next-sibling':", [["^\\t", 244]]]
[244, "self.selection = self.graph.getNextSibling(self.selection)", []]
[245, "if command == \"new-square-end-of-streets\":", [["^\\t", 246]]]
[246, "self.view.selection = self.view.streets.newStreetToNewSquare(useDefaultStreetName=True)\nself.view.focus_item = self.view.currentSquareWidget\nself.view.mode = 'insert'", []]
[247, "if command == \"new-square-beginning-of-streets\":", [["^\\t", 248]]]
[248, "self.view.selection = self.view.streets.newStreetToNewSquare(useDefaultStreetName=True, index = 0)\nself.view.focus_item = self.view.currentSquareWidget\nself.view.mode = 'insert'", []]
[249, "if command == \"add-to-stack\":", [["^\\t", 250]]]
[250, "self.view.tabbedEditor.clipboard.squares.append((self.view.graph.filename,self.view.selectedSquare))\nself.view.tabbedEditor.clipboard.update()", []]
[251, "if command == \"delete-square\":", [["^\\t", 252]]]
[252, "if self.view.selection != 0:\n  self.view.graph.deleteSquare(self.view.selection)\nelse:\n  self.view.statusMessage = \"Cannot delete square 0.\"", []]
[253, "if command == \"delete-tree\":", [["^\\t", 254]]]
[254, "self.view.graph.deleteTree(self.view.selection)", []]
[256, "return super(ViEdit,self).keypress(size,'delete')", []]
[259, "if command == \"send-key-to-child\":", [["^\\t", 260]]]
[260, "value = super(CurrentSquare,self).keypress(size,key)\nreturn value", []]
[261, "def getCommand(self,key):", [["^\\t", 262]]]
[262, "return self.view.tabbedEditor.conf.getCommand(\"StreetNavigator\",self.view.mode,key)", []]
[263, "command = self.getCommand(key)", [["", 264], ["", 266], ["", 549], ["", 555], ["", 551], ["", 559], ["", 553], ["", 557], ["", 561], ["", 268], ["", 271]]]
[264, "if command == \"send-key-to-parent\":", [["^\\t", 265]]]
[265, "return super(StreetNavigator,self).keypress(size,key)", []]
[266, "if command == \"new-square-before-selection\":", [["^\\t", 267]]]
[267, "if self.focus_position == 0:\n  index = 0\nelse:\n  index = self.focus_position - 1\nself.newStreetToNewSquare(useDefaultStreetName=True,index = index)\nself.view.mode = 'insert'", []]
[268, "if command == \"new-square-after-selection\":", [["^\\t", 270]]]
[270, "self.view.selection = self.newStreetToNewSquare(useDefaultStreetName=True,index = self.focus_position + 1)\nself.view.focus_item = self.view.currentSquareWidget\nself.view.mode = 'insert'", []]
[271, "if command == \"new-square-with-blank-street-name\":", [["^\\t", 272]]]
[272, "self.view.selection = self.newStreetToNewSquare(useDefaultStreetName=False,index = self.focus_position + 1)\nself.view.focus_item = self.view.currentSquareWidget\nself.view.mode = 'insert'", []]
[273, "if command == 'goto-square':", [["^\\t", 274]]]
[274, "filenameOfOriginGraph,square = self.squares(self.focused_item)\n# TODO multi tab support!\nself.view.graph", []]
[275, "#properties", []]
[464, "def get_text(self):", [["^\\t", 465]]]
[465, "return self._caption + self._edit_text, [(\"normal-text\",len(self._caption))] + self.decorate(self._edit_text)", []]
[466, "def decorate(self,text):", [["^\\t", 467]]]
[467, "if self.selection_start == self.selection_end:\n  return [(\"normal-text\",len(text))]\nreturn [(\"normal-text\",self.selection_start),(\"selected-text\",self.selection_end-self.selection_start),(\"normal-text\",len(text)-self.selection_end)]", []]
[470, "if command == 'send-non-char-key-to-parent-and-update-selection':", [["^\\t", 472]]]
[472, "if not urwid.Edit.valid_char(self,key):\n  value = super(ViEdit,self).keypress(size,key)\n  self.selection[1] = self.edit_pos\n  return value\nelse:\n  return key", []]
[473, "if command == 'visual-mode':", [["^\\t", 474]]]
[474, "self.view.mode = 'visual'\nself.selection[0] = self.edit_pos\nself.selection[1] = self.edit_pos", []]
[475, "if command == 'exit-visual-mode':", [["^\\t", 476]]]
[476, "self.selection = [0,0]\nself.view.mode = 'command'\nself._invalidate()", []]
[477, "class ViEdit(urwid.Edit):", [["^\\t", 478], ["^\\t", 493]]]
[478, "#methods", [["", 479], ["", 484], ["", 466], ["", 464]]]
[479, "def __init__(self,view):", [["^\\t", 480]]]
[480, "self.selection = [0,0]\nself.view = view\nsuper(ViEdit,self).__init__(edit_text=\"\",align=\"left\",multiline=True)", []]
[484, "def keypress(self,size,key):", [["^\\t", 485]]]
[485, "command = self.view.tabbedEditor.conf.getCommand(\"ViEdit\",self.view.mode,key)\nself.view.statusMessage = command + \": \" + key", [["", 542], ["", 540], ["", 515], ["", 509], ["", 503], ["", 501], ["", 496], ["", 491], ["", 506], ["", 892], ["", 898], ["", 890], ["", 498], ["", 473], ["", 475], ["", 488], ["", 470], ["", 486]]]
[486, "if command == 'send-key-to-parent':", [["^\\t", 487]]]
[487, "return super(ViEdit,self).keypress(size,key)", []]
[488, "if command == 'send-non-char-key-to-parent':", [["^\\t", 490]]]
[490, "if not urwid.Edit.valid_char(self,key):\n  value = super(ViEdit,self).keypress(size,key)\n  return value\nelse:\n  return key", []]
[491, "if command == 'copy-text':", [["^\\t", 492]]]
[492, "self.view.copied_text = self.get_edit_text()[self.selection_start:self.selection_end]", []]
[493, "#properties", [["", 494], ["", 495]]]
[494, "#selection_start\n@property\ndef selection_start(self):\n  if self.selection[0] == 0 and self.selection[1] == 0:\n    return self.edit_pos\n  if self.selection[0] < self.selection[1]:\n    return self.selection[0]\n  else:\n    return self.selection[1]", []]
[495, "#selection_end\n@property\ndef selection_end(self):\n  if self.selection[0] == 0 and self.selection[1] == 0:\n    return self.edit_pos\n  if self.selection[1] > self.selection[0]:\n    return self.selection[1]\n  else:\n    return self.selection[0]", []]
[496, "if command == 'paste-text':", [["^\\t", 497]]]
[497, "text = self.get_edit_text()\nnew_text = text[0:self.selection_start+1] + self.view.copied_text + text[self.selection_end:]\nself.set_edit_text(new_text)", []]
[498, "if command == 'delete-character':", [["^\\t", 256]]]
[501, "if command == 'replace-mode':", [["^\\t", 502]]]
[502, "self.view.mode = 'replace'", []]
[503, "if command == 'replace-character':", [["^\\t", 505]]]
[505, "text = self.get_edit_text()\nnew_text = text[:self.edit_pos] + key + text[self.edit_pos+1:]\nself.set_edit_text(new_text)\nself.view.recordChanges()\nself.view.mode = 'command'", []]
[506, "if command == 'kill-text':", [["^\\t", 508]]]
[508, "self.view.copied_text = self.get_edit_text()[self.selection_start:self.selection_end]\ntext = self.get_edit_text()[0:self.selection_start]+self.get_edit_text()[self.selection_end+1:]\nself.set_edit_text(text)\nself.edit_pos = self.selection_start\nself.selection = [0,0]\nself.view.recordChanges()\nself.view.mode = 'command'", []]
[509, "if command == 'new-line-below':", [["^\\t", 510]]]
[510, "#new-line-below", [["!^pycfg -f", 512]]]
[512, "first_parts_easy\ntext = self.get_edit_text()\nnewline = text.find('\\n',self.edit_pos)", [["newline == -1; text", 513], ["True; text newline", 514]]]
[513, "add_newline_to_end text\nself.set_edit_text(text+'\\n')\nself.edit_pos = len(self.get_edit_text())", [["True;", 902]]]
[514, "insert_newline text newline\nself.set_edit_text(text[:newline]+'\\n'+text[newline:])\nself.edit_pos = newline+1", [["True;", 902]]]
[515, "if command == 'new-line-above':", [["^\\t", 516]]]
[516, "#new-line-above", [["!^pycfg -f", 517]]]
[517, "first_parts_easy\ntext = self.get_edit_text()\nnewline = text.rfind('\\n',0,self.edit_pos)", [["newline == -1; text", 518], ["True; text newline", 514]]]
[518, "add_newline_to_start text\nself.set_edit_text('\\n'+text)\nself.edit_pos = 0", [["True;", 902]]]
[519, "", [["!^pycfg -f", 520]]]
[520, "start\n", [["self.graph.readonly;", 521], ["self.graph.edited;", 522], ["True;", 523]]]
[521, "read_only\nedited = \"Read only!\"", [["True; edited", 524]]]
[522, "was_edited\nedited = \"Edited\"", [["True; edited", 524]]]
[523, "was_saved\nedited = \"Saved\"", [["True; edited", 524]]]
[524, "get_current_square_id edited\n", [["self.mode == 'search'; edited", 525], ["self.mode == 'help'; edited", 531], ["self.focus_item == self.incommingStreets; edited", 527], ["self.focus_item == self.streets; edited", 528], ["True; edited", 529]]]
[525, "use_searchbox_selection edited\nid = self.searchBox.focused_square", [["except IndexError; edited", 531], ["True; edited id", 530]]]
[527, "selected_incoming_street edited\nid = self.incommingStreets.streets[self.incommingStreets.focus_position].origin", [["except IndexError; edited", 529], ["True; edited id", 530]]]
[528, "selected_street edited\nid = self.streets.streets[self.streets.focus_position].destination", [["except IndexError; edited", 529], ["True; edited id", 530]]]
[529, "use_selection edited\nid = self.selection", [["True; edited id", 530]]]
[530, "set_status edited id\nself.tabbedEditor.statusBar.set_text(\"\u25a1:\"+str(id) + \" \" + edited + \" Undo: \"+str(len(self.graph.done))+\" Redo: \"+str(len(self.graph.undone))+\" Mode: \"+self.mode+\" \u2192 \"+self.defaultStreetName+\" | \"+self.statusMessage)", []]
[531, "resort_to_zero edited\nid = 0", [["True; edited id", 530]]]
[532, "#getCommand", [["!^pycfg -f", 533]]]
[533, "start\ni = keypaths.__iter__()", [["True; i", 534]]]
[534, "look_through_keypaths i\nkeypath = i.__next__()", [["except StopIteration;", 535], ["True; i keypath", 536]]]
[535, "no_keybinding_found\nreturn None", []]
[536, "lookup_keypath i keypath\nkeybinding_square_id = self.lookupSquareViaContents(0,keypath)\ncommand = self[self[keybinding_square_id].streets[0].destination].text", [["except KeyError; i", 534], ["command.startswith(\"!&\"); command", 538], ["True; command", 539]]]
[538, "external_command command\ndef externCommand(text_graph_view):\n  args = command[2:].split()\n  env = os.environ.copy()\n  env[\"TG_CENTER\"] = str(text_graph_view.selectedSquare.squareId)\n  proc = subprocess.Popen(args,env=env,stdin=subprocess.PIPE)\n  proc.stdin.write(text_graph_view.graph.json.encode(\"utf-8\"))\n  proc.stdin.close()\nreturn externCommand", []]
[539, "internal_command command\nreturn command", []]
[540, "if command == 'down-within-edit':", [["^\\t", 541]]]
[541, "(maxcol,) = size\nx,y = self.get_cursor_coords((maxcol,))\npref_col = self.get_pref_col((maxcol,))\nassert pref_col is not None\ny += 1\nself.move_cursor_to_coords((maxcol,),pref_col,y)\nself.selection[1] = self.edit_pos", []]
[542, "if command == 'up-within-edit':", [["^\\t", 544]]]
[544, "(maxcol,) = size\nx,y = self.get_cursor_coords((maxcol,))\npref_col = self.get_pref_col((maxcol,))\nassert pref_col is not None\ny -= 1\nself.move_cursor_to_coords((maxcol,),pref_col,y)\nself.selection[1] = self.edit_pos", []]
[545, "", [["!^pycfg -f", 845]]]
[546, "init_streets\nself.streets = streets", [["True;", 547]]]
[547, "default_values\nitems = []\nself.streetNameEdits = []\nself.squareEdits = []", [["not self.streets; items ", 548], ["True; items", 628]]]
[548, "empty_streets_list items\nitems.append((urwid.Padding(urwid.SelectableIcon(\" \",0),align=self.alignment,width=\"pack\"),('pack',None)))", [["True; items", 624]]]
[549, "if command == \"new-square-setting-street-name\": ", [["^\\t", 550]]]
[550, "self.newStreetToNewSquare(useDefaultStreetName=False,index = self.focus_position + 1)\nself.view.mode = 'insert'\ntry:\n  self.focus_position = self.focus_position + 1\nexcept IndexError:\n  pass\nreturn None", []]
[551, "if command == \"set-default-street-name\":", [["^\\t", 552]]]
[552, "if self.streets:\n  self.view.defaultStreetName = self.streets[self.focus_position].name", []]
[553, "if command == \"go-down-street\":", [["^\\t", 554]]]
[554, "if self.streets:\n  self.view.recordChanges()\n  self.view.selection = self.selectedSquareId\nelse:\n  pass", []]
[555, "if command == \"go-down-street-and-edit-square\":", [["^\\t", 556]]]
[556, "if self.streets:\n  self.view.recordChanges()\n  self.view.selection = self.selectedSquareId\n  self.view.focus_item = self.view.currentSquareWidget\n  self.view.mode = 'insert'\nelse:\n  pass", []]
[557, "if command == \"delete-square\":", [["^\\t", 558]]]
[558, "if self.streets:\n  squareId = self.selectedSquareId\n  if squareId != 0:\n    self.view.graph.deleteSquare(squareId)\n  else:\n    self.view.statusMessage = \"Cannot delete square 0.\"", []]
[559, "if command == \"delete-tree\":", [["^\\t", 560]]]
[560, "if self.streets:\n  squareId = self.selectedSquareId\n  if squareId != 0:\n    self.view.graph.deleteTree(squareId)\n  else:\n     self.view.statusMessage = \"Cannot delete square 0.\"", []]
[561, "if command == \"add-to-stack\":", [["^\\t", 562]]]
[562, "if self.streets:\n  self.view.tabbedEditor.clipboard.squares.append((self.view.graph.filename,self.view.graph[self.selectedSquareId]))\n  self.view.tabbedEditor.clipboard.update()\n  fcp = self.focus_position\n  self.focus_position = fcp", []]
[563, "command = self.view.tabbedEditor.conf.getCommand(\"IncommingStreetsList\",self.view.mode,key)", [["", 571], ["", 573], ["", 566], ["", 568], ["", 564]]]
[564, "if command == \"send-key-to-parent\":", [["^\\t", 565]]]
[565, "return super(IncommingStreetsList,self).keypress(size,key)", []]
[566, "if command == \"remove-street\":", [["^\\t", 567]]]
[567, "try:\n  fcp = self.focus_position\n  street = self.streets[fcp]\n  square = copy.deepcopy(self.view.graph[street.origin])\n  #def imsurethereisacleanerwayofdoingthis(l):\n  def a(l):\n    if l == []: return []\n    i = l.pop()\n    if i.destination == street.destination and i.name == street.name: return l\n    else: return [i] + a(l)\n  square.streets = a(square.streets)\n  self.view.graph.stageSquare(square)\n  self.view.graph.applyChanges()\nexcept IndexError:\n  pass", []]
[568, "if command == \"reverse-street-direction\":", [["^\\t", 569]]]
[569, "try:\n  fcp = self.focus_position\n  street = self.streets[fcp]\n  square = copy.deepcopy(self.view.graph[street.origin])\n  #def imsurethereisacleanerwayofdoingthis(l):\n  def a(l):\n    if l == []: return []\n    i = l.pop()\n    if i.destination == street.destination and i.name == street.name: return l\n    else: return [i] + a(l)\n  square.streets = a(square.streets)\n  self.view.graph.stageSquare(square)\n  square = copy.deepcopy(self.view.graph[street.destination])\n  square.streets.append(Street(street.name,origin=street.destination,destination=street.origin))\n  self.view.graph.stageSquare(square)\n  self.view.graph.applyChanges()\nexcept IndexError:\n  pass", []]
[571, "if command == \"back-street-last-stack-item\":", [["^\\t", 572]]]
[572, "if self.view.tabbedEditor.clipboard.squares:\n  filenameOfOriginGraph,square = self.view.tabbedEditor.clipboard.squares.pop()\n  self.view.tabbedEditor.clipboard.update()\n  square.streets.append(Street(self.view.defaultStreetName,self.view.selection,square.squareId))#TODO look at file name of origin!\n  self.view.graph.stageSquare(square)\n  self.view.graph.applyChanges()\n  self.focus_position = len(self.streets) - 1", []]
[573, "if command == \"focus-streets-list\":", [["^\\t", 574]]]
[574, "self.view.focus_item = self.view.streets\ntry:\n  self.view.streets.focus_position = 0\nexcept IndexError:\n  pass", []]
[575, "command = self.view.tabbedEditor.conf.getCommand(\"StreetsList\",self.view.mode,key)", [["", 576], ["", 578], ["", 579], ["", 580], ["", 581], ["", 622], ["", 582], ["", 583]]]
[576, "if command == \"send-key-to-parent\":", [["^\\t", 577]]]
[577, "return super(StreetsList,self).keypress(size,key)", []]
[578, "if command == \"move-square-up\":", [["^\\t", 589]]]
[579, "if command == \"move-square-down\":", [["^\\t", 584]]]
[580, "if command == \"street-last-stack-item\":", [["^\\t", 585]]]
[581, "if command == \"copy-square-from-stack\":", [["^\\t", 586]]]
[582, "if command == \"remove-street\":", [["^\\t", 587]]]
[583, "if command == \"focus-incomming-streets-list\":", [["^\\t", 588]]]
[584, "sel = copy.deepcopy(self.view.selectedSquare)\nfcp = self.focus_position\nif fcp + 1 < len(sel.streets):\n  street = sel.streets[fcp]\n  nextStreet = sel.streets[fcp + 1]\n  sel.streets[fcp] = nextStreet\n  sel.streets[fcp + 1] = street\n  self.view.graph.stageSquare(sel)\n  self.view.graph.applyChanges()\n  self.focus_position = fcp + 1", []]
[585, "if self.view.tabbedEditor.clipboard.squares:\n  if self.streets:\n    fcp = self.focus_position\n  else:\n    fcp = -1\n  filenameOfOriginGraph,square = self.view.tabbedEditor.clipboard.squares.pop() #TODO look at file name of origin!!\n  self.view.tabbedEditor.clipboard.update()\n  sel = copy.deepcopy(self.view.selectedSquare)\n  sel.streets.insert(fcp + 1,Street(self.view.defaultStreetName,square.squareId,self.view.selection))\n  self.view.graph.stageSquare(sel)\n  self.view.graph.applyChanges()\n  self.focus_position = fcp + 1", []]
[586, "if self.view.tabbedEditor.clipboard.squares:\n  if self.streets:\n    fcp = self.focus_position\n  else:\n    fcp = -1\n  filenameOfOriginGraph,square = self.view.tabbedEditor.clipboard.squares.pop() #TODO look at file name of origin!!\n  self.view.tabbedEditor.clipboard.update()\n  sel = copy.deepcopy(self.view.selectedSquare)\n  newSquare = Square(self.view.graph.allocSquare(),square.text,copy.deepcopy(square.streets))\n  sel.streets.insert(fcp + 1,Street(self.view.defaultStreetName,newSquare.squareId,self.view.selection))\n  self.view.graph.stageSquare(sel)\n  self.view.graph.stageSquare(newSquare)\n  self.view.graph.applyChanges()\n  self.focus_position = fcp + 1", []]
[587, "try:\n  fcp = self.focus_position\n  street = self.streets[fcp]\n  selectedSquare = copy.deepcopy(self.view.selectedSquare)\n  selectedSquare.streets.remove(street)\n  self.view.graph.stageSquare(selectedSquare)\n  self.view.graph.applyChanges()\nexcept IndexError:\n  pass", []]
[588, "self.view.focus_item = self.view.incommingStreets", []]
[589, "sel = copy.deepcopy(self.view.selectedSquare)\nfcp = self.focus_position\nif fcp >= 1:\n  street = sel.streets[fcp]\n  prevStreet = sel.streets[fcp - 1]\n  sel.streets[fcp] = prevStreet\n  sel.streets[fcp - 1] = street\n  self.view.graph.stageSquare(sel)\n  self.view.graph.applyChanges()\n  self.focus_position = fcp - 1", []]
[590, "if self.focus_position == 0:\n  return super(SearchBox,self).keypress(size,key)\ncommand = self.view.tabbedEditor.conf.getCommand(\"SearchBox\",self.view.mode,key)", [["", 591], ["", 592], ["", 593], ["", 610], ["", 612], ["", 594], ["", 595], ["", 596]]]
[591, "if command == \"jump-to-command-bar\":", [["^\\t", 602]]]
[592, "if command == \"jump-to-stack-area\":", [["^\\t", 597]]]
[593, "if command == \"goto-square\":", [["^\\t", 598]]]
[594, "if command == \"edit-square\":", [["^\\t", 599]]]
[595, "if command == \"add-to-stack\":", [["^\\t", 600]]]
[596, "if command == \"send-key-to-child\":", [["^\\t", 601]]]
[597, "self.view.tabbedEditor.focus_position = 'header'", []]
[598, "self.view.selection = self.focused_square\nself.view.mode = \"navigation\"", []]
[599, "self.view.selection = self.focused_square\nself.view.mode = 'insert'", []]
[600, "self.view.tabbedEditor.clipboard.squares.append((self.view.graph.filename,self.view.graph[self.focused_square]))\nself.view.tabbedEditor.clipboard.update()", []]
[601, "return super(SearchBox,self).keypress(size,key)", []]
[602, "self.view.tabbedEditor.focus_position = 'footer'", []]
[603, "#focus_item\n@property\ndef focus_item(self):\n  return self.body[self.focus_position]", []]
[604, "class SearchEdit(urwid.Edit):", [["^\\t", 609]]]
[605, "def __init__(self,view,search):", [["^\\t", 606]]]
[606, "self.search = search\nself.view = view\nsuper(SearchEdit,self).__init__()", []]
[607, "def keypress(self,size,key):", [["^\\t", 608]]]
[608, "command = self.view.tabbedEditor.conf.getCommand(\"SearchEdit\",self.view.mode,key)", [["", 616], ["", 614]]]
[609, "#methods", [["", 605], ["", 607]]]
[610, "if command == \"up\":", [["^\\t", 611]]]
[611, "return super(SearchBox,self).keypress(size,\"up\")", []]
[612, "if command == \"down\":", [["^\\t", 613]]]
[613, "return super(SearchBox,self).keypress(size,\"down\")", []]
[614, "if command == \"jump-to-results\":", [["^\\t", 615]]]
[615, "try:\n  self.search.set_focus(1)\n  self.search._invalidate()\nexcept IndexError:\n  pass", []]
[616, "if command == \"send-key-to-child\":", [["^\\t", 617]]]
[617, "value = super(SearchEdit,self).keypress(size,key)\nself.search.update()\nreturn value", []]
[618, "if command == \"send-key-to-child\":", [["^\\t", 619]]]
[619, "return super(CommandBar,self).keypress(size,key)", []]
[620, "if command == \"run-command\":", [["^\\t", 621]]]
[621, "success = False\ncom = self.edit.edit_text\nif com == \"savedot\":\n  success = True\n  try:\n    self.view.graph.saveDot()\n  except OSError as e:\n    self.view.statusMessage = str(e)\nelif com.startswith(\"o \"):\n  success = True\n  try:\n    _,filename = com.split()\n  except ValueError:\n    self.view.statusMessage = \"Need a path/URL to a file to open!\"\n  try:\n    self.editor.graphViews.append(GraphView(TextGraph(filename),self.editor))\n    self.editor.currentTab = len(self.editor.graphViews) - 1\n  except (OSError,ValueError) as e:\n    self.view.statusMessage = str(e)\nelse:\n  if \"w\" in com:\n    success = True\n    try:\n      self.view.recordChanges()\n      self.view.graph.save()\n      self.view.graph.edited = False\n    except (FileNotFoundError,OSError) as e:\n      self.edit.set_caption(\"Unable to save:\"+str(e)+\"\\n:\")\n  if \"q\" in com:\n    success = True\n    if self.view.graph.edited and \"!\" not in com:\n      self.edit.set_caption(\"Not quiting. Save your work first, or use 'q!'\\n:\")\n    else:\n      raise urwid.ExitMainLoop()\n  try:\n    newSelection = int(com)\n    if newSelection in self.view.graph and self.view.graph[newSelection].text is not None:\n      self.view.selection = newSelection\n      self.view.focus_item = self.view.currentSquareWidget\n      self.view.mode = 'command'\n      success = True\n    else:\n      self.edit.set_caption(\"Cannot jump to \"+com+\". Square does not exist.\\n:\")\n  except ValueError:\n    pass\nself.edit.edit_text = \"\"\nif success:\n  self.editor.focus_position = 'body'\nelse:\n  self.edit.set_caption(com + \" is not a valid mge command.\\n:\")", []]
[622, "if command == \"interject\":", [["^\\t", 623]]]
[623, "newSquareId = self.view.graph.interjectSquare(self.view.selection,self.focus_position)\nself.view.selection = newSquareId\nself.focus_position = 0", []]
[624, "reuse_focus_position items\nfp = self.focus_position", [["except IndexError; items", 625], ["True; items fp", 626]]]
[625, "zero_focus_position items", [["True; items 0", 626]]]
[626, "display items fp\nself.contents.clear()\nself.contents.extend(items)\nif fp < len(items):\n  self.focus_position = fp", []]
[628, "build_street_widgets items\nstreets_iter = iter(self.streets)", [["True; items streets_iter", 629]]]
[629, "next_street items streets_iter\nstreet = next(streets_iter)", [["except StopIteration; items", 624], ["True; items streets_iter street", 882]]]
[630, "all_modes items streets_iter street streetNameEdit squareEdit", [["self.alignment == 'left'; items streets_iter street streetNameEdit squareEdit", 632], ["self.alignment == 'right'; items streets_iter street streetNameEdit squareEdit", 633]]]
[632, "set_edit_texts_incomming items streets_iter street streetNameEdit squareEdit\nsquareEdit.set_edit_text(self.view.graph[street.origin].text)", [["True; items streets_iter streetNameEdit squareEdit", 634]]]
[633, "set_edit_texts_outgoing items streets_iter street streetNameEdit squareEdit\nsquareEdit.set_edit_text(self.view.graph[street.destination].text)", [["True; items streets_iter streetNameEdit squareEdit", 635]]]
[634, "append_widgets_to_items_list_incomming items streets_iter streetName square\nitems.append((urwid.Pile([square,streetName]),('pack',None)))", [["True; items streets_iter", 629]]]
[635, "append_widgets_to_items_list_outgoing items streets_iter streetName streetDestination\nitems.append((urwid.Pile([streetName,streetDestination]),('pack',None)))", [["True; items streets_iter", 629]]]
[845, "start", [["streets is not None;", 546], ["True;", 547]]]
[846, "class MyopicGraphView(urwid.ListBox):", [["^\\t", 847], ["^\\t", 850]]]
[847, "#methods", [["", 848], ["^#", 879]]]
[848, "def __init__(self,view):", [["^\\t", 849]]]
[849, "self.view = view\nsuper(MyopicGraphView,self).__init__(urwid.SimpleFocusListWalker([view.incommingStreets,urwid.Divider(\"_\"),view.currentSquareWidget,urwid.Divider(\"_\"),view.streets]))\n", []]
[850, "#properties", [["", 851], ["", 852]]]
[851, "#focus_item\n@property\ndef focus_item(self):\n  return self.body[self.focus_position]", []]
[852, "@focus_item.setter\ndef focus_item(self,item):\n  self.focus_position = self.body.index(item)", []]
[879, "def rows(self, size, focus=False):\n rows = 0\n for widget in self.body:\n  rows += widget.rows(size,focus)\n return rows", []]
[880, "if command == 'navigation-mode':", [["^\\t", 881]]]
[881, "self.mode = 'navigation'", []]
[882, "build_street_edit items streets_iter street\nstreetNameEdit = ViEdit(self.view)\nstreetNameEdit.set_edit_text(street.name)\nself.streetNameEdits.append(streetNameEdit)\nsquareEdit = ViEdit(self.view)\nself.squareEdits.append(squareEdit)\nstreetNameEdit.set_caption(\"\u2192\")", [["self.view.mode == 'navigation'; items streets_iter street streetNameEdit squareEdit", 883], ["True; items streets_iter street streetNameEdit squareEdit", 630]]]
[883, "navigation_mode items streets_iter street streetNameEdit squareEdit", [["self.alignment == 'left'; items streets_iter street streetNameEdit squareEdit", 884], ["self.alignment == 'right'; items streets_iter street streetNameEdit squareEdit", 885]]]
[884, "set_navigation_mode_text_incomming items streets_iter street streetNameEdit squareEdit\nsquareEdit.set_edit_text(self.view.graph[street.origin].title)", [["True; items streets_iter streetNameEdit squareEdit", 634]]]
[885, "set_navigation_mode_text_outgoing items streets_iter street streetNameEdit squareEdit\nsquareEdit.set_edit_text(self.view.graph[street.destination].title)", [["True; items streets_iter streetNameEdit squareEdit", 635]]]
[886, "if command == 'go-up-widget':", [["^\\t", 887]]]
[887, "if self.focus_item == self.incommingStreets:\n  try:\n    self.incommingStreets.focus_position -= 1\n  except IndexError:\n    pass\nelif self.focus_item == self.currentSquareWidget:\n  self.focus_item = self.incommingStreets\n  self.incommingStreets._invalidate()\nelif self.focus_item == self.streets:\n  try:\n    self.streets.focus_position -= 1\n  except IndexError:\n    self.focus_item = self.currentSquareWidget\n    self.currentSquareWidget._invalidate()\nself._invalidate()", []]
[888, "if command == 'go-down-widget':", [["^\\t", 889]]]
[889, "if self.focus_item == self.incommingStreets:\n  try:\n    self.incommingStreets.focus_position += 1\n  except IndexError:\n    self.focus_item = self.currentSquareWidget\n    self.currentSquareWidget._invalidate()\nelif self.focus_item == self.currentSquareWidget:\n  self.focus_item = self.streets\n  self.streets._invalidate()\nelif self.focus_item == self.streets:\n  try:\n    self.streets.focus_position += 1\n  except IndexError:\n    pass\nself._invalidate()", []]
[890, "if command == 'delete-mode':", [["^\\t", 891]]]
[891, "self.view.mode = 'delete'", []]
[892, "if command == 'delete-line':", [["^\\t", 893]]]
[893, "text = self.get_edit_text()", [["!^pycfg -f", 894]]]
[894, "get_start\nstart = text.rfind(\"\\n\",0,self.edit_pos)", [["start == -1; 0", 895], ["True; start", 895]]]
[895, "get_end start\nend = text.find(\"\\n\",self.edit_pos)", [["end == -1; start len(text)", 897], ["True; start end", 897]]]
[897, "remove_region start end\nself.set_edit_text(text[:start]+text[end:])\nself.view.mode = 'command'", []]
[898, "if command == 'delete-word':", [["^\\t", 899]]]
[899, "text = self.get_edit_text()", [["!^pycfg -f", 900]]]
[900, "match_word\nnon_whitespace = re.compile(\"\\\\w*\\\\s*\")\nm = non_whitespace.match(text,self.edit_pos)", [["m is None;", 901], ["True; m.start() m.end()", 897]]]
[901, "return_to_command_mode\nself.view.mode = 'command'", []]
[902, "enter_insert_mode\nself.view.mode = 'insert'", []]
