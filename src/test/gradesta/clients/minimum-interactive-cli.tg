[0, "#!/usr/bin/python3\n# This is a test client", [["^#", 1], ["", 2], ["", 49], ["", 127], ["", 78], ["!^pycfg", 4]]]
[1, "License: AGPL >= 3\nCopyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.", []]
[2, "#imports\nimport sys\nimport argparse\nimport os\nimport zmq\nimport gradesta_pb2\nimport uuid", []]
[128, "zmq_context = zmq.Context()\n", []]
[4, "parse_cli_args\nparser = argparse.ArgumentParser(description=\"\"\"a very basic client with horrible ux\"\"\",formatter_class=argparse.RawTextHelpFormatter)\nargs = parser.parse_args()", [["; args|", 120]]]
[32, "bind_sockets client_id sockets_dir\nos.mkdir(sockets_dir)\ncsock = zmq_context.socket(zmq.REP)\npath = \"ipc://\"+os.path.join(os.getcwd(),sockets_dir,\"client.gradesock\")\nprint(path)\ncsock.bind(path)\nprint(\"Connected to socket.\")", [["; client_id sockets_dir | csock", 121]]]
[78, "#classes", []]
[49, "#functions", []]
[120, "init_state\nclient_id = str(uuid.uuid4())\nsockets_dir = os.path.join(\"clients\",client_id)", [[";client_id sockets_dir", 32]]]
[121, "get_initialization_message csock\nm = gradesta_pb2.ClientState()\nprint(\"Waiting for init message.\")\nm.ParseFromString(csock.recv())\nprint(\"Service name: %s\"%m.service_state.name)\nfor name,bookmark in m.service_state.bookmarks.items():\n print(name + \": \"+bookmark.cell_id)\nhome = m.service_state.bookmarks[\"home\"].cell_id\ncsock.send(b'')", [["; csock | home", 123]]]
[123, "connect_to_manager_sock client_id sockets_dir| home\nmsock = zmq_context.socket(zmq.REQ)\npath = \"ipc://\"+os.path.join(os.getcwd(),sockets_dir,\"manager.gradesock\")\nmsock.connect(path)\nm = gradesta_pb2.ClientState()\nc = m.clients[client_id]\nc.name = \"minimum-interactive-cli\"\nc.status = gradesta_pb2.Client.INITIALIZING\nselection_id = str(uuid.uuid4())\ns = m.selections[selection_id]\ns.name = \"main\"\ns.clients[client_id] = gradesta_pb2.Selection.PRIMARY\ncur = gradesta_pb2.Cursor()\ncur.center = home\ncur.center_stack_depth = 5\ncur.directions = 0b1111\ncur.max_distance = 5\ncur.max_cells = 15\ns.cursors.extend([cur])\nprint(m)\nmsock.send(m.SerializeToString())\nr = gradesta_pb2.ClientState()\nr.ParseFromString(msock.recv())\ncells = {}\ncenter = home", [["; msock client_id selection_id msock  cells center | r", 124]]]
[124, "update_context cells center | m\nprint(\"center: \"+center)\nfor cell_id,cell in m.service_state.cells.items():\n cells[cell_id] = cell\ncc = cells[center]\nif cc.up and cc.up in cells:\n print(\"^^^^^^^^^^^^^^^\")\n print(cells[cc.up].data)\n print(\"^^^^^^^^^^^^^^^\")\n print()\nif cc.left and cc.left.cell_id in cells:\n print(\"<<<<<<<<<<<<<<<\")\n print(cells[cc.left.cell_id])\n print(\"<<<<<<<<<<<<<<<\")\n print()\nif cc.right and cc.right.cell_id in cells:\n print(\">>>>>>>>>>>>>>>\")\n print(cells[cc.right.cell_id])\n print(\">>>>>>>>>>>>>>>\")\n print()\nif cc.down and cc.down.cell_id in cells:\n print(\"vvvvvvvvvvvvvvv\")\n print(cells[cc.down])\n print(\"vvvvvvvvvvvvvvv\")\n print()\nprint(\"--------------\")\nprint(cells[center])\nprint(\"--------------\")", [["False; cells center| ", 125]]]
[125, "read_command \ncommand = input(\">\")", [["command == \"l\";", 126]]]
[126, "go_left msock |\n", []]
[127, "#globals", [["", 128]]]
