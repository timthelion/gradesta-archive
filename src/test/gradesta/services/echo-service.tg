[0, "#!/usr/bin/python3\n# This is service which has no file backing.", [["^#", 1], ["", 2], ["", 49], ["", 78], ["!^pycfg", 4]]]
[1, "License: AGPL >= 3\nCopyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.", []]
[2, "#imports\nimport sys\nimport argparse\nimport os\nimport zmq\nimport gradesta_pb2\nimport subprocess\nimport copy\nimport posix", []]
[32, "bind_sockets args |\nzmq_context = zmq.Context()\nsock = zmq_context.socket(zmq.REP)\npath = \"ipc://\"+os.path.join(os.getcwd(),\"service.gradesock\")\nprint(path)\nsock.bind(path)", [["; sock |", 125]]]
[4, "parse_cli_args\nparser = argparse.ArgumentParser(description=\"\"\"echo-service a dumb service with no file back-end\"\"\",formatter_class=argparse.RawTextHelpFormatter)\nargs = parser.parse_args()", [["; args|", 124]]]
[128, "connect_to_manager_sock\npass", [[";", 127]]]
[78, "#classes", []]
[49, "#functions", []]
[119, "first_messages sock bookmarks |\nsock.recv()\nprint(\"Initial message from manager recieved.\")\nm = gradesta_pb2.ServiceState()\nm.metadata.name = \"echo-service\"\nfor name,dest in bookmarks.items():\n b = m.bookmarks[name] # Note: this makes no sense and python-protobufs sucks\n                       # what is happening here, is we are getting a\n                       # \"default value\" Bookmark object and then\n                       # editing because putting things into maps is\n                       # impossible.\n b.cell_id = dest\nsock.send(m.SerializeToString())", [["; sock bookmarks |", 128]]]
[124, "init_states\nhome_cell = gradesta_pb2.Cell()\nhome_cell.data = \"Hello world.\".encode(\"utf-8\")\nhome_cell.encoding = gradesta_pb2.Cell.UTF8\ncells = {\"abc\":home_cell}\nbookmarks = {\"home\":\"abc\"}", [["; cells bookmarks |", 32]]]
[125, "launch_manager\nmanager_process = subprocess.Popen([\"gradesta-manager\",\"--service-pid\",str(posix.getpid())])", [["; manager_process |", 119]]]
[126, "shut_down_manager manager_process|\ninput(\"Press enter to close manager.\")\nmanager_process.terminate()", []]
[127, "recv_loop sock bookmarks cells|\nm = gradesta_pb2.ServiceState()\nm.ParseFromString(sock.recv())\nr = gradesta_pb2.ServiceState()\nfor name,bookmark in m.bookmarks:\n if bookmark.status == gradesta_pb2.Bookmark.NORMAL:\n  bookmarks[name] = bookmark.cell_id\n elif bookmark.status == gradesta_pb2.Bookmark.DELETE:\n  del bookmarks[name]\nfor cell_id,cell in m.cells:\n if cell.runtime.status == gradesta_pb2.Cell.Runtime.NORMAL:\n  cells[cell_id] = cell\n elif cell.runtime.status == gradesta_pb2.Cell.Runtime.DELETED:\n  del cells[cell_id]\n elif cell.runtime.status == gradesta_pb2.Cell.Runtime.IN_VIEW:\n  r.cells[cell_id] = cells[cell_id]\nsock.send(r.SerializeToString())", [[";sock bookmarks cells|", 127], [";", 126]]]
