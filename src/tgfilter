#!/usr/bin/python3
import json
import fileinput
import sys
import argparse
parser = argparse.ArgumentParser(description='Filter out squares from a textgraph.')
parser.add_argument('infile', nargs='?', type=argparse.FileType('r'), default=sys.stdin)
parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout)
parser.add_argument('--eq', help='Filter out squares whos text is equal to argument.')
parser.add_argument('--street-neq', help='Filter out streets whos text is not equal to argument.')
parser.add_argument('--street-prefix', help='Filter out streets whos name has prefix.')
parser.add_argument('--rezero',type=int,default = 0, help='Change square the given square\'s ID to 0')
args = parser.parse_args()
lineno = 0
filter = sys.argv[1]
graph = {}
for line in args.infile.readlines():
	if line.startswith("#"):
		print(line)
	try:
		id,text,streets = json.loads(line)
	except ValueError:
		sys.exit("Line: "+str(lineno)+"\n"+line+"\nis invalid.")
	if args.rezero != 0:
		if id == 0:
			id = args.rezero
		if id == args.rezero:
			id = 0

	if text != args.eq:
		graph[id] = (id,text,streets)

for _,square in graph.items():
	id,text,streets = square
	if args.rezero != 0:
		if id == 0:
			id = args.rezero
		if id == args.rezero:
			id = 0
	def keep_street(street):
		in_graph = street[1] in graph
		if args.street_neq is not None:
			neq = street[0] == args.street_neq
		else:
			neq = True
		if args.street_prefix is not None:
			prefix = not street[0].startswith(args.street_prefix)
		else:
			prefix = True
		return in_graph and neq and prefix
	streets = [street for street in streets if keep_street(street)]
	print(json.dumps([id,text,streets]),file=args.outfile)
