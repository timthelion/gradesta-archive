#!/usr/bin/python3
import gradesta
import os

class Dir(gradesta.Obj):
 def load(self):
  try:
   self.files = os.listdir(self.id)
  except PermissionError as e:
   self.files = [str(e)]
  self.open_files = {}

class Head(gradesta.Cell):
 obj_type = Dir

 def data(self):
  return self.obj.id.encode("utf-8")

 def down(self):
  if self.obj.files:
   return Entry.id(
    obj=self.obj,
    attrs={"e": self.obj.files[0],},
   )

 def left(self):
  parent, me = os.path.split(self.obj.id)
  if me:
   return Entry.id(
    obj_id=parent,
    attrs={"e": me}
   )

class Entry(gradesta.Cell):
 obj_type = Dir

 def load(self):
  self.i = self.obj.files.index(self.a["e"])

 def data(self):
  return self.a["e"].encode("utf-8")

 def full_path(self):
  return os.path.join(self.obj.id, self.a["e"])

 def up(self):
  if self.a["e"] == self.obj.files[0]:
   return Head.id(obj=self.obj)
  else:
   return Entry.id(
    obj=self.obj,
    attrs={"e": self.obj.files[self.i - 1]},
   )

 def down(self):
  if self.i + 1 < len(self.obj.files):
   return Entry.id(
    obj=self.obj,
    attrs={"e":  self.obj.files[self.i + 1]},
   )

 def right(self):
  if self.full_path() in self.obj.open_files:
   return File.id(
    obj=self.obj,
    attrs={
     "e":self.a["e"],
     "full_path":self.full_path(),
    },
   )
  elif os.path.isdir(self.full_path()):
   return Head.id(
    obj_id=self.full_path(),
   )

 def click(self):
  print(self._r.click_count)
  if self._r.click_count > 0 and self._r.click_count % 2 == 1:
    try:
     try:
      with open(self.full_path(), "rb") as fd:
       self.obj.open_files[self.full_path()] = fd.read()
       self.obj.mark()
     except IsADirectoryError:
      pass
    except PermissionError as e:
     self.obj.open_files[self.full_path()] = str(e).encode("utf8")
     self.obj.mark()
  elif self.full_path() in self.obj.open_files:
   del self.obj.open_files[self.full_path()]
   self.obj.mark()

class File(gradesta.Cell):
 obj_type = Dir

 def data(self):
  return self.obj.open_files[self.a["full_path"]]

 def left(self):
   return Entry.id(
    obj=self.obj,
    attrs={"e": self.a["e"],},
   )

gradesta.Server(
 name="grfs",
 source_url="http://git.hobbs.cz/?p=tg;a=summary",
 index=Head.id(obj_id="/"),
 cell_types=(
  Head,
  Entry,
  File,
 )
).serve()
