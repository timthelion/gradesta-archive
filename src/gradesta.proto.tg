[0, "// The gradesta standard\nsyntax         =          \"proto2\"            ;\npackage                    gradesta           ;", [["#next", 1], ["#", 95], ["#", 2], ["#", 7], ["#", 39], ["#", 67], ["", 215], ["#", 98], ["", 42], ["#", 66], ["", 214], ["#", 106], ["", 119], ["#", 37], ["", 3], ["#", 51], ["", 5], ["#", 81], ["#", 190], ["", 189], ["#", 191], ["", 186], ["#", 19], ["#", 13], ["#", 175], ["", 174], ["#", 65], ["", 46], ["#", 38], ["", 47], ["#", 17], ["#", 105], ["", 104], ["", 204], ["", 205], ["", 208], ["", 206], ["", 199], ["", 203], ["#", 64], ["#", 148], ["", 147], ["", 211], ["", 212], ["#", 171], ["#", 118], ["#", 82], ["#", 83], ["#", 80], ["", 170], ["#", 120], ["#", 96], ["#", 8], ["#", 9], ["#", 36], ["#", 35]]]
[1, "Copyright (c) 2017 Timothy Hobbs\n\nThis file is part of Gradesta.\n\nGradesta is free software: you can redistribute\nit and/or modify it under the terms of the GNU\nAffero General Public License as published by\nthe Free Software Foundation, either version 3\nof the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it\nwill be useful, but WITHOUT ANY WARRANTY;\nwithout even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE.  See the GNU Affero General Public\nLicense for more details.\n\nYou should have received a copy of the GNU\nAffero General Public License along with this\nprogram. If not, see\n<http://www.gnu.org/licenses/>.", [["#next", 95]]]
[2, "What is a Gradesta graph? (Basic structure)\nThis protocol is designed to allow you to\neasilly create services who's user inteface is\nexpressed as an interactive directed graph.\n\nThe name Gradesta stands for graph of stacks.\n\nThe basic principle is that a Gradesta graph is\na collection of cells, each cell has links pointing\nin the four cardinal directions. One of those links is the\n\"next in stack link\", the second is the \n\"previous in stack link\". The third is the \n\"east edge link\". The fourth the \"west edge\nlink\". In most cases, you can think of them as\nsimply being up, down, left and righ.\n\nThe stack links allow you to build a doubly  \nlinked list of cells. You can only stack link  \nto an cell which has not been stack linked  \npreviously. And the up/down stack  \nlinks MUST match up to create a linear  \nstructure without loops. Likewise, stacks\nmust be finite in the upwards direction\n(though they may be non-finite in the\ndownwards direction)\n\nNote: It is technically possible to violate\nstack linking rules using the protocol, but\nthat would be weird and very icky. It is not\nwrong for a client to crash or to call you a\nrotten banana if you try to hand it such a\ngraph.\n\nThis is a stack:\n\n\u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\n\u2502Bar \u2502\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nFoo next-links to Bar.\nBar prev-links to Foo.\nBar next-links to Baz.\nBaz prev-links to Bar.\n\nThe left/right(east/west) edge links can link\nto any cell including itself.\n\n\u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2510\n\u2502Foo \u2502\u25c2\u2500\u2500\u25b8\u2502Lol \u2502\n\u2502Bar \u2502    \u2514\u2500\u2500\u2500\u2500\u2518\n\u2502Baz \u2502\n\u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, Foo has an east edge link to Lol.\nLol also has a west edge link to Foo.\n\nIt is possible for an cell to edge link to itself.\n\n  \u250c\u2500\u2500\u2500\u2500\u2510\n  \u2502Foo \u2502\n  \u2502Bar \u2502\n\u250c\u25b8\u2502Baz \u2502\u25c2\u2510\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nHere, Baz links to itself.\n\nOther types of loops are also allowed:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2514\u25b8\u2502Foo \u2502\u25c2\u2500\u2500\u25b8\u2502Lol   \u2502\u25c2\u2518\n  \u2502Bar \u2502\u25c2\u2500\u2500\u25b8\u2502Port 1\u2502\n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nWeird things are also possible, such as non-matching\neast-west links. But non-matching east-west links are\nicky and should feel icky if you do them. Clients\nSHOULD support icky non-matching east-west links as\nthey are sometimes necessary to represent many-to-one\nrelationships.\n\nPossible but icky:\n  \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \n  \u2502Foo \u2502\u25c2\u2500\u2500\u2500\u2502Lol   \u2502  \n  \u2502Bar \u2502    \u2502Port 1\u2502  \n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nLol's left link points to Foo but Foo has no links.\n\nNot considered as icky because there is no other\ngood way to do it:\n\n  \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \n  \u2502Foo \u2502\u2500\u252c\u2500\u25b8\u2502Lol   \u2502  \n  \u2502Bar \u2502 \u2502  \u2502Port 1\u2502  \n  \u2502Baz \u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n  \u250c\u2500\u2500\u2500\u2500\u2510 \u2502 \n  \u2502Boo \u2502 \u2502 \n  \u2502Lar \u2502\u2500\u2518  \n  \u2502Maz \u2502\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nHere both Foo and Lar link to Lol\n\nPossible but icky:\n  \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \n  \u2502Foo \u2502\u25c2\u252c\u2500\u2500\u2502Lol   \u2502  \n  \u2502Bar \u2502 \u2514\u2500\u25b8\u2502Port 1\u2502  \n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nFoo's right link points to Port 1 and Lol's left link\npoints to Foo. Port 1 has no links going out of it.\n\nPossible but icky:\n  \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \n  \u2502Foo \u2502\u25c2\u252c\u2500\u25b8\u2502Lol   \u2502  \n  \u2502Bar \u2502 \u2514\u2500\u2500\u2502Port 1\u2502  \n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nHere, both Lol and Port 1's left links link to Foo.\nHowever, Foo's right link only points to Lol.\n\nThere is no maximum size limit for Gradesta\ngraphs, and a procedurally generated Gradesta \ngraph is often infinite in size.\n\nIt is possible to have an infinite number of \ncells, and even the stacks can be loaded lazily\nso as to allow for infinite stacks.\n\nThere are no edge labels.\nThere is also no concept of a port.\nBoth of these concepts can be emulated,\nhowever.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502edge_label   \u2502\u25c2\u2500\u2500\u25b8\u2502another_vertex \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can imagine the first cell in the\nstack as being the vertex label, and the\nsecond cell as being the edge label.\n\nYou can also designate a region of the stack\nto act as a collection of incomming ports.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502vertex_label \u2502    \u2502another_vertex \u2502\n\u2502edge_label   \u2502\u25c2\u2500\u2500\u25b8\u2502in_port        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nYou can also combine both concepts.\n\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502vertex_1    \u2502    \u2502vertex_2   \u2502\n\u250c\u25b8\u2502in_port_1   \u2502  \u250c\u25b8\u2502in_port    \u2502\n\u2502 \u2502in_port_2   \u2502  \u2502 \u2502edge_label \u2502\u25c2\u2510\n\u2502 \u2502edge_label  \u2502\u25c2\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nIn the above example, vertex_1 has\nan edge which links to vertex_2's first in\nport. And vertex_2 has an edge which links\nto vertex_1's in_port_1.\nvertex_1's in_port_2 is unconnected.\n\n\nNote,\nit is not possible to have more than one left/right\nlink, thus this graph is impossible:\n\n  \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \n  \u2502Foo \u2502\u25c2\u252c\u2500\u25b8\u2502Lol   \u2502  \n  \u2502Bar \u2502 \u2514\u2500\u25b8\u2502Port 1\u2502  \n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nHere is the same example with left/right links reversed.\n\nPossible:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2514\u25b8\u2502Foo \u2502    \u2502Lol   \u2502\u25c2\u2524\n  \u2502Bar \u2502    \u2502Port 1\u2502\u2500\u2518\n  \u2502Baz \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2514\u2500\u2500\u2500\u2500\u2518\n\nNote that just because weird left/right non-matching\ngraphs are not forbiden, does not mean that they are\nrecomended!", [["", 6], ["#next", 7]]]
[3, "message Cell {\n // Merge policy: replace what is set\n //  <chunk, contents>\n map <uint64, bytes>  data        =  1;\n optional Encoding    encoding    =  3;\n optional string      mime        =  4;\n map <string, bool>   tags        =  5;\n\n // Merge policy: empty links are deleted\n //  <dir,    Link>\n map <sint64,  Link>   links       =  6;\n\n // Merge policy: 0 coords are deleted\n // <dimension, possition>\n map <int32, double>  coords      = 200;\n}", [["#", 189], ["#", 5]]]
[5, "message Link {\n // Merge policy: full replace\n optional string      service_id             = 1;\n optional string      path                   = 2;\n enum Namespace {\n  MAIN  = 0;\n  PATCH = 1;\n }\n optional Namespace   namespace              = 3;\n map <string, string> parameters             = 4;\n map <string, string> client_side_parameters = 5;\n}", []]
[6, "Links\nAs stated in the section on graph structure,\neach cell has stack links and edge links.\nStack links always point to another cell within\nthe current graph, but east-west edge links may\npoint to a location outside of the current\ngraph.\n\nThese outside locations are described using the\nLink message struct.\n\nLinks have the following attributes:\n\nservice_id: Specifies the type of service used to\nresolve the link. In order to specify,\nthat the link is local the current service\n'.' should be used.\n\nIt is the repsonsibility of distribution\nmaintainers to ensure that services are\nsuccessfully installed and registered.\nFor more information about registering\nservices, see \"Resolving service ids\"\nbelow.\n\npath: Is a protocol specific path to a given\ngraph. In order to specify that the link points\nto the current graph, `.` is used. The path may\nnot include newlines or the sequences './' and\n'..'.\n\ncell_id: The id of the cell being linked to.", [["", 81], ["#next", 51]]]
[7, "What is the architecture of the Gradesta protocol?\n\nGradesta uses a client service architecture.\nThe service provides a gradesta graph which\ncan represent a graph based user interface,\na document, a view into a file system or database,\nor an interactive graph based virtual world.\nThis graph can be interacted with using a gradesta\nclient. Clients play the role of user interfaces\nnot unlike web browsers do for the web. Clients\ncan also be automatic scripts which interact with\nthe graph on their own. \n\nThe protocol allows the service to accept or reject\ninteractions, and therefore, it is\neasy for the service to create new rules\nabout which graphs are acceptable and which\nones are not. For example, if you wanted to\nadd the rule that a stack could only have\ntwo in ports, you could do so by rejecting\nall changes to the graph which violated that\nrule. Through clever service construction,\none can model almost any kind of graph-like\nuser interface or document.\n\nThe protocol is designed with the goal of\nmaking it as easy as possible to create new\nservices which provide interactive graphs.\nThis at the expense of making it harder to\ndevelop clients for interacting with those\ngraphs.\n\nThe protocol is intended for use on the\nlocal system via unix sockets and the\nZeroMQ message passing system.\n\nIn the future, the protocol will be extended\nto support serving gradesta graphs over the\ninternet. The protocol has been planned in\nsuch a way, that this addition can happen\nwithout changing the origional underlying\nstandard.\n\nEach graph service launches as a normal\n*nix process. It then creates a directory\n$XDG_RUNTIME_DIR/gradesta/services/<service-id>/internal-path/\n\nAs an example, the \"xyz\" service might\ncreate a directory\n$XDG_RUNTIME_DIR/gradesta/services/xyz/bar/\n\nIn this directory, the service will create\na socket named service.gradesock\n\nThis is a \u00d8MQ PAIR socket.\n\nOnce service.sock has been created, the\nservice launches the \"gradesta-manager\" which does\nthe heavy lifting of interacting with\nclients and performing resource tracking.\nThe manager is launched by calling the\nexecutable 'gradesta-manager' with the $CWD\nset to the path of the service's directory.\n\nNote: The service launches the manager manually\nbecause in some cases, extra flexibility is\nrequired by the service and an alternative manager\nmay be used, or the service may act as manager\nitself.\n\nWhen a client wants to connect to a service\nit first creates a client socket at.\n$XDG_RUNTIME_DIR/gradesta/services/xyz/bar/clients/<id>/client.gradesock\n\nclient.gradesock is a PAIR socket. The client uses\nthis socket to subscribe to selections, modify slections\nand update the graph. The manager uses this socket\nto push relevant changes to the client. This won't\nbe all changes, but rather, only changes that are\nin view on the client side. The manager\ntracks what is in view internally through\na subscription system. The data type for this socket\nis a ClientState.\n\nThe manager will automatically detect the\ncreation of client.gradesock and connect to\nit.\n\nCommunication between the parties is encoded\nusing Google's protobuf 2 serialization\nprotocol.", [["", 52], ["", 60], ["#next", 39]]]
[8, "How does the Gradesta protocol relate to RDF?\n\nRDF is a format for describing graphs. These\ngraphs are very simple and textual, just\nlike Gradesta graphs. However, the goals are\nquite different. RDF's goal is to collect\nfacts into a \"logic database\" and to be able\nto answer questions about data in a user\nfriendly manner. It also tries to allow the\ncomputer to create data visualizations. In\nmany ways, RDF is like prolog for people who\nlike comitees. It is standardized by the\nW3C.\n\nThe Gradesta protocol could be used to serve\nRDF graphs, and indeed that would be a good\nfit. Both ecosystems are text centric and\nintended to present their data to users as\nwell as allow users to edit and enter new\ndata.\n\nHowever, Gradesta applications are broader\nin scope than RDF. You can create a visual\nprogramming language that uses Gradesta as\nits front end, or a mind mapping program, or\na menu based email client, or a menu based\nwiki, or a menu based CAD program ect.", [["#next", 36]]]
[9, "What is the difference between Gradesta and graph databases such as neo4j?\n\nLike RDF, graph databases focus on their\nability to algorithmically answer\nquestions/queries about data. Unlike RDF,\nhowever, graph databases go beyond basic\ntextual fact like data. Any kind of data can\nbe stored in a graph database.", [["#next", 35]]]
[13, "Getting cells\n\nA client can request a neighborhood of cells\nby contacting the manager via manager.gradesock.\nA neighborhood is a region of a graph which\nis bounded by a maximum number of steps from\na given cell. Requested neighborhoods are\nexpressed using the Cursor type. A Cursor\nhas a center cell, as well as what an real\ntime strategy game player would refer to as\na line of sight.\n\nThe manager records which Cursors have\nbeen placed by which clients, and, upon\nreceiving updates from the service, only\nforwards those changes to the clients for\nwhom the changes are relevant. Cusors can\nthus be thought of as a subscription to\na region of the graph.\n\nThe service has no knowlege of clients or\ncursors. In order for the manager to request\na neighborhood from the service, it first\nmarks the Cursor's center cell as 'IN_VIEW'\nby passing a Cell to the service with the\n'cell_id' and 'cell_status' set, but no other\nproperties set. The service will then respond\nwith the cell, either set to 'NORMAL' state,\nand with all properties set, or in 'NON_EXISTANT'\nstate with none of the properties set.\n\nOnce the manager has the center cell of the\nCursor, it looks at the line of sight of the\nCursor and starts to request rings going outward\naway from the center cell, using the same method\nof setting the cells as 'IN_VIEW'.\n\nWhen a cursor moves, or changes in the graph\ndisconnect a part of the neighborhood from\nbeing within sight, the manager will inform\nthe service that the cells have gone 'OUT_OF_VIEW'.\n\nIf the service ever modifies the contents of the\ngraph on its own, without the interaction of the\nclients, then the service must notify the manager\nof these changes, so that they may be passed on\nto the clients. However, the service should keep\ntrack of which cells are IN_VIEW and OUT_OF_VIEW,\nrather than spamming the manager with all changes.\nThis is not strictly necessary, as the manager is\nperfectly capable of ignoring changes to cells\nwhich are OUT_OF_VIEW. However, services which\nmake many many changes may find, for performance\nreasons, that tracking IN_VIEW and OUT_OF_VIEWness\nis necessary.\n\nThe astute reader may have realized a problem\nwith this model. What if a Cell which is currently\nout of view is connected to a Cell which is in\nview in such a way that the new Cell should become\nIN_VIEW itself. If the service tracks which Cells\nare IN_VIEW and which cells are OUT_OF_VIEW, will\nthe manager learn about the new cell which should\nbe IN_VIEW? The answer is yes, but only if the\nservice abides by the doubly linked nature of correct\ngradesta graphs. It is impossible for a service\nto connect an OUT_OF_VIEW cell to an IN_VIEW cell\nwithout simultaneously modifying the IN_VIEW cell\nto accept the incomming connection and thus\nnotifying the manager of the change.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.gradesock\n\u2502             \u2502            \u2502ClientState    |\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.gradesock           \u2502\n\u2502             \u2502ServiceState|               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via         (This back and forth repeats\n\u2502             \u2502service.gradesock   for each \"ring\" of the Cursor's\n\u2502             \u2502ServiceState|       line of sight untill the Cursor's\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500max_distance and center_cell_depth\n\u2502REPLY via \u2192  \u2502            \u2502       is reached.)\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.gradesock           \u2502\n\u2502             \u2502ServiceState|               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.gradesock           \u2502\n\u2502             \u2502ClientState \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 47], ["", 3], ["", 42], ["#next", 48]]]
[17, "Managing selections\n\nSelections are set and get much like cells: by\nupdating a dictionary. If you know how to\nupdate cells, you should be able to figure\nout selections as well.", [["", 47], ["", 46], ["#next", 100]]]
[19, "Setting cells\n\nThe client can set the text values, tags\nand the links of cells and resources by\nsending an dictionary of changed cells to\nthe manager. Obviously, with this approach,\nmultiple cells can be set symultaneously.\nFurthermore, by setting the cell_status \nof a cell, this method can be used to mark\ncells as being deleted as well.\n\nThe manager will automatically notify\nclients to whom the changes are relevant.\n\nCreating new cells is also done through the\nset command. It is the client's\nresponsibility to make sure that new cells\nhave unique IDs. The cell-id can be any unique\nstring. However, the canonical representaion\nof a uuid4 is recomended.\n\nThe re-ordering of stacks and rewiring of\nthe graph is also conducted by sending changes\nthrough the cell dictionary. When setting a\ncell's prev link, the next link of the newly\nlinked cell will be automatically set by the\nmanager and whatever was linked previously will\nbe disconnected. The same applies when setting\nnext links and edge links. This ensures that\nstacks and edges remain doubly linked lists.\n\nEach cell has a edit count. This number\nrepresents the number of times the cell has been\nmodified. Each time a cell is set, the client must\nincrement the edit count. If the service receives\na cell who's edit count is less than or equal to\nthe current edit count the change will be rejected.\n\nThe reason for the edit count is to ensure, that\nwhen two clients are modifying the graph at the\nsame time, their changes are applied only if\nusing up to date cell data.\n\nCell edits can be rejected by the service for\nany number of reasons. In all cases, cells who's\nedits are to be rejected should be returned to\nthe manager in the cell_status 'EDIT_FAILED' and\ntheir 'edit_error' property should be set.\n\nFinally, cells can be clicked by incrementing\ntheir click_count property. These clicks are\npassed on to the service using the same mechanics\nas cell editing. What clicking a cell does (if\nanything) is determined by the service.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Manager    \u2502 Client        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502            \u2502\u2190 REQ via      \u2502\n\u2502             \u2502            \u2502manager.gradesock\n\u2502             \u2502            \u2502ClientState    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 \u2190 REQ via  \u2502               \u2502\n\u2502             \u2502service.gradesock           \u2502\n\u2502             \u2502ServiceState\u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502REPLY via \u2192  \u2502            \u2502               \u2502\n\u2502service.gradesock         \u2502               \u2502\n\u2502ServiceState \u2502            \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 REPLY via \u2192\u2502               \u2502\n\u2502             \u2502manager.gradesock           \u2502\n\u2502             \u2502ClientState \u2502               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502 PUB   via \u2192\u2502               \u2502\n\u2502             \u2502client.gradesock            \u2502\n\u2502             \u2502ClientState \u2502               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", [["", 3], ["", 42], ["", 43], ["#next", 13]]]
[35, "Closing remarks\n\n  Have fun!\n  Go VEGAN!\n  Fuck the eventual privatization and monopolization of all limited resources in the hands of a minority.\n  And respect others!\n\nThe third sentence was origionally \"fuck capitalism\"\nbut that was vague to the point of being wrong.\n\nMany people imagine the name of Soviet Communism to be\nsigned under such a phrase. But in communist\nRussia they still used money, there was still a minority\n(the state) which controlled limited resources, and\nthey were generally doing it wrong.\n\nI also, origionally had this list of things\nyou can personally do to \"fuck capitalism\":\n\n - Buy less shit you don't need.\n - Make things yourself.\n - Grow your own food.\n - Make and do things for others for free.\n - Cooperate with others to do things in a mutually\n   beneficial fashion without the use of money.\n - Squat abandoned buildings.\n - Eat from the dumptser.\n\nThis list of recomendations lead to a satisfying\nprogression of goodness, from friendship, love\nand trust, to isolated mini-utopias, to worldwide\nrevolution and heaven on earth. Read on:\n\nWithin \"capitalism\", it is very hard to trust\npeople. You never know if someone is being\nhonest, or if they are trying to sell you\nsomething. True friendship exists only in a\nnon-comercial context.\n\nIf a few people \"fuck capitalism\", then they\ncan be friends, real friends, true friends.\nAnd they can enjoy each-others company and\nmake some free stuff that everyone can\nenjoy. That's a good thing.\n\nIf more people \"fuck capitalism\", then that's\neven better. There's more free stuff, great\nnetwork effects.\n\nIf everyone \"fucks capitalism\", then we\ncan all walk around in toe shoes playing\nfrisbee on abandoned superhighways, eating\nfree VEGAN pizza baked by the fully\nautomated GNU Pizzamaker, and we can smile at\neachother in the sunshine, knowing that\nwe're all friends and no one's trying to\nsell us shit or take over.\n\nEven in the worst of cases, if even only two\npeople in the world fuck capitalism. At least\nthey can be true lovers. If only one person\nfucks capitalism, at least they can be a\nsaint.\n\n----------------------------------------------\n\nI origionally wrote this text with the title\n\"Have fun! Go VEGAN! Fuck capitalism!\" It was\nonly later that I added the line \"And respect\nothers.\" Go ahead, check git.\n\nMaking fucking capitalism work requires mutual\nrespect. In order to explain the exact point,\nI would like to bring up the case of a beach\nupon which children are building sand castles.\n\nThe \"goal\" of my model would be to allow as\nmany children to happilly build sand castles\nas possible.\n\nIf one or several children were to mark off\nlarge swaths of the beach as being \"their\nterratory\", then other children might not\nfind a place to build their castles. This\nwould be capitalism.\n\nOf course, true capitalism would be some-\nwhat more efficent than that, exhibiting\nboth rent and usury.\n\nBut it would certainly be sub-optimal.\n\nIt is also sub-optimal, however, if the\nchildren all play on the beach with no\nrespect for the work of the other children,\nrunning and trampling the carefully\nconstructed towers and parapets. Remodeling\nthe walls others had built without asking.\n\nA truely optimal result requires both\ncommunication and mutual respect. This\nrespect should only be limited in cases where\nchildren take up more than their fair\nshare of beach real-estate.\n\nAs adults and sentientist vegans, mutual\nrespect is much more challenging than\nit is for the children on the beach.\nThe laws of ecology do not even allow\nus to live without stepping on the\ntoes of other sentient beings. Mutual\nrespect requires us to be constantly\naware of the needs and desires of others\nas well as our own needs and desires.\nIt is a chalenging balancing act which\nis impossible to perfect.\n\nHowever, if we approach the problem\nsimplistically, thinking that simply\nspurning monitary economics will\nlead to utopia, we are surely bound\nto fail even more miserably than if we\nhad truely understood the problem to\nbe what it is: the most complex and\nchallenging optimization problem in the\nuniverse.", []]
[36, "What about Ted Nelson's ZigZag\u00ae \n\nGradesta shares the same goals as, and a very\nsimilar achitecture to, the gzz project and more\ngenerally, Ted Nelson's patented zzstructure.\nhttp://www.nongnu.org/gzz/index.html\n\nThe data structure behind gradesta, being a graph\nof stacks, is similar, but not the same as,\nzzstructure.\n\nThe gzz, and ZigZag projects were destroyed by\na combination of poor team culture, patents,\nand trademarks. While I beleive that the\nprogrammers who worked on the project origionally\nwere incredibly skilled and wrote quality code,\nI decided to create gradesta from scratch, in\npart to distance myself from the hard feelings\nof the past (though the patent is now expired).\n\nThe second reason for starting from scratch\nis that gzz was too ambitious. It included\nversion control as a core feature, where-as\ngradesta wishes to leave version control as\na 3rd party utility.\n\nFurthermore, I personally found the multi-\ndimensionality of zzstructures to be disorienting.\nThey reminded me of the following quote from\nEnders Game:\n\n\"He found that a great deal of what he learned at\nBattle School transferred to the simulator. He would\nroutinely reorient the simulator every few minutes,\nrotating it so that he didn't get trapped into an up-down\norientation, constantly reviewing his positoon from\nthe enemy point of view. It was exhilarating at last to\nhave such control over the battle, to be able to see \nevery point of it.\"\n\nI tried doing this with Age of Mythology after reading\nthat passage. It didn't help my tactics. It just left\nme feeling stupid and confused. I had the same feeling\nwith gzz.\n\nI'd much rather have a canonical representation in which\nat least one of the dimensions never changes. As a user,\nI need something to hold on to. Even if its totally\narbitrary. I need know that the enemy's gate is down.", [["#next", 9]]]
[37, "Cells and their metadata\n\nCells are always stored in a map mapping cell_id's\nto Cell objects. 'cell_id's are often a freshly\ngenerated uuid4 string, but can be any string that\ndoes not contain the '\\n' character.\n\nCell objects have the following fields:\n\n'data') contents of the cell.\n\n'encoding') Encoding of cell contents.\n\n'mime') mime-type of cell contents.\n\n'back' and 'forth' link maps) links to other cells\nin the graph.  These are stored in a map which maps\ndimension numbers to links. The 0th dimension is the\ntypical left/right dimension, the 1st dimension is the\ntypical up/down dimension. This ordering matches that\nused in mathematics of dimensions x and y but is\notherwise arbitrary. There are not typically more than\ntwo dimensions, but the protocol supports any number.\n\n 'tags' ) are used for grouping cells in a visual\neditor or for whatever use you find interesting.\nThey may contain no whitespace. Encoded as a map\nmapping the tag name to a bool, whether the tag\nis attached to the cell or not.\n\n 'coords' ) this option encodes the coordinates of\nthe cell within a virtual space. It is strongly\ndiscouraged to use this option, and most clients will\nnot respect this option, choosing rather to layout\nthe cells in an algorithmic fashion. Furthermore, most\nservices will not save this option. Clients which\ndo take the cell's coords into account are considered\nto be \"floating\" clients, where-as clients which layout\nthe cells algorithmically will be refered to as tiling.\nThe order of coordinates is x,y,z... more than three\ndimensions is possible if you're so creatively\ninspired. Encoded as a map from \"dimension\" to scalar\nvalue. For unsetting a dimesion, use NaN.", [["", 3], ["", 19], ["", 13], ["#next", 6]]]
[38, "The Selection object\n\nSelections are used to store what a client has selected or is\nlooking at. Each selection contains a collection of cursors which\npoint to cells in the graph.\n\nSelections are stored in a map in which the key is the cursor_id\na unique string, typically a uuid4. This map can be either a\nskeleton map in which only the 'name' field of this object is\nstored or a full map in which all changed fields are stored.\n\nSelections have the following properties:\n\nname:            The human readable name of the selection. A client\n                 may not have two selections with the same name. But\n                 two different clients may each have differnt\n                 selections with the same names. \n\ncursors:         List of cursors to cells in the selection.\n\nupdate_count:    The number of times this selection has been updated.\n                 Clients must increment this number each time they\n                 modify a selection.\n\nclients:         This maps clients to their relationship with the selection.\n                 The distinction between PRIMARY and SECONDARY selections is\n                 that PRIMARY selections are selections which have been\n                 created by a given client where-as SECONDARY selections\n                 were created elsewhere and are either being folowed\n                 or \"joined\". It is possible for clients to specify\n                 selections as INTERNAL. INTERNAL selections usually don't\n                 make sense to be shared or to be seen by the user.\n                 When a client no longer wishes to use a selection it should\n                 set its status to NONE.", [["", 47], ["#next", 17], ["", 64]]]
[39, "Pattern of communication\n\nThe gradesta protocol functions via the passing\nof changes to a data structure which represents\nthe protocol's shared state. Basically, you should\nthink of it as a patching system. At first, you\nshare the original document, and after that, you\njust send diffs back and forth.\n\n        \u25c2\u2500 requests \u25c2\u2500 requests\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \n  \u2502service\u2502\u25c2\u2500\u25b8\u2502manager\u2502\u25c2\u2500\u25b8\u2502client\u2502  \n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     truth \u2500\u2500\u2500\u2500\u2500\u25b8 truth \u2500\u2500\u2500\u2500\u25b8\n\nRequests for changes to the sytem state flow\nfrom the client to the manager, and manager to\nthe service. All truth about the system state\nflows from the service or the manager depending\non who ones the object.\n\nBecause graphs can be arbitrarilly large,\npotentially infinite in size, it is impossible\nfor them to be synchronized completely.\n\nInstead, clients may place a cursor in the \ngraph and subscribe to cells which are near\nthat cursor. Cells are sent on the wire as\na map, which can be merged with the entpoint's\ncell map. Since only cells that are near a\ncursor will be sent, graphs can be of infinite\nsize.\n\nShared state is stored in a hierarchy with\nthe ClientState being at the root and the\nServiceState being contained within the\nClientState.\n\nAs each type of state is child to the last,\neach type of state is simpler than the last.\n\nThis goes in line with the gradesta philosophy\nthat as much work as possible should be passed\noff to the manager, which need be written only\nonce. And that clients, which are less numerous\nthan services, can be granted a little more\nresponsibility.\n\nClients may wish to see and or modify the\nselections and cursor's of other clients. Both\ntypes of information are stored in 'Selection'\nobjects. Each client can see a skeleton map of\nthe existant selections but are not informed\nof their locations so as to prevent the manager\nfrom needlessly forwarding every cursor location\nupdate to every client. Instead, each Selection\nhas a map of interested clients and location\nupdates are sent to clients on a need-to-know\nbasis.", [["", 42], ["", 43], ["#next", 67]]]
[42, "message ManagerState {\n //  <client_id, Client>\n map <string,Client>      clients              =  7;\n optional Manager         manager              =  8;\n //  <selection_id, Selection>\n map <string,Selection>   selections           =  9;\n //  <walk_tree_id,WalkTree>\n map <string,WalkTree>    walk_trees           = 10;\n\n // User identity\n optional string          identity_challenge   = 11;\n optional string          user_signature       = 12;\n optional string          user_public_key      = 13;\n map <string, IdentityServer> identity_servers = 14;\n}", [["#", 213], ["#", 47], ["#", 206], ["#", 46], ["#", 174], ["#", 212], ["#", 211]]]
[43, "message ServiceState {\n // Merge policy: Replace what is set\n repeated CellRuntime     cells                =  1;\n\n enum OnDiskState {\n  READ_ONLY = 1;\n  SAVED     = 2;\n  MODIFIED  = 3;\n }\n \n optional OnDiskState     on_disk_state        =  2;\n // round is not merged\n optional Round           round                =  3;\n //  <time, message>\n map <string, string>     log                  =  4;\n optional ActorMetadata   metadata             =  5;\n\n optional CellRuntime     cell_template        =  6;\n\n\n // User identity\n optional string          user_public_key      =  7;\n // identity_servers is merged concatinatively\n map <string, IdentityServer> identity_servers =  8;\n\n //  <field,  Mode>\n map <uint32, Mode>       _modes  =  9;\n}", [["#", 211], ["#", 212], ["#", 186], ["#", 119], ["#", 177], ["#", 147]]]
[44, "Bookmarks\nIf the service provides a graph, but does not\ngive any context as to what is in the graph\nit is impossible for a client to find\nany cells. Without knowing where to start when\nwalking a graph, it is impossible for the \nclient to display anything at all to the user.\n\nIn order to solve this problem, the concept of\nbookmarks is introduced. A bookmark maps a human\nreadable name to a cell_id, and stores that name\nand cell_id in a central map so that cells can be\nfound when needed.\n\nThe map of bookmarks is stored in the ServiceState.\nThis map must never be empty.\n\nA bookmark's Status is used for map updates to delete\nbookmarks, but may also be used by the service or\nmanager to communicate to a client that a bookmark that\nit is trying to create or set points to a NON_EXISTANT\ncell. The status may also be set to NON_EXISTANT by the\nservice if the cell that the bookmark points to is\ndeleted. ", [["", 45], ["#next", 48], ["", 49], ["#next", 178]]]
[45, "message Bookmark {\n repeated Link cells   = 1;\n enum Status {\n  NORMAL       = 1;\n  DELETED      = 0;\n }\n \n optional Status status  = 2 [default = NORMAL] ;\n}", []]
[46, "message Client {\n // Merge policy: Replace what is set\n enum Status {\n  NORMAL         = 1;\n  INITIALIZING   = 2;\n  DISCONNECTED   = 3;\n }\n optional Status         status   = 1 [default = NORMAL];\n optional ActorMetadata  metadata = 2;\n}", [["#", 147]]]
[47, "message Selection {\n // Merge policy: Replace what is set\n optional string      name             =  1;\n required uint64      update_count     =  2;\n enum Status {\n  NONE         = 0;\n  PRIMARY      = 1;\n  SECONDARY    = 2;\n  INTERNAL     = 3;\n }\n //  <client_id, Status>\n map <string,Status>  clients          =  3;\n \n // Merge policy: Merge first, replace rest\n repeated Cursor      cursors          =  4;\n}", [["#", 104]]]
[48, "Setting bookmarks\n\nClients may set bookmarks by passing an entire\nbookmarks list to the master. Similarly, services\nmay set bookmarks by doing the same. This entire\nnew bookmarks list is forwarded to all other\nparties.", [["#next", 49]]]
[49, "Getting bookmarks\nBookmarks are automatically sent to the clients.\nIf the client receives a list of bookmarks, it\nshould consider that list to be definitive and\nup-to-date. If the list of bookmarks is empty,\nthen the empty list should be ignored, and any\npreviously received bookmarks list should be used\ninstead. Bookmarks do not need to be explicitly\nrequested.", [["#next", 178]]]
[51, "Opening Links\n\nFrom the client side:\n\nThere are two types of links. Local links and\nexternal links. Local links have '.' as their\npath. External links have any other string.\nIf the link is a local link, the client should\nopen it by simple jumping to the 'cell_id'.\nHowever, if it is an external link, the client\nshould open it using the 'gradesta-open-link'\nexecutable. The executable should be launched\nwith the same CWD as the client. It should have\nthree arguments, the service string, the path,\nand the cell_id.", [["#next", 190]]]
[52, "Architecture of local services", [["", 53]]]
[53, "service.gradesock", [["PULL", 113]]]
[56, "manager", [["PUSH", 53], ["PUSH", 57], ["PUSH", 58], ["PUSH", 59]]]
[57, "clients/client1/client.gradesock", [["PULL", 111]]]
[58, "clients/client2/client.gradesock", [["PULL", 109]]]
[59, "clients/client3/client.gradesock", [["PULL", 107]]]
[60, "Architecture for internet services", [["", 61]]]
[61, "service", [[" manager.gradesock", 63]]]
[63, "manager", [[" service.gradesock", 61], [" SSL sock", 70], [" SSL sock", 74], [" SSL sock", 75]]]
[64, "Watching and sharing cursors\n\nIt is often usefull for one client to\nfollow the cursor of another client or\neven to share a cursor with another client.\nFor example, a graphical text viewer may\nbe configured to center it's view around\nthe cursor of a text based graph editor.\n\nA step through debugger, posing as a client\nmay make a cursor available which points\nto the currently executed cell.\n\nIt is therefore necessary that clients\nbe able to see the cursors of other clients.\nIt seemed excessive to inform all clients of\nevery movement of a cursor by another client.\nTherefore, only clients which explicitly share\ncursors are notified when a cursor changes. \nThis is accomplished by allowing multiple\nclients to have cursors with the same id.\nWhen two clients have a cursor with the same\nid, these cursors are joined, and when one\nof the clients updates that cursor, the other\nis notified of the change by the manager.", [["", 42], ["#next", 148]]]
[65, "The Client object\n\nThe Client object's main purpose is to track\nthe Client's cursors.\n\nThe Client object has the following fields:\n\n'status') This can be one of\n  NORMAL:        This is almost always the status.\n  INITIALIZING:  Set once by the client for the first\n                 message from that client. Also sent by\n                 the manager to other clients in order\n                 to inform them of the new client.\n  DISCONNECTED:  Set one by the client for the last\n                 message from that client. Also sent\n                 by the manager to other clients to \n                 inform them of the \ndisconnection.\n\n'metadata') stores information about the client binary.", [["", 46], ["#next", 38]]]
[66, "The ServiceState object\nis the only interface between the service and\nthe manager/client. It is intentionally as simple\nas reasonable.\n\n'cells') a partial view of the cells in the graph.\n\n'new_cells') cells that have been added by clients.\nBecause services may use their own schemes for comming up\nwith cell_ids, it is not possible for clients to add\ncells to the 'cells' dictionary directly. Instead, cells\nare first added to the 'new_cells' dictionary, and then\nadded to the 'cells' dictionary (potentially with a\ndifferent ID) by the service. If the client wishes to\nfind out what the new cell's id is, as specified by the\nclient, it can search for a cell who's 'creation_id' is\nthe same as the id given origionally by the client.\n\n'in_view') a dictionary of cells which are in view.\nIt contains lenses which specify which sections of the cell's\ndata are being subscribed to.\n\n'index') the node at the center of the graph. The first\nnode that clients should look at if they aren't following\na link into the graph which specifies a different node.\n\n'on_disk_state') the way the service tells the clients\nwhether the graph has been saved, and the way the clients\nask the service to save the graph.\n\n'round') a magical object used for passing error messages\nback to the client, as well as for synchronizing some\nstate transitions undergone by the manager. This isn't\npart of the global data structure.\n\n'log') maps times to error strings. This is used by the\nservice to complain about life in general, to no one in\nparticular.\n\n'metadata') information about the service.\n\n'cell_template') the thing to copy when creating a new\ncell as a client. This is set up as a default by the\nmanager but can be customized by the service.\n\n'user_public_key') public GPG key of the user.\n\n'identity_servers') servers which can be used to verify\ncertain aspects of a user's identity, such as \"Are they\nhuman?\" or \"What is their real name?\".\n\n'service_state_modes') access permissions that describe\nwhat parts of this object clients are allowed to modify.", [["", 43], ["#next", 37]]]
[67, "Starting up/shutting down", [["#next", 68], ["", 117], ["", 69], ["", 115]]]
[68, "Service startup\nWhen a service starts up it launches the\nmanager, the the manager contacts the service,\nonce sending the service a scaffholding of protocol\ndefaults. The service replies passing certain\ninformation about itself and the graph that it serves.\n\n1) Manager -> Service\n   protocol defaults\n   manager metadata\n\n2) Service -> Manager\n   service and graph metadata", [["#next", 117]]]
[69, "Client startup\nWhen a client is launched, the first thing that\nhappens after the sockets have been created is\nthat the manager contacts the client, passing\nmetadata about the service and the clients which\nhave already connected.\n\nThe client then responds with metadata about\nitself along with any selections it might be\ninterested in.\n\n1) Manager -> Client\n   service metadata\n   client metadata\n   selections (without cursors)\n\n2) Client -> Manager\n   client metadata\n   selections\n\n4) Manager -> Service\n   cell views\n\n5) Service -> Manager\n   cells (repeate 4 and 5 untill all cells in selections are in view) \n\n6) Manager -> Client\n   cells", [["#next", 115]]]
[70, "manager-proxy", [[" SSL sock", 63], [" client.gradesock", 71], [" client.gradesock", 72], [" client.gradesock", 73]]]
[71, "client", [[" manager.gradesock", 70]]]
[72, "client", [[" manager.gradesock", 70]]]
[73, "client", [[" manager.gradesock", 70]]]
[74, "manager-proxy", [[" SSL sock", 63], [" client.gradesock", 76], [" client.gradesock", 77]]]
[75, "manager-proxy", [[" SSL sock", 63], [" client.gradesock", 78]]]
[76, "client", [[" manager.gradesock", 74]]]
[77, "client", [[" manager.gradesock", 74]]]
[78, "client", [[" manager.gradesock", 75]]]
[80, "Graph serialization\n\nThe simplest form of gradesta graph serialization\nis to serialize the graph using protobuf, to a\nGraphState object.\n\nThis is an efficient way to serialize a graph, it is\nboth small in size and quick to parse. However, it\nis not a very usefull method if you wish to check your\ngraph in to a version control system and acheive readable\ndiffs.\n\nFor that reason, the gradesta standard also comes with\nits own, custom, textual, serialization format named\ngratexta (.gt). The goal of the format is to provide a\nsimple, human readable, human editable format in which\nthe cell text is unescaped and rendered with newlines\nin-tact so as to allow line based diffing algorithms to work.\n\nThe format is custom because none of the popular serialization\nformats that were analyzed at the time of specification supported\narbitrary multi-line binary strings. Yaml's | format does not support\nmulti-line strings beggining with whitespace. TOML's ''' multi-\nline strings do not support strings containing three single quotes.\nThe only format with usable multiline strings that was found was\nRFC 5322, which unfortunately is limited to 7 bit ASCII and supports\nneither nested dictionaries nor arbitrary single line strings nor\narbitrary dictionary keys.\n\nWanting a well defined, extensible, easilly parsed format, however,\nit was decided to extend YAML rathern than create an entirely new\nformat.\n\nIn order to further reduce the burden of parsing a custom format,\ngratexta2protobuf and protobuf2gratexta utilities are provided.\nIf you are creating a service which needs to edit a gratesta graph\nit may be better to stack your service ontop of a standard gratesta\nservice rather than to support the gratesta file format directly.\n\nThe gratexta format consists of a stream of YAML documents. The first\ndocument is a mapping of bookmark names to destinations.\n\nThe documents which follow represent gradesta cells. Each cell\ndocument may be followed with a multiline cell text field. If\nthis field does not exist, the cell is assumed to be empty.\n\nEach line of the multiline cell text field is prepended with the\n',' character. No escaping is necessary.\n\nParsing a gratexta file with the help of a standard YAML parser\nis easy. First split the file at each line consisting of only\n\"---\". Then remove the first and second segments. These segments\nrepresent the whatever came before the first YAML document and the\n\"bookmarks\" document. Parse the bookmarks document using your YAML\nparser. Then split remaining segments the line \"...\". You should\nnow have a list of tuples, the first of which represents the cell's\nattributres, and the second of which represents the cell's text.\nParse the \"car\"s or \"heads\" of these tuples with a YAML parser, and\nparse the \"cdr\"s or \"tails\" by ignoring lines not starting with \",\"\nand appending all lines starting with \",\" removing the \",\" as you\ngo. \n\nHere is an example gratexta file.\n\n---------START EXAMPLE gratexta file------------------------------\n---\n\"<bookmark-name>\": <cell-id-of-destination>\n\"<another-bookmark-name>\": <cell-id-of-destination>\n...\n\n---\n<cell-id>\n up       : <id-of-destination>\n down     : <id-of-destination>\n left     : <service-name>/<graph-path>/<id-of-destination>\n right    : <service-name>/<graph-path>/<id-of-destination>\n mime     : text/plain\n encoding : UTF8\n\n related:\n  \"foo bar\": <service-name>/<graph-path>/<id-of-destination>\n  \"baf baz\": <service-name>/<graph-path>/<id-of-destination>\n...\n,Cell\n,text\n,\n, \n,in\n,multi-line\n,block\n---\n<next-cell-id>:\n up     : <id-of-destination>\n down   : <id-of-destination>\n left   : <service-name>/<graph-path>/<id-of-destination>\n right  : <service-name>/<graph-path>/<id-of-destination>\n mime     : text/plain\n encoding : UTF8\n...\n,Cell\n,text\n,in\n,multi-line\n,block\n,prepended with ',' and ended \n,by the start\n,of a new YAML document\n,or the end of the document\n---------END EXAMPLE----------------------------------", [["", 170], ["#next", 120]]]
[81, "Resolving service names\n\nThe gradesta-open-link executable resolves\nservice ids by looking them up in a services dir\nwich contains freedesktop style .desktop files.\nThe gradesta-service-ctl executable will attempt\nto look up service ids in the following locations\nin the following order.\n\n1) $XDG_CONFIG_HOME/gradesta/services.d/<service-id>.desktop\n2) $XDG_DATA_HOME/gradesta/services.d/<service-id>.desktop\n3) /etc/gradesta/services.d/<service-id>.desktop\n3) $XDG_DATA_DIRS/gradesta/services.d/<service-id>.desktop\n\nNote, that the $XDG variables may not be set,\nin which case it is necessary to follow the\nfreedesktop.org xdg standard.\n\nhttps://specifications.freedesktop.org/menu-spec/latest/ar01s02.html\n\nFor convenience, it is usefull to find a\nlibrary for doing so such as python's xdg library.\n\nhttps://pypi.org/project/xdg/", [["#next", 178]]]
[82, "Telling the service to save the graph\n\nClients may direct the service to save the graph\nto disk by setting the 'saved' flag of the ServiceState\nobject to true.\n\nClients may save-as a graph by launching the\ngratesta-save-as executable with the first argument\nset to the path of the service directory of the\nservice who's graph is to be saved and the second\nargument set to the real file system path to which\nthe graph is to be saved. There are also flags for\nspecifying cursors within the graph to be save-as'ed\nso as to allow for the save-as'ing of parts of infinite\ngraphs or the save-as'ing of individual graphs of a\nmulti-graph.\n\nThe gratesta-save-as executable will imediately save\nthe graph to a file and exit. If the client then wishes \nto open a new service to serve the save-as'ed graph, it\nshould do so as it would normally open a gratesta file.", [["", 66]]]
[83, "Stacking services\n\nIt is often desireable to \"stack\" services ontop\neachother. This is done in the obvious way, a stackable\nservice acts as a client to another service. No magic,\nnothing.\n\nStacking is done, for example, when producing an IDE\nservice which adds functionality ontop the standard\ngratesta service, or when creating utility services\nsuch as interactive search and replace services or\ninteractive graph manipulation/simplification services.", [["", 84], ["#next", 80]]]
[84, "Architecture of stacked services", [["", 85]]]
[85, "bottom service", [[" manager.gradesock", 88]]]
[88, "manager of bottom service", [[" client.gradesock", 89], [" service.gradesock", 85]]]
[89, "stacked service", [[" manager.gradesock", 91], [" manager.gradesock", 88]]]
[91, "manager of stacked service", [[" client.gradesock", 92], [" client.gradesock", 93], [" client.gradesock", 94], [" service.gradesock", 89]]]
[92, "client to stacked service", [[" manager.gradesock", 91]]]
[93, "client to stacked service", [[" manager.gradesock", 91]]]
[94, "client to stacked service", [[" manager.gradesock", 91]]]
[95, "Copyright #2\nThough the gradesta project is licensed under\nthe AGPLv3, it is permisible to use this\nprotobuf file in non-AGPL licensed applications\nin order to ensure protocol compatibility,\ngranted that this file remains unmodified and\nyour application maintains compatibility with\nthe gradesta protocol.\n\nIf your legal team has a recomendation as to\nhow this could be phrased better, please let\nme know.\n\nTimothy Hobbs", [["#next", 2]]]
[96, "About gradesta using simple writer\nhttps://xkcd.com/simplewriter/\n\nGraphs are a set of things where each thing points\nto other things in the graph. Kind of like how \nroads go from one city to another. There can be \ndirected graphs in which the roads are one way. Or \nthere can be undirected graphs in which the roads \nall go both ways. Gradesta graphs are a special \nkind of directed graph called a doubly linked \ndirected graph. This is a kind of graph in which \nthe roads all go only one way, but there is always \na road going back for every road going forward. You\ncan still tell which way is forwards and which way \nis back though because the roads that go back \nalways go to the left and the roads that go forward\nalways go to the right.\n\nGraphs can be cyclic or non-cyclic. If a graph is \ncyclic, that means that if you keep on going the \nsame way down the roads sometimes you will get\nback to where you started. If a graph is non-cyclic, \nthat means that you will never get back to where \nyou started unless you change directions. In \ngradesta graphs, if you go only up or only down, \nyou will never get back to where you started. But \nif you go left or right, you might get back to \nwhere you started.\n\nGradesta graphs can be very large, even so large \nthat they do not end. This means that gradesta \nneeds to be a protocol and not just a new kind of \nfile. If there was a graph that was so large it did\nnot end, how would you save it to a file? And when \nthe graphs are so large, that they cannot be saved,\nhow can you offer them as a protocol? You could \nmake a protocol which had many ways to ask for \nparts of the graph. You would ask for one node \nfrom the graph, then ask for the nodes that are next\nto that node. You could  then ask the service to tell\nyou if anything in the graph changed. This would\nbe the normal way to make a protocol. The problem\nwith this way of making a protocol happens when\nperson wants to see the nodes that are near a given\nnode. This seems very easy, but it is pretty hard.\nThis is  really hard when you want to ask over\nthe Internet, because you would have to ask for\nevery node next to your node, and then you would\nhave to ask for every node next to the next to nodes.\nAnd each time you would send your questions and answers\nback and forth over the Internet. This would be slow.\nSo instead of asking for each thing one thing at a\ntime, it is much faster and simpler for a client to\nask for all the nodes near a node.\n\nFiguring out what nodess are near a nodeg is so \nhard that I decided that it is better to not force \nclients or services to need to know how to figure \nit out. Instead, I made it so that there is a \nmanager, which is a program that sits between the \nclients and the service and figures that out. The \nmanager also helps make sure that the clients work \ntogether well. The managers job is to do all the \nhard jobs. This is because there is only one kind \nof manager, and you only need to figure out those \nhard problems once. In fact, the services job is so\neasy that it does not even need to know that there \nis more than one client, the manager talks to all \nthe clients and then talks to the service as if \nthere was only one. That way new clients and \nservices are very easy to make.\n\nThe gradesta protocol is also different from a \nnormal asking protocol in other ways. You could say\nthat gradesta is not an asking and telling protocol\nbut a saying protocol. A client does not ask for \neach node near a node one at a time but says that\nit wants to look at all nodes near a node. When \nit wants to change a node, it does not tell the \nservice to change the node, but it says that a new\nnode has the same name as an old node. This means\nthat the language that the service uses is the same\nas the language that the client uses. When the \nclient asks for a thing, the service sends the \nthing the same way as the client would send a new \nthing or a changed thing to the service.\n\nThe protocol is also a counting protocol. The \nclient and service count how many times each thing \nchanges. If two clients change a thing at the same \ntime, they will both count up by one. Then you will\nhave two different things with the same number. \nIf two different values have the same number, you\nknow something has gone wrong and you pick\none value and you tell the client which sent the \nother value that it was too slow. The manager makes\nsure that the changes are counted correctly. \nThis is another hard job the manager does for everyone \nelse.\n\nMessages are also counted. This is actually how\nthe manager knows which client sent a message. The \nclient who's number of messages went up is the \nclient who sent it. Counting protocols are good \nbecause it is easier to find out what went wrong \nwhen things don't work. Sometimes you can see what \nwent wrong just by looking at the numbers of \nchanges or mesages and seeing that they are too big\nor too small.\n\nSince gradesta is a saying protocol, it is possible\nfor a client to see what other clients are looking \nat. This is because each client says what thing it \nis looking at just by saying what it looks at. The\nmanager then tells everyone what everyone else is\nlooking at. This can be used in many ways. If you\nwant to follow a client and show what it is looking\nat in a different way, you can. If you want to show\nanother client what you are looking at, you can. If\nthere is a client who's job is to find problems, like\na debugger, then the client can say it is looking at\nthose problems, and the other clients can look at those\nproblems too. If a client is an interpreter which is\nwalking through a graph of code then the other clients\ncan follow it.\n\nIf you have a graph of things but you do not know \nwhat nodes are in the graph then how do you ask \nfor anything? How can you say you are looking at \nsome node if you do not know what is there to look \nat? In gradesta we fix this problem by saying that\nthere is one node which is at the center of the\ngraph. We call this the index node, from index.html", [["#next", 8]]]
[97, "Shutting down services\n\nIf you want, set the saved flag to true. Then SIGTERM.", [["#next", 96]]]
[98, "The ClientState object\n\nThe ClientState object consists of two fields:\n\n'service_state') State which is visible to the service.\n\n'clients') maps client_ids to Client objects. This map is\nsent to clients by the manager in full when a client starts\nup. However, this map can only contain one entry when sent\nby a client, that entry should be the entry for the client\nwhich sent the message.\n\n'manager') stores metadata about the manager. Only ever sent\nby the manager.\n\n'selections') sets of cursors (which point to cells) and which\nare \"selected\" by clients. More than one client can share a\nsingle selection.\n\n'walk_trees') holds a global set of walk-trees which are used\nto specify topologies that clients wish to view.\n\nALPHA fields (complete behavior not yet specified):\n\n'identity_challenge') is a random and unique string generated\nby the manager when serving the service on the open internet.\nThe client is to sign the 'identity_challenge' prepended\nwith the string:\n\n    \"This is a gradesta protocol identity challenge.\\n\".\n\n'user_signature') is the user's response to the identity\nchallenge. A plain text GPG signature of the identity challenge.", [["", 42], ["#next", 66]]]
[99, "message Cursor {\n map <string, int32>  cells              = 1;\n repeated Symbol      symbols            = 2;\n map <int32, RHS>     production_rules   = 3;\n repeated uint64      vars               = 4;\n map <string, bool>   in_view            = 5;\n optional uint64      max_length         = 6;\n repeated DataCursor  data_cursors       = 7;\n}", []]
[100, "The Cursor object\ndescribes a way of watching a group of cells which neighbor\na given cell.\n\nCursors have the following properties:\n\nname:            Human readable name/description of cursor.\n\ncell:            Id of the cell at the center of the\n                 neighborhood.\n\ndata_cursors:    Optionally, clients may specify actual locations within\n                 a cell's data which are pointed to or highlighted.\n\nlos:             Line of sight of the cursor. Repeated, one per dimension.", [["", 99], ["#next", 192]]]
[104, "message Cursor {\n // Merge policy: Full replace\n // cell parameters\n map <string, string>     center             = 1;\n optional uint64          cursor_instance_id = 2;\n\n\n optional WalkTreeInstance walk_tree         = 3;\n\n // data cursors\n //  <start, len> merge: set length to 0 to remove\n map <uint64, uint64>      selections        = 4;\n optional uint64           cursor            = 5;\n optional uint64           data_chunk        = 6;\n optional Link             code_completions  = 7;\n\n // book-keeping\n optional bool             deleted           = 8;\n //  in_view; set by manager\n repeated PlacedSymbols    placed_symbols    = 9;\n}", [["#", 5], ["#", 204], ["#", 208]]]
[105, "The Cursor object\n\nindex:      Clients may, if they wish, share an index which points\n            within the cell's data to more closely specify where\n            they are looking. The index can either be a text index\n            or a binary index, according to the specified encoding\n            of the cell. If the encoding is specified as unknown,\n            the index should be a utf-8 index. There is no\n            validation as to whether this index points inside the\n            center cell's actual text.\n\nlen:        The length of the cursor. This is used if a cursor\n            selects a section of data/text, rather than simply\n            pointing to a given point in the data/text.", [["", 104], ["#next", 64]]]
[106, "Cell Runtime state\n\nThe cell Runtime only exists during runtime, but\nis never serialized. The serialized part of the\ncell is intended to be as simple as possible, but\nthe runtime is somewhat more complex. \n\n'cell') the serializable part of the cell.\n\n'update_count') reprensents the number of times the\ncell has been modified in the current session (or\nglobally if serialized by the service). This is\nupdated by the client each time it requests a change,\nand is used to ensure that there is no data loss when\nmultiple clients edit the same cell at the same time.\n\n'click_count') the number of times the cell has been\n'clicked' or 'pressed' in the client.\n\n'deleted') has the cell been deleted?\n\n'creation_id') if clients and services were to use the\nsame namespace for new cell_ids", [["#next", 191], ["", 119]]]
[107, "client3", [["PUSH", 108]]]
[108, "clients/client3/manager.gradesock", [["PULL", 56]]]
[109, "client2", [["PUSH", 110]]]
[110, "clients/client2/manager.gradesock", [["PULL", 56]]]
[111, "client1", [["PUSH", 112]]]
[112, "clients/client1/manager.gradesock", [["PULL", 56]]]
[113, "service", [["PUSH", 114]]]
[114, "manager.gradesock", [["PULL", 56]]]
[115, "Client shutdown\n\nOnce the client shuts itself down, the manager will detect\nthat the client's socket is no longer present, and will\npreform all necessary cleanup. The manager will set the\nclient's status to DISCONNECTED and send that status to\nany other clients. Once no clients remain, the manager will\nshutdown the service by sending it the TERM signal.", [["#next", 98]]]
[117, "Service shutdown\n\nThe manager will send the service a TERM signal\nafter the last client has disconnected.", [["#next", 69]]]
[118, "Protocol limitations\n\nDue to the way the protocol is designed, service designers\nmust be careful not to push changes to graph topology with\nexcessive frequency. If the service pushes changes the\ntopology of the graph too quickly, the manager will cycle\nindefintely trying to synchronize the new topologies, and the\nclients will never receive any messages from the manager.\nServices should not make changes to graph topology more frequenlty\nthan once every couple of hundred milliseconds. Note, that this\nlimitation does not apply to self regulating topology change\ncycles. In the case of a networked, massively multi-user graph\neditor, for example, it is possible that some users with slower\nconnections could be \"shut out\" of the system, because their\nmanagers would never complete state synchronization, however\nmost users will by definition be able to view and edit the\ngraph, because the rate of edit's is self regulated by the\nuser's own ability to edit the graph. If no user's manager is\nable to synchronize quickly enough, than no edits will be\nmade, and therefore the rate of toplogy change will necessarilly\nslow ;) ", [["#next", 82]]]
[119, "message CellRuntime {\n // Merge policy: Replace what is set\n\n // set once\n map <string, string>   parameters             =  1;\n map <string, string>   patch_parameters       =  2;\n\n // always set by manager, not merged\n optional bool          in_view                =  3;\n repeated uint64        visible_data_sections  =  4;\n\n // merged normally\n optional Cell          cell                   =  5;\n required uint64        update_count           =  6;\n optional uint64        click_count            =  7;\n optional bool          deleted                =  8;\n\n //  <field,  Mode>\n map <uint32, Mode>     cell_runtime_modes     =  9;\n //  <field,  Mode>\n map <uint32, Mode>     cell_modes             = 10;\n //  <dir,    Mode>     \n map <sint64, Mode>     link_direction_modes   = 11;\n //  <field,  Mode>\n map <uint32, Mode>     link_modes             = 12;\n}", [["#", 186], ["#", 189], ["#", 3]]]
[120, "Additions and changes to the Gradesta protocol\n\nThe following rules and restrictions apply \nwhen proposing changes to the gradesta protocol:\n\n1) Changing or extending the gradesta protocol\nis strictly forbidden.\n\n2) Anyone who even considers such proposing a\nchange shall be chased from town by a mob of\npaintbrush weilding bicyclists\n\n2) Proposals must be composed in Iambic pentameter\n\n3) Proposals must be sung to a tree of at least\n200 years of age\n\n4) Video evidence of the recital must be\nincluded along with the proposal text", [["#next", 96]]]
[147, "message ActorMetadata {\n // Merge policy: Replace what is set\n optional string name           = 1;\n optional string source_url     = 2;\n optional string privacy_policy = 3;\n}", []]
[148, "Actor metadata\n\nThe actor metadata object holds metadata associated with\na service, manager, or client.\n\nIts fields are:\nname: Human readable name of the actor\nsource_url: field is intended to enable AGPL compliance\nprivacy_policy: this field is displayed by the client before any identiy info is sent", [["", 147], ["#next", 171]]]
[170, "message GraphState {\n map <string,Cell>        cells                = 1; // Maps cell_id to Cell object\n required string          index                = 2;\n}", [["#", 3], ["#", 45]]]
[171, "The Notification object\nThis object is shared between the manager-kernel and\nthe notification manager.\n\nThis consists of the updates to the client_state and the\nlist of clients who are to receive the updates.", [["", 172], ["#next", 196]]]
[172, "message Notification {\n optional ClientState  client_state         = 1;\n repeated string       recipients           = 2;\n}", [["#", 42]]]
[174, "message Manager {\n // Merge policy: Replace what is set\n optional ActorMetadata metadata = 1;\n}", [["#", 147]]]
[175, "The Manager object", [["", 174], ["#next", 65]]]
[176, "message MessageFromClient {\n optional ClientState client_state          = 1;\n optional string      origin                = 2;\n}", []]
[177, "message Round {\n}", []]
[178, "The round object\n\nRequests are made by clients and processed by the\nservice. They are stored in the ServiceState as a\nmap mapping from a uuid4 request_id to a Request\nobject.\n\nThe request object consists of the id of the client\nwhich originated the request and a string containing\nany errors which occured when processing the request.\nThe service should leave ensure that the client_of_origin\nstring is still set when responding to a request.", [["", 177], ["#next", 175]]]
[181, "message LOSState {\n map <uint64, Condition> forth = 1;\n map <uint64, Condition> back  = 2;\n}", [["#", 182]]]
[182, "message Condition {\n enum Requirement {\n  UNIQUE = 1;\n  NO_BOUNDARY = 2;\n }\n repeated Requirement requirements = 1;\n optional uint32 var               = 2;\n optional int32  cont_true         = 3;\n optional int32  cont_false        = 4;\n}", []]
[186, "message Mode {\n // Merge policy: full replace\n optional bool read       = 1;\n optional bool write      = 2;\n optional bool executable = 3;\n optional bool dynamic    = 4;\n optional bool emulated   = 5;\n}", []]
[187, "message ServiceModeTable {\n optional Mode index     = 3;\n optional Mode layers    = 4;\n optional Mode error_log = 7;\n}", [["#", 186]]]
[189, "enum Encoding {\n UNKNOWN       = 0;\n OTHER_BINARY  = 1;\n UTF8          = 106;\n}", []]
[190, "Encodings\n\nThese are the encodings by which the data field of the\ncell is encoded. The numeric value for charset encodings is\ntaken from the MIBenum column in the table found here:\n\nhttps://www.iana.org/assignments/character-sets/character-sets.xhtml", [["#", 189], ["#next", 106]]]
[191, "Field Modes\n\nDetermine access permissions that clients have to\nmanipulate with fields in the service-state,cells,\nand links.\n\nNONE: This field is not supported.\nREAD_WRITE: Client can write to the field.\nREAD_ONLY: Client can only read from the field but\nnot change it.\nDYNAMIC: Every change made to the field should be\nreported immediately. Usefull for the data and coords\nfield if you want to have all clients instantly\nsynchronize the fields. The Dynamic mode of data fields\nalso means that the client should create DataCursors\nand update them as the cursor moves.", [["#next", 19]]]
[192, "The LineOfSight object\n\ncells:           The cells within view of this cursor. This is set by the\n                 manager.", [["#next", 193]]]
[193, "The LOSState object\n\nThe LOSState object contains two dictionaries, \nback and forth, which map dimensions to conditions\nunder which those dimensions will be traversed\nin a given direction.", [["#", 181], ["#next", 194]]]
[194, "The Condition object", [["#", 182], ["#next", 105]]]
[196, "The MessageFromClient object", [["#", 176], ["#next", 118]]]
[199, "message Symbol {\n // Merge policy: full replace\n optional sint64 direction        = 1;\n repeated Op     ops              = 2;\n optional bool   uroborus         = 3;\n repeated uint32 children         = 4;\n optional bool   wanted           = 5;\n}", [["", 203]]]
[203, "message Op {\n // Merge policy: full replace\n required uint32 var              = 1;\n\n enum Operation {\n  DECRIMENT                       = 1;\n  INCREMENT                       = 2;\n  RATION                          = 3;\n }\n\n optional Operation     op        = 2;\n\n enum Relation {\n  LT  = 0; // var <  var2\n  EQ  = 1; // var == var2\n  LTE = 2; // var <= var2\n  GT  = 3; // var >  var2\n  GTE = 4; // var >= var2\n  NEQ = 5; // var != var2\n }\n // <var2  , Relation>\n map<uint32, Relation>  checks    = 3;\n}", []]
[204, "message PlacedSymbols {\n // Merge policy: full replace\n optional uint64       cell_instance_id  = 1;\n repeated PlacedSymbol placed_symbols    = 2;\n optional bool         in_view           = 3;\n}", [["#", 205]]]
[205, "message PlacedSymbol {\n // Merge policy: full replace\n required uint32 symbol_id = 1;\n repeated uint64 vars      = 2;\n}", []]
[206, "message WalkTree {\n // Merge policy: set only once\n repeated Symbol symbols          = 1;\n repeated uint64 vars             = 2;\n repeated uint64 static_vars      = 3;\n optional bool   deleted          = 4;\n}", [[" #", 199]]]
[208, "message WalkTreeInstance {\n // Merge policy: Full replace\n // The walk-tree defines the topology that\n // this cursor can see. If you've ever played\n // RTS games, think of it as being the cursor's\n // line of sight.\n optional string      walk_tree         = 1;\n //  <index,  value>\n map <uint32, uint64> var_overrides     = 2;\n}", []]
[211, "message UserAttr {\n // Merge policy: full replace\n optional string       human_readable_description = 1;\n optional string       value                      = 2;\n}", []]
[212, "message IdentityServer {\n // Merge policy: full replace\n optional string      description = 1;\n //  <value,  signature>\n map <string, string> signatures  = 2;\n}", []]
[213, "message ActorMetadata {\n // Merge policy: Replace what is set\n optional string name           = 1;\n optional string source_url     = 2;\n optional string privacy_policy = 3;\n}", []]
[214, "message ServiceState {\n // Merge policy: Replace what is set\n // <instance_id, cell_runtime>\n map<uint64, CellRuntime> cells                =  1;\n repeated CellRuntime     new_cells            =  2;\n optional CellRuntime     cell_template        =  3;\n\n enum OnDiskState {\n  READ_ONLY = 1; SAVED = 2; MODIFIED = 3;\n }\n \n optional OnDiskState     on_disk_state        =  4;\n //  <time, message>\n map <string, string>     log                  =  5;\n optional ActorMetadata   service_metadata     =  6;\n\n //  <field,  Mode>\n map <uint32, Mode>       service_state_modes  =  7;\n}", [["#", 186], ["#", 119], ["#", 213]]]
[215, "message Delta {\n oneof delta {\n  ServiceState service_state      = 1;\n  ManagerState manager_state      = 2;\n }\n optional string client_of_origin = 3;\n optional string errors           = 4;\n required uint64 request_no       = 5;\n optional bool   full_sync        = 6;\n}", [["#", 214], ["#", 42]]]
